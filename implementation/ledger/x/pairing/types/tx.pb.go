// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: racecarweb/pairing/v1/tx.proto

package types

import (
	context "context"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	_ "github.com/cosmos/cosmos-sdk/types/msgservice"
	_ "github.com/cosmos/cosmos-sdk/types/tx/amino"
	_ "github.com/cosmos/gogoproto/gogoproto"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// MsgUpdateParams is the Msg/UpdateParams request type.
type MsgUpdateParams struct {
	// authority is the address that controls the module (defaults to x/gov unless overwritten).
	Authority string `protobuf:"bytes,1,opt,name=authority,proto3" json:"authority,omitempty"`
	// NOTE: All parameters must be supplied.
	Params Params `protobuf:"bytes,2,opt,name=params,proto3" json:"params"`
}

func (m *MsgUpdateParams) Reset()         { *m = MsgUpdateParams{} }
func (m *MsgUpdateParams) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateParams) ProtoMessage()    {}
func (*MsgUpdateParams) Descriptor() ([]byte, []int) {
	return fileDescriptor_81d7d37064c45cab, []int{0}
}
func (m *MsgUpdateParams) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateParams) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateParams.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateParams) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateParams.Merge(m, src)
}
func (m *MsgUpdateParams) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateParams) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateParams.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateParams proto.InternalMessageInfo

func (m *MsgUpdateParams) GetAuthority() string {
	if m != nil {
		return m.Authority
	}
	return ""
}

func (m *MsgUpdateParams) GetParams() Params {
	if m != nil {
		return m.Params
	}
	return Params{}
}

// MsgUpdateParamsResponse defines the response structure for executing a
// MsgUpdateParams message.
type MsgUpdateParamsResponse struct {
}

func (m *MsgUpdateParamsResponse) Reset()         { *m = MsgUpdateParamsResponse{} }
func (m *MsgUpdateParamsResponse) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateParamsResponse) ProtoMessage()    {}
func (*MsgUpdateParamsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_81d7d37064c45cab, []int{1}
}
func (m *MsgUpdateParamsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateParamsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateParamsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateParamsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateParamsResponse.Merge(m, src)
}
func (m *MsgUpdateParamsResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateParamsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateParamsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateParamsResponse proto.InternalMessageInfo

// MsgInitiateBidirectionalPairing defines the MsgInitiateBidirectionalPairing message.
type MsgInitiateBidirectionalPairing struct {
	Creator            string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	ComponentA         string `protobuf:"bytes,2,opt,name=component_a,json=componentA,proto3" json:"component_a,omitempty"`
	ComponentB         string `protobuf:"bytes,3,opt,name=component_b,json=componentB,proto3" json:"component_b,omitempty"`
	OperationalContext string `protobuf:"bytes,4,opt,name=operational_context,json=operationalContext,proto3" json:"operational_context,omitempty"`
	ProxyId            string `protobuf:"bytes,5,opt,name=proxy_id,json=proxyId,proto3" json:"proxy_id,omitempty"`
	ForceImmediate     bool   `protobuf:"varint,6,opt,name=force_immediate,json=forceImmediate,proto3" json:"force_immediate,omitempty"`
}

func (m *MsgInitiateBidirectionalPairing) Reset()         { *m = MsgInitiateBidirectionalPairing{} }
func (m *MsgInitiateBidirectionalPairing) String() string { return proto.CompactTextString(m) }
func (*MsgInitiateBidirectionalPairing) ProtoMessage()    {}
func (*MsgInitiateBidirectionalPairing) Descriptor() ([]byte, []int) {
	return fileDescriptor_81d7d37064c45cab, []int{2}
}
func (m *MsgInitiateBidirectionalPairing) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgInitiateBidirectionalPairing) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgInitiateBidirectionalPairing.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgInitiateBidirectionalPairing) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgInitiateBidirectionalPairing.Merge(m, src)
}
func (m *MsgInitiateBidirectionalPairing) XXX_Size() int {
	return m.Size()
}
func (m *MsgInitiateBidirectionalPairing) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgInitiateBidirectionalPairing.DiscardUnknown(m)
}

var xxx_messageInfo_MsgInitiateBidirectionalPairing proto.InternalMessageInfo

func (m *MsgInitiateBidirectionalPairing) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgInitiateBidirectionalPairing) GetComponentA() string {
	if m != nil {
		return m.ComponentA
	}
	return ""
}

func (m *MsgInitiateBidirectionalPairing) GetComponentB() string {
	if m != nil {
		return m.ComponentB
	}
	return ""
}

func (m *MsgInitiateBidirectionalPairing) GetOperationalContext() string {
	if m != nil {
		return m.OperationalContext
	}
	return ""
}

func (m *MsgInitiateBidirectionalPairing) GetProxyId() string {
	if m != nil {
		return m.ProxyId
	}
	return ""
}

func (m *MsgInitiateBidirectionalPairing) GetForceImmediate() bool {
	if m != nil {
		return m.ForceImmediate
	}
	return false
}

// MsgInitiateBidirectionalPairingResponse defines the MsgInitiateBidirectionalPairingResponse message.
type MsgInitiateBidirectionalPairingResponse struct {
	ChallengeId string `protobuf:"bytes,1,opt,name=challenge_id,json=challengeId,proto3" json:"challenge_id,omitempty"`
	LctId       string `protobuf:"bytes,2,opt,name=lct_id,json=lctId,proto3" json:"lct_id,omitempty"`
	Status      string `protobuf:"bytes,3,opt,name=status,proto3" json:"status,omitempty"`
	QueueId     string `protobuf:"bytes,4,opt,name=queue_id,json=queueId,proto3" json:"queue_id,omitempty"`
}

func (m *MsgInitiateBidirectionalPairingResponse) Reset() {
	*m = MsgInitiateBidirectionalPairingResponse{}
}
func (m *MsgInitiateBidirectionalPairingResponse) String() string { return proto.CompactTextString(m) }
func (*MsgInitiateBidirectionalPairingResponse) ProtoMessage()    {}
func (*MsgInitiateBidirectionalPairingResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_81d7d37064c45cab, []int{3}
}
func (m *MsgInitiateBidirectionalPairingResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgInitiateBidirectionalPairingResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgInitiateBidirectionalPairingResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgInitiateBidirectionalPairingResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgInitiateBidirectionalPairingResponse.Merge(m, src)
}
func (m *MsgInitiateBidirectionalPairingResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgInitiateBidirectionalPairingResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgInitiateBidirectionalPairingResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgInitiateBidirectionalPairingResponse proto.InternalMessageInfo

func (m *MsgInitiateBidirectionalPairingResponse) GetChallengeId() string {
	if m != nil {
		return m.ChallengeId
	}
	return ""
}

func (m *MsgInitiateBidirectionalPairingResponse) GetLctId() string {
	if m != nil {
		return m.LctId
	}
	return ""
}

func (m *MsgInitiateBidirectionalPairingResponse) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

func (m *MsgInitiateBidirectionalPairingResponse) GetQueueId() string {
	if m != nil {
		return m.QueueId
	}
	return ""
}

// MsgCompletePairing defines the MsgCompletePairing message.
type MsgCompletePairing struct {
	Creator        string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	ChallengeId    string `protobuf:"bytes,2,opt,name=challenge_id,json=challengeId,proto3" json:"challenge_id,omitempty"`
	ComponentAAuth string `protobuf:"bytes,3,opt,name=component_a_auth,json=componentAAuth,proto3" json:"component_a_auth,omitempty"`
	ComponentBAuth string `protobuf:"bytes,4,opt,name=component_b_auth,json=componentBAuth,proto3" json:"component_b_auth,omitempty"`
	SessionContext string `protobuf:"bytes,5,opt,name=session_context,json=sessionContext,proto3" json:"session_context,omitempty"`
}

func (m *MsgCompletePairing) Reset()         { *m = MsgCompletePairing{} }
func (m *MsgCompletePairing) String() string { return proto.CompactTextString(m) }
func (*MsgCompletePairing) ProtoMessage()    {}
func (*MsgCompletePairing) Descriptor() ([]byte, []int) {
	return fileDescriptor_81d7d37064c45cab, []int{4}
}
func (m *MsgCompletePairing) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCompletePairing) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCompletePairing.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCompletePairing) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCompletePairing.Merge(m, src)
}
func (m *MsgCompletePairing) XXX_Size() int {
	return m.Size()
}
func (m *MsgCompletePairing) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCompletePairing.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCompletePairing proto.InternalMessageInfo

func (m *MsgCompletePairing) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgCompletePairing) GetChallengeId() string {
	if m != nil {
		return m.ChallengeId
	}
	return ""
}

func (m *MsgCompletePairing) GetComponentAAuth() string {
	if m != nil {
		return m.ComponentAAuth
	}
	return ""
}

func (m *MsgCompletePairing) GetComponentBAuth() string {
	if m != nil {
		return m.ComponentBAuth
	}
	return ""
}

func (m *MsgCompletePairing) GetSessionContext() string {
	if m != nil {
		return m.SessionContext
	}
	return ""
}

// MsgCompletePairingResponse defines the MsgCompletePairingResponse message.
type MsgCompletePairingResponse struct {
	LctId        string `protobuf:"bytes,1,opt,name=lct_id,json=lctId,proto3" json:"lct_id,omitempty"`
	SessionKeys  string `protobuf:"bytes,2,opt,name=session_keys,json=sessionKeys,proto3" json:"session_keys,omitempty"`
	TrustSummary string `protobuf:"bytes,3,opt,name=trust_summary,json=trustSummary,proto3" json:"trust_summary,omitempty"`
}

func (m *MsgCompletePairingResponse) Reset()         { *m = MsgCompletePairingResponse{} }
func (m *MsgCompletePairingResponse) String() string { return proto.CompactTextString(m) }
func (*MsgCompletePairingResponse) ProtoMessage()    {}
func (*MsgCompletePairingResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_81d7d37064c45cab, []int{5}
}
func (m *MsgCompletePairingResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCompletePairingResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCompletePairingResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCompletePairingResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCompletePairingResponse.Merge(m, src)
}
func (m *MsgCompletePairingResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgCompletePairingResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCompletePairingResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCompletePairingResponse proto.InternalMessageInfo

func (m *MsgCompletePairingResponse) GetLctId() string {
	if m != nil {
		return m.LctId
	}
	return ""
}

func (m *MsgCompletePairingResponse) GetSessionKeys() string {
	if m != nil {
		return m.SessionKeys
	}
	return ""
}

func (m *MsgCompletePairingResponse) GetTrustSummary() string {
	if m != nil {
		return m.TrustSummary
	}
	return ""
}

// MsgRevokePairing defines the MsgRevokePairing message.
type MsgRevokePairing struct {
	Creator       string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	LctId         string `protobuf:"bytes,2,opt,name=lct_id,json=lctId,proto3" json:"lct_id,omitempty"`
	Reason        string `protobuf:"bytes,3,opt,name=reason,proto3" json:"reason,omitempty"`
	NotifyOffline bool   `protobuf:"varint,4,opt,name=notify_offline,json=notifyOffline,proto3" json:"notify_offline,omitempty"`
}

func (m *MsgRevokePairing) Reset()         { *m = MsgRevokePairing{} }
func (m *MsgRevokePairing) String() string { return proto.CompactTextString(m) }
func (*MsgRevokePairing) ProtoMessage()    {}
func (*MsgRevokePairing) Descriptor() ([]byte, []int) {
	return fileDescriptor_81d7d37064c45cab, []int{6}
}
func (m *MsgRevokePairing) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgRevokePairing) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgRevokePairing.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgRevokePairing) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgRevokePairing.Merge(m, src)
}
func (m *MsgRevokePairing) XXX_Size() int {
	return m.Size()
}
func (m *MsgRevokePairing) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgRevokePairing.DiscardUnknown(m)
}

var xxx_messageInfo_MsgRevokePairing proto.InternalMessageInfo

func (m *MsgRevokePairing) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgRevokePairing) GetLctId() string {
	if m != nil {
		return m.LctId
	}
	return ""
}

func (m *MsgRevokePairing) GetReason() string {
	if m != nil {
		return m.Reason
	}
	return ""
}

func (m *MsgRevokePairing) GetNotifyOffline() bool {
	if m != nil {
		return m.NotifyOffline
	}
	return false
}

// MsgRevokePairingResponse defines the MsgRevokePairingResponse message.
type MsgRevokePairingResponse struct {
}

func (m *MsgRevokePairingResponse) Reset()         { *m = MsgRevokePairingResponse{} }
func (m *MsgRevokePairingResponse) String() string { return proto.CompactTextString(m) }
func (*MsgRevokePairingResponse) ProtoMessage()    {}
func (*MsgRevokePairingResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_81d7d37064c45cab, []int{7}
}
func (m *MsgRevokePairingResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgRevokePairingResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgRevokePairingResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgRevokePairingResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgRevokePairingResponse.Merge(m, src)
}
func (m *MsgRevokePairingResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgRevokePairingResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgRevokePairingResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgRevokePairingResponse proto.InternalMessageInfo

func init() {
	proto.RegisterType((*MsgUpdateParams)(nil), "racecarweb.pairing.v1.MsgUpdateParams")
	proto.RegisterType((*MsgUpdateParamsResponse)(nil), "racecarweb.pairing.v1.MsgUpdateParamsResponse")
	proto.RegisterType((*MsgInitiateBidirectionalPairing)(nil), "racecarweb.pairing.v1.MsgInitiateBidirectionalPairing")
	proto.RegisterType((*MsgInitiateBidirectionalPairingResponse)(nil), "racecarweb.pairing.v1.MsgInitiateBidirectionalPairingResponse")
	proto.RegisterType((*MsgCompletePairing)(nil), "racecarweb.pairing.v1.MsgCompletePairing")
	proto.RegisterType((*MsgCompletePairingResponse)(nil), "racecarweb.pairing.v1.MsgCompletePairingResponse")
	proto.RegisterType((*MsgRevokePairing)(nil), "racecarweb.pairing.v1.MsgRevokePairing")
	proto.RegisterType((*MsgRevokePairingResponse)(nil), "racecarweb.pairing.v1.MsgRevokePairingResponse")
}

func init() { proto.RegisterFile("racecarweb/pairing/v1/tx.proto", fileDescriptor_81d7d37064c45cab) }

var fileDescriptor_81d7d37064c45cab = []byte{
	// 793 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x55, 0xcf, 0x4f, 0xe3, 0x46,
	0x14, 0x8e, 0xf9, 0x11, 0xc8, 0x10, 0x12, 0x3a, 0x85, 0x62, 0xdc, 0x36, 0x40, 0xfa, 0x23, 0x29,
	0x12, 0xb1, 0xa0, 0x2a, 0x95, 0x38, 0x54, 0x25, 0x9c, 0xa2, 0x2a, 0x2a, 0x32, 0xea, 0xa5, 0x17,
	0x6b, 0x62, 0x4f, 0x8c, 0x45, 0xec, 0x71, 0x67, 0x26, 0x34, 0x51, 0x2f, 0xd5, 0x1e, 0xf7, 0xb4,
	0x27, 0x0e, 0xfb, 0x17, 0xac, 0xf6, 0xc4, 0x61, 0xff, 0x84, 0x3d, 0x70, 0x44, 0x7b, 0xda, 0xd3,
	0x6a, 0x05, 0x07, 0xb4, 0xff, 0xc0, 0x9e, 0x57, 0x9e, 0xb1, 0x9d, 0xc4, 0x10, 0x40, 0xec, 0x25,
	0xca, 0xfb, 0xde, 0x37, 0x6f, 0xde, 0xf7, 0xbd, 0xf1, 0x0c, 0x28, 0x51, 0x64, 0x61, 0x0b, 0xd1,
	0x7f, 0x71, 0x4b, 0x0f, 0x90, 0x4b, 0x5d, 0xdf, 0xd1, 0x4f, 0xb6, 0x74, 0xde, 0xab, 0x05, 0x94,
	0x70, 0x02, 0x97, 0x06, 0xf9, 0x5a, 0x94, 0xaf, 0x9d, 0x6c, 0x69, 0x5f, 0x20, 0xcf, 0xf5, 0x89,
	0x2e, 0x7e, 0x25, 0x53, 0x5b, 0xb6, 0x08, 0xf3, 0x08, 0xd3, 0x3d, 0x26, 0x2a, 0x78, 0xcc, 0x89,
	0x12, 0x2b, 0x32, 0x61, 0x8a, 0x48, 0x97, 0x41, 0x94, 0x5a, 0x74, 0x88, 0x43, 0x24, 0x1e, 0xfe,
	0x8b, 0xd0, 0xf2, 0xed, 0x3d, 0x05, 0x88, 0x22, 0x2f, 0x5a, 0x59, 0x7e, 0xad, 0x80, 0x62, 0x93,
	0x39, 0x7f, 0x05, 0x36, 0xe2, 0xf8, 0x40, 0x64, 0xe0, 0x0e, 0xc8, 0xa1, 0x2e, 0x3f, 0x22, 0xd4,
	0xe5, 0x7d, 0x55, 0x59, 0x53, 0xaa, 0xb9, 0xba, 0xfa, 0xe6, 0xd5, 0xe6, 0x62, 0xb4, 0xe5, 0x9e,
	0x6d, 0x53, 0xcc, 0xd8, 0x21, 0x0f, 0x0b, 0x1a, 0x03, 0x2a, 0xfc, 0x1d, 0x64, 0x65, 0x6d, 0x75,
	0x62, 0x4d, 0xa9, 0xce, 0x6d, 0x7f, 0x5b, 0xbb, 0x55, 0x74, 0x4d, 0x6e, 0x53, 0xcf, 0x9d, 0xbf,
	0x5b, 0xcd, 0xbc, 0xb8, 0x3e, 0xdb, 0x50, 0x8c, 0x68, 0xdd, 0xee, 0xaf, 0x4f, 0xae, 0xcf, 0x36,
	0x06, 0x15, 0x9f, 0x5e, 0x9f, 0x6d, 0x7c, 0x3f, 0x24, 0xa2, 0x97, 0xc8, 0x48, 0xb5, 0x5c, 0x5e,
	0x01, 0xcb, 0x29, 0xc8, 0xc0, 0x2c, 0x20, 0x3e, 0xc3, 0xe5, 0xe7, 0x13, 0x60, 0xb5, 0xc9, 0x9c,
	0x86, 0xef, 0x72, 0x17, 0x71, 0x5c, 0x77, 0x6d, 0x97, 0x62, 0x8b, 0xbb, 0xc4, 0x47, 0x9d, 0x03,
	0x59, 0x0e, 0x6e, 0x83, 0x19, 0x8b, 0x62, 0xc4, 0x09, 0xbd, 0x57, 0x6f, 0x4c, 0x84, 0xab, 0x60,
	0xce, 0x22, 0x5e, 0x40, 0x7c, 0xec, 0x73, 0x13, 0x09, 0xc9, 0x39, 0x03, 0x24, 0xd0, 0xde, 0x28,
	0xa1, 0xa5, 0x4e, 0xa6, 0x08, 0x75, 0xa8, 0x83, 0x2f, 0x49, 0x80, 0x29, 0x92, 0xbd, 0x98, 0x16,
	0xf1, 0x39, 0xee, 0x71, 0x75, 0x4a, 0x10, 0xe1, 0x50, 0x6a, 0x5f, 0x66, 0xe0, 0x0a, 0x98, 0x0d,
	0x28, 0xe9, 0xf5, 0x4d, 0xd7, 0x56, 0xa7, 0x05, 0x6b, 0x46, 0xc4, 0x0d, 0x1b, 0x56, 0x40, 0xb1,
	0x4d, 0xa8, 0x85, 0x4d, 0xd7, 0xf3, 0xb0, 0x1d, 0x0a, 0x55, 0xb3, 0x6b, 0x4a, 0x75, 0xd6, 0x28,
	0x08, 0xb8, 0x11, 0xa3, 0xbb, 0xf9, 0xd0, 0xe2, 0x58, 0x44, 0xf9, 0x54, 0x01, 0x95, 0x7b, 0xcc,
	0x89, 0x8d, 0x84, 0xeb, 0x20, 0x6f, 0x1d, 0xa1, 0x4e, 0x07, 0xfb, 0x0e, 0x0e, 0x3b, 0x10, 0x4e,
	0x19, 0x73, 0x09, 0xd6, 0xb0, 0xe1, 0x12, 0xc8, 0x76, 0x2c, 0x1e, 0x26, 0xa5, 0x1d, 0xd3, 0x1d,
	0x8b, 0x37, 0x6c, 0xf8, 0x15, 0xc8, 0x32, 0x8e, 0x78, 0x97, 0x45, 0x26, 0x44, 0x51, 0xa8, 0xe7,
	0x9f, 0x2e, 0xee, 0x8a, 0x6a, 0x52, 0xf5, 0x8c, 0x88, 0x1b, 0x76, 0xf9, 0xa3, 0x02, 0x60, 0x93,
	0x39, 0xfb, 0xc4, 0x0b, 0x3a, 0x38, 0x9c, 0xe9, 0xe3, 0x07, 0x95, 0xee, 0x7b, 0xe2, 0x66, 0xdf,
	0x55, 0xb0, 0x30, 0x34, 0x4b, 0x33, 0x3c, 0x80, 0x51, 0xab, 0x85, 0xc1, 0x40, 0xf7, 0xba, 0xfc,
	0x68, 0x94, 0xd9, 0x92, 0xcc, 0xa9, 0x14, 0xb3, 0x2e, 0x98, 0x15, 0x50, 0x64, 0x98, 0x31, 0x97,
	0xf8, 0xc9, 0x64, 0xe5, 0xcc, 0x0a, 0x11, 0x1c, 0x4d, 0x35, 0x35, 0x91, 0xff, 0x80, 0x76, 0x53,
	0x77, 0x32, 0x83, 0x81, 0xc1, 0xca, 0xb0, 0xc1, 0xeb, 0x20, 0x1f, 0xef, 0x75, 0x8c, 0xfb, 0x2c,
	0x96, 0x18, 0x61, 0x7f, 0xe0, 0x3e, 0x83, 0xdf, 0x81, 0x79, 0x4e, 0xbb, 0x8c, 0x9b, 0xac, 0xeb,
	0x79, 0x88, 0xf6, 0x23, 0x7d, 0x79, 0x01, 0x1e, 0x4a, 0xac, 0xfc, 0x52, 0x01, 0x0b, 0x4d, 0xe6,
	0x18, 0xf8, 0x84, 0x1c, 0x7f, 0x96, 0xe7, 0xe3, 0x0f, 0x02, 0xc5, 0x88, 0x11, 0x3f, 0x3e, 0x08,
	0x32, 0x82, 0x3f, 0x80, 0x82, 0x4f, 0xb8, 0xdb, 0xee, 0x9b, 0xa4, 0xdd, 0xee, 0xb8, 0x3e, 0x16,
	0x9e, 0xce, 0x1a, 0xf3, 0x12, 0xfd, 0x53, 0x82, 0x29, 0xa7, 0x34, 0xa0, 0xa6, 0x7b, 0x8d, 0x7d,
	0xda, 0xfe, 0x30, 0x09, 0x26, 0x9b, 0xcc, 0x81, 0x6d, 0x90, 0x1f, 0xb9, 0xda, 0x7e, 0x1c, 0x73,
	0x25, 0xa5, 0x2e, 0x0f, 0xad, 0xf6, 0x30, 0x5e, 0x32, 0x97, 0x53, 0x05, 0x7c, 0x73, 0xe7, 0x0d,
	0xb3, 0x33, 0xbe, 0xe0, 0x5d, 0xeb, 0xb4, 0xdf, 0x1e, 0xb7, 0x2e, 0x69, 0x8c, 0x80, 0x62, 0xfa,
	0x1b, 0xfa, 0x69, 0x7c, 0xc9, 0x14, 0x55, 0xdb, 0x7a, 0x30, 0x35, 0xd9, 0xd0, 0x05, 0xf3, 0xa3,
	0xc7, 0xa7, 0x32, 0xbe, 0xc6, 0x08, 0x51, 0xd3, 0x1f, 0x48, 0x8c, 0xb7, 0xd2, 0xa6, 0xff, 0x0f,
	0x1f, 0x8f, 0xfa, 0x2f, 0xe7, 0x97, 0x25, 0xe5, 0xe2, 0xb2, 0xa4, 0xbc, 0xbf, 0x2c, 0x29, 0xcf,
	0xae, 0x4a, 0x99, 0x8b, 0xab, 0x52, 0xe6, 0xed, 0x55, 0x29, 0xf3, 0xf7, 0xd7, 0x51, 0xc1, 0xcd,
	0xd1, 0xc7, 0x83, 0xf7, 0x03, 0xcc, 0x5a, 0x59, 0xf1, 0x00, 0xfe, 0xfc, 0x29, 0x00, 0x00, 0xff,
	0xff, 0x07, 0xb3, 0xf8, 0x48, 0xba, 0x07, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MsgClient is the client API for Msg service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MsgClient interface {
	// UpdateParams defines a (governance) operation for updating the module
	// parameters. The authority defaults to the x/gov module account.
	UpdateParams(ctx context.Context, in *MsgUpdateParams, opts ...grpc.CallOption) (*MsgUpdateParamsResponse, error)
	// InitiateBidirectionalPairing defines the InitiateBidirectionalPairing RPC.
	InitiateBidirectionalPairing(ctx context.Context, in *MsgInitiateBidirectionalPairing, opts ...grpc.CallOption) (*MsgInitiateBidirectionalPairingResponse, error)
	// CompletePairing defines the CompletePairing RPC.
	CompletePairing(ctx context.Context, in *MsgCompletePairing, opts ...grpc.CallOption) (*MsgCompletePairingResponse, error)
	// RevokePairing defines the RevokePairing RPC.
	RevokePairing(ctx context.Context, in *MsgRevokePairing, opts ...grpc.CallOption) (*MsgRevokePairingResponse, error)
}

type msgClient struct {
	cc grpc1.ClientConn
}

func NewMsgClient(cc grpc1.ClientConn) MsgClient {
	return &msgClient{cc}
}

func (c *msgClient) UpdateParams(ctx context.Context, in *MsgUpdateParams, opts ...grpc.CallOption) (*MsgUpdateParamsResponse, error) {
	out := new(MsgUpdateParamsResponse)
	err := c.cc.Invoke(ctx, "/racecarweb.pairing.v1.Msg/UpdateParams", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) InitiateBidirectionalPairing(ctx context.Context, in *MsgInitiateBidirectionalPairing, opts ...grpc.CallOption) (*MsgInitiateBidirectionalPairingResponse, error) {
	out := new(MsgInitiateBidirectionalPairingResponse)
	err := c.cc.Invoke(ctx, "/racecarweb.pairing.v1.Msg/InitiateBidirectionalPairing", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) CompletePairing(ctx context.Context, in *MsgCompletePairing, opts ...grpc.CallOption) (*MsgCompletePairingResponse, error) {
	out := new(MsgCompletePairingResponse)
	err := c.cc.Invoke(ctx, "/racecarweb.pairing.v1.Msg/CompletePairing", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) RevokePairing(ctx context.Context, in *MsgRevokePairing, opts ...grpc.CallOption) (*MsgRevokePairingResponse, error) {
	out := new(MsgRevokePairingResponse)
	err := c.cc.Invoke(ctx, "/racecarweb.pairing.v1.Msg/RevokePairing", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MsgServer is the server API for Msg service.
type MsgServer interface {
	// UpdateParams defines a (governance) operation for updating the module
	// parameters. The authority defaults to the x/gov module account.
	UpdateParams(context.Context, *MsgUpdateParams) (*MsgUpdateParamsResponse, error)
	// InitiateBidirectionalPairing defines the InitiateBidirectionalPairing RPC.
	InitiateBidirectionalPairing(context.Context, *MsgInitiateBidirectionalPairing) (*MsgInitiateBidirectionalPairingResponse, error)
	// CompletePairing defines the CompletePairing RPC.
	CompletePairing(context.Context, *MsgCompletePairing) (*MsgCompletePairingResponse, error)
	// RevokePairing defines the RevokePairing RPC.
	RevokePairing(context.Context, *MsgRevokePairing) (*MsgRevokePairingResponse, error)
}

// UnimplementedMsgServer can be embedded to have forward compatible implementations.
type UnimplementedMsgServer struct {
}

func (*UnimplementedMsgServer) UpdateParams(ctx context.Context, req *MsgUpdateParams) (*MsgUpdateParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateParams not implemented")
}
func (*UnimplementedMsgServer) InitiateBidirectionalPairing(ctx context.Context, req *MsgInitiateBidirectionalPairing) (*MsgInitiateBidirectionalPairingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InitiateBidirectionalPairing not implemented")
}
func (*UnimplementedMsgServer) CompletePairing(ctx context.Context, req *MsgCompletePairing) (*MsgCompletePairingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CompletePairing not implemented")
}
func (*UnimplementedMsgServer) RevokePairing(ctx context.Context, req *MsgRevokePairing) (*MsgRevokePairingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RevokePairing not implemented")
}

func RegisterMsgServer(s grpc1.Server, srv MsgServer) {
	s.RegisterService(&_Msg_serviceDesc, srv)
}

func _Msg_UpdateParams_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUpdateParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UpdateParams(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/racecarweb.pairing.v1.Msg/UpdateParams",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UpdateParams(ctx, req.(*MsgUpdateParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_InitiateBidirectionalPairing_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgInitiateBidirectionalPairing)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).InitiateBidirectionalPairing(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/racecarweb.pairing.v1.Msg/InitiateBidirectionalPairing",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).InitiateBidirectionalPairing(ctx, req.(*MsgInitiateBidirectionalPairing))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_CompletePairing_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgCompletePairing)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).CompletePairing(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/racecarweb.pairing.v1.Msg/CompletePairing",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).CompletePairing(ctx, req.(*MsgCompletePairing))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_RevokePairing_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgRevokePairing)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).RevokePairing(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/racecarweb.pairing.v1.Msg/RevokePairing",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).RevokePairing(ctx, req.(*MsgRevokePairing))
	}
	return interceptor(ctx, in, info, handler)
}

var Msg_serviceDesc = _Msg_serviceDesc
var _Msg_serviceDesc = grpc.ServiceDesc{
	ServiceName: "racecarweb.pairing.v1.Msg",
	HandlerType: (*MsgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UpdateParams",
			Handler:    _Msg_UpdateParams_Handler,
		},
		{
			MethodName: "InitiateBidirectionalPairing",
			Handler:    _Msg_InitiateBidirectionalPairing_Handler,
		},
		{
			MethodName: "CompletePairing",
			Handler:    _Msg_CompletePairing_Handler,
		},
		{
			MethodName: "RevokePairing",
			Handler:    _Msg_RevokePairing_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "racecarweb/pairing/v1/tx.proto",
}

func (m *MsgUpdateParams) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateParams) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateParams) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.Authority) > 0 {
		i -= len(m.Authority)
		copy(dAtA[i:], m.Authority)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Authority)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgUpdateParamsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateParamsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateParamsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgInitiateBidirectionalPairing) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgInitiateBidirectionalPairing) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgInitiateBidirectionalPairing) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ForceImmediate {
		i--
		if m.ForceImmediate {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x30
	}
	if len(m.ProxyId) > 0 {
		i -= len(m.ProxyId)
		copy(dAtA[i:], m.ProxyId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ProxyId)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.OperationalContext) > 0 {
		i -= len(m.OperationalContext)
		copy(dAtA[i:], m.OperationalContext)
		i = encodeVarintTx(dAtA, i, uint64(len(m.OperationalContext)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.ComponentB) > 0 {
		i -= len(m.ComponentB)
		copy(dAtA[i:], m.ComponentB)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ComponentB)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ComponentA) > 0 {
		i -= len(m.ComponentA)
		copy(dAtA[i:], m.ComponentA)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ComponentA)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgInitiateBidirectionalPairingResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgInitiateBidirectionalPairingResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgInitiateBidirectionalPairingResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.QueueId) > 0 {
		i -= len(m.QueueId)
		copy(dAtA[i:], m.QueueId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.QueueId)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Status) > 0 {
		i -= len(m.Status)
		copy(dAtA[i:], m.Status)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Status)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.LctId) > 0 {
		i -= len(m.LctId)
		copy(dAtA[i:], m.LctId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.LctId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ChallengeId) > 0 {
		i -= len(m.ChallengeId)
		copy(dAtA[i:], m.ChallengeId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ChallengeId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgCompletePairing) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCompletePairing) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCompletePairing) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.SessionContext) > 0 {
		i -= len(m.SessionContext)
		copy(dAtA[i:], m.SessionContext)
		i = encodeVarintTx(dAtA, i, uint64(len(m.SessionContext)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.ComponentBAuth) > 0 {
		i -= len(m.ComponentBAuth)
		copy(dAtA[i:], m.ComponentBAuth)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ComponentBAuth)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.ComponentAAuth) > 0 {
		i -= len(m.ComponentAAuth)
		copy(dAtA[i:], m.ComponentAAuth)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ComponentAAuth)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ChallengeId) > 0 {
		i -= len(m.ChallengeId)
		copy(dAtA[i:], m.ChallengeId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ChallengeId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgCompletePairingResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCompletePairingResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCompletePairingResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.TrustSummary) > 0 {
		i -= len(m.TrustSummary)
		copy(dAtA[i:], m.TrustSummary)
		i = encodeVarintTx(dAtA, i, uint64(len(m.TrustSummary)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.SessionKeys) > 0 {
		i -= len(m.SessionKeys)
		copy(dAtA[i:], m.SessionKeys)
		i = encodeVarintTx(dAtA, i, uint64(len(m.SessionKeys)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.LctId) > 0 {
		i -= len(m.LctId)
		copy(dAtA[i:], m.LctId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.LctId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgRevokePairing) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgRevokePairing) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgRevokePairing) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.NotifyOffline {
		i--
		if m.NotifyOffline {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x20
	}
	if len(m.Reason) > 0 {
		i -= len(m.Reason)
		copy(dAtA[i:], m.Reason)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Reason)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.LctId) > 0 {
		i -= len(m.LctId)
		copy(dAtA[i:], m.LctId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.LctId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgRevokePairingResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgRevokePairingResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgRevokePairingResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func encodeVarintTx(dAtA []byte, offset int, v uint64) int {
	offset -= sovTx(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MsgUpdateParams) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Authority)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = m.Params.Size()
	n += 1 + l + sovTx(uint64(l))
	return n
}

func (m *MsgUpdateParamsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgInitiateBidirectionalPairing) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.ComponentA)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.ComponentB)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.OperationalContext)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.ProxyId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.ForceImmediate {
		n += 2
	}
	return n
}

func (m *MsgInitiateBidirectionalPairingResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ChallengeId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.LctId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Status)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.QueueId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgCompletePairing) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.ChallengeId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.ComponentAAuth)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.ComponentBAuth)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.SessionContext)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgCompletePairingResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.LctId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.SessionKeys)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.TrustSummary)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgRevokePairing) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.LctId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Reason)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.NotifyOffline {
		n += 2
	}
	return n
}

func (m *MsgRevokePairingResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func sovTx(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTx(x uint64) (n int) {
	return sovTx(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MsgUpdateParams) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateParams: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateParams: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Authority", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Authority = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateParamsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateParamsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateParamsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgInitiateBidirectionalPairing) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgInitiateBidirectionalPairing: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgInitiateBidirectionalPairing: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ComponentA", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ComponentA = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ComponentB", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ComponentB = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OperationalContext", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OperationalContext = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProxyId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProxyId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ForceImmediate", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ForceImmediate = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgInitiateBidirectionalPairingResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgInitiateBidirectionalPairingResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgInitiateBidirectionalPairingResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChallengeId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChallengeId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LctId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LctId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Status = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field QueueId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.QueueId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgCompletePairing) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCompletePairing: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCompletePairing: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChallengeId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChallengeId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ComponentAAuth", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ComponentAAuth = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ComponentBAuth", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ComponentBAuth = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SessionContext", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SessionContext = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgCompletePairingResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCompletePairingResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCompletePairingResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LctId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LctId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SessionKeys", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SessionKeys = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TrustSummary", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TrustSummary = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgRevokePairing) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgRevokePairing: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgRevokePairing: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LctId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LctId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reason", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Reason = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NotifyOffline", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.NotifyOffline = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgRevokePairingResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgRevokePairingResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgRevokePairingResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTx(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTx
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTx
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTx
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTx
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTx        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTx          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTx = fmt.Errorf("proto: unexpected end of group")
)
