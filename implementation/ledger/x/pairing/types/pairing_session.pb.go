// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: racecarweb/pairing/v1/pairing_session.proto

package types

import (
	fmt "fmt"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// PairingSession defines the PairingSession message.
type PairingSession struct {
	SessionId     string `protobuf:"bytes,1,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	LctId         string `protobuf:"bytes,2,opt,name=lct_id,json=lctId,proto3" json:"lct_id,omitempty"`
	SessionKeys   string `protobuf:"bytes,3,opt,name=session_keys,json=sessionKeys,proto3" json:"session_keys,omitempty"`
	EstablishedAt int64  `protobuf:"varint,4,opt,name=established_at,json=establishedAt,proto3" json:"established_at,omitempty"`
	ExpiresAt     int64  `protobuf:"varint,5,opt,name=expires_at,json=expiresAt,proto3" json:"expires_at,omitempty"`
	Status        string `protobuf:"bytes,6,opt,name=status,proto3" json:"status,omitempty"`
}

func (m *PairingSession) Reset()         { *m = PairingSession{} }
func (m *PairingSession) String() string { return proto.CompactTextString(m) }
func (*PairingSession) ProtoMessage()    {}
func (*PairingSession) Descriptor() ([]byte, []int) {
	return fileDescriptor_909e36bd2b2d270a, []int{0}
}
func (m *PairingSession) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PairingSession) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PairingSession.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PairingSession) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PairingSession.Merge(m, src)
}
func (m *PairingSession) XXX_Size() int {
	return m.Size()
}
func (m *PairingSession) XXX_DiscardUnknown() {
	xxx_messageInfo_PairingSession.DiscardUnknown(m)
}

var xxx_messageInfo_PairingSession proto.InternalMessageInfo

func (m *PairingSession) GetSessionId() string {
	if m != nil {
		return m.SessionId
	}
	return ""
}

func (m *PairingSession) GetLctId() string {
	if m != nil {
		return m.LctId
	}
	return ""
}

func (m *PairingSession) GetSessionKeys() string {
	if m != nil {
		return m.SessionKeys
	}
	return ""
}

func (m *PairingSession) GetEstablishedAt() int64 {
	if m != nil {
		return m.EstablishedAt
	}
	return 0
}

func (m *PairingSession) GetExpiresAt() int64 {
	if m != nil {
		return m.ExpiresAt
	}
	return 0
}

func (m *PairingSession) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

func init() {
	proto.RegisterType((*PairingSession)(nil), "racecarweb.pairing.v1.PairingSession")
}

func init() {
	proto.RegisterFile("racecarweb/pairing/v1/pairing_session.proto", fileDescriptor_909e36bd2b2d270a)
}

var fileDescriptor_909e36bd2b2d270a = []byte{
	// 257 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xd2, 0x2e, 0x4a, 0x4c, 0x4e,
	0x4d, 0x4e, 0x2c, 0x2a, 0x4f, 0x4d, 0xd2, 0x2f, 0x48, 0xcc, 0x2c, 0xca, 0xcc, 0x4b, 0xd7, 0x2f,
	0x33, 0x84, 0x31, 0xe3, 0x8b, 0x53, 0x8b, 0x8b, 0x33, 0xf3, 0xf3, 0xf4, 0x0a, 0x8a, 0xf2, 0x4b,
	0xf2, 0x85, 0x44, 0x11, 0x8a, 0xf5, 0xa0, 0x2a, 0xf4, 0xca, 0x0c, 0x95, 0x8e, 0x33, 0x72, 0xf1,
	0x05, 0x40, 0xb8, 0xc1, 0x10, 0xf5, 0x42, 0xb2, 0x5c, 0x5c, 0x50, 0xad, 0xf1, 0x99, 0x29, 0x12,
	0x8c, 0x0a, 0x8c, 0x1a, 0x9c, 0x41, 0x9c, 0x50, 0x11, 0xcf, 0x14, 0x21, 0x51, 0x2e, 0xb6, 0x9c,
	0xe4, 0x12, 0x90, 0x14, 0x13, 0x58, 0x8a, 0x35, 0x27, 0xb9, 0xc4, 0x33, 0x45, 0x48, 0x91, 0x8b,
	0x07, 0xa6, 0x2b, 0x3b, 0xb5, 0xb2, 0x58, 0x82, 0x19, 0x2c, 0xc9, 0x0d, 0x15, 0xf3, 0x4e, 0xad,
	0x2c, 0x16, 0x52, 0xe5, 0xe2, 0x4b, 0x2d, 0x2e, 0x49, 0x4c, 0xca, 0xc9, 0x2c, 0xce, 0x48, 0x4d,
	0x89, 0x4f, 0x2c, 0x91, 0x60, 0x51, 0x60, 0xd4, 0x60, 0x0e, 0xe2, 0x45, 0x12, 0x75, 0x2c, 0x01,
	0xd9, 0x9f, 0x5a, 0x51, 0x90, 0x59, 0x94, 0x5a, 0x0c, 0x52, 0xc2, 0x0a, 0x56, 0xc2, 0x09, 0x15,
	0x71, 0x2c, 0x11, 0x12, 0xe3, 0x62, 0x2b, 0x2e, 0x49, 0x2c, 0x29, 0x2d, 0x96, 0x60, 0x03, 0x5b,
	0x01, 0xe5, 0x39, 0x99, 0x9e, 0x78, 0x24, 0xc7, 0x78, 0xe1, 0x91, 0x1c, 0xe3, 0x83, 0x47, 0x72,
	0x8c, 0x13, 0x1e, 0xcb, 0x31, 0x5c, 0x78, 0x2c, 0xc7, 0x70, 0xe3, 0xb1, 0x1c, 0x43, 0x94, 0x34,
	0xd4, 0xeb, 0xba, 0xa0, 0x80, 0xaa, 0x80, 0x07, 0x55, 0x49, 0x65, 0x41, 0x6a, 0x71, 0x12, 0x1b,
	0x38, 0x78, 0x8c, 0x01, 0x01, 0x00, 0x00, 0xff, 0xff, 0xfa, 0x37, 0x89, 0x11, 0x4d, 0x01, 0x00,
	0x00,
}

func (m *PairingSession) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PairingSession) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PairingSession) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Status) > 0 {
		i -= len(m.Status)
		copy(dAtA[i:], m.Status)
		i = encodeVarintPairingSession(dAtA, i, uint64(len(m.Status)))
		i--
		dAtA[i] = 0x32
	}
	if m.ExpiresAt != 0 {
		i = encodeVarintPairingSession(dAtA, i, uint64(m.ExpiresAt))
		i--
		dAtA[i] = 0x28
	}
	if m.EstablishedAt != 0 {
		i = encodeVarintPairingSession(dAtA, i, uint64(m.EstablishedAt))
		i--
		dAtA[i] = 0x20
	}
	if len(m.SessionKeys) > 0 {
		i -= len(m.SessionKeys)
		copy(dAtA[i:], m.SessionKeys)
		i = encodeVarintPairingSession(dAtA, i, uint64(len(m.SessionKeys)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.LctId) > 0 {
		i -= len(m.LctId)
		copy(dAtA[i:], m.LctId)
		i = encodeVarintPairingSession(dAtA, i, uint64(len(m.LctId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.SessionId) > 0 {
		i -= len(m.SessionId)
		copy(dAtA[i:], m.SessionId)
		i = encodeVarintPairingSession(dAtA, i, uint64(len(m.SessionId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintPairingSession(dAtA []byte, offset int, v uint64) int {
	offset -= sovPairingSession(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *PairingSession) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.SessionId)
	if l > 0 {
		n += 1 + l + sovPairingSession(uint64(l))
	}
	l = len(m.LctId)
	if l > 0 {
		n += 1 + l + sovPairingSession(uint64(l))
	}
	l = len(m.SessionKeys)
	if l > 0 {
		n += 1 + l + sovPairingSession(uint64(l))
	}
	if m.EstablishedAt != 0 {
		n += 1 + sovPairingSession(uint64(m.EstablishedAt))
	}
	if m.ExpiresAt != 0 {
		n += 1 + sovPairingSession(uint64(m.ExpiresAt))
	}
	l = len(m.Status)
	if l > 0 {
		n += 1 + l + sovPairingSession(uint64(l))
	}
	return n
}

func sovPairingSession(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozPairingSession(x uint64) (n int) {
	return sovPairingSession(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *PairingSession) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPairingSession
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PairingSession: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PairingSession: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SessionId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPairingSession
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPairingSession
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPairingSession
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SessionId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LctId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPairingSession
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPairingSession
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPairingSession
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LctId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SessionKeys", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPairingSession
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPairingSession
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPairingSession
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SessionKeys = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EstablishedAt", wireType)
			}
			m.EstablishedAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPairingSession
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EstablishedAt |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExpiresAt", wireType)
			}
			m.ExpiresAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPairingSession
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ExpiresAt |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPairingSession
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPairingSession
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPairingSession
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Status = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPairingSession(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPairingSession
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipPairingSession(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowPairingSession
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPairingSession
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPairingSession
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthPairingSession
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupPairingSession
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthPairingSession
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthPairingSession        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowPairingSession          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupPairingSession = fmt.Errorf("proto: unexpected end of group")
)
