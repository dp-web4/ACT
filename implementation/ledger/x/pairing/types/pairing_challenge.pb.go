// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: racecarweb/pairing/v1/pairing_challenge.proto

package types

import (
	fmt "fmt"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// PairingChallenge defines the PairingChallenge message.
type PairingChallenge struct {
	ChallengeId        string `protobuf:"bytes,1,opt,name=challenge_id,json=challengeId,proto3" json:"challenge_id,omitempty"`
	RequesterComponent string `protobuf:"bytes,2,opt,name=requester_component,json=requesterComponent,proto3" json:"requester_component,omitempty"`
	TargetComponent    string `protobuf:"bytes,3,opt,name=target_component,json=targetComponent,proto3" json:"target_component,omitempty"`
	ChallengeData      string `protobuf:"bytes,4,opt,name=challenge_data,json=challengeData,proto3" json:"challenge_data,omitempty"`
	ResponseData       string `protobuf:"bytes,5,opt,name=response_data,json=responseData,proto3" json:"response_data,omitempty"`
	ExpiresAt          int64  `protobuf:"varint,6,opt,name=expires_at,json=expiresAt,proto3" json:"expires_at,omitempty"`
	Status             string `protobuf:"bytes,7,opt,name=status,proto3" json:"status,omitempty"`
	ProxyComponent     string `protobuf:"bytes,8,opt,name=proxy_component,json=proxyComponent,proto3" json:"proxy_component,omitempty"`
}

func (m *PairingChallenge) Reset()         { *m = PairingChallenge{} }
func (m *PairingChallenge) String() string { return proto.CompactTextString(m) }
func (*PairingChallenge) ProtoMessage()    {}
func (*PairingChallenge) Descriptor() ([]byte, []int) {
	return fileDescriptor_dbb250d721894eca, []int{0}
}
func (m *PairingChallenge) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PairingChallenge) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PairingChallenge.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PairingChallenge) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PairingChallenge.Merge(m, src)
}
func (m *PairingChallenge) XXX_Size() int {
	return m.Size()
}
func (m *PairingChallenge) XXX_DiscardUnknown() {
	xxx_messageInfo_PairingChallenge.DiscardUnknown(m)
}

var xxx_messageInfo_PairingChallenge proto.InternalMessageInfo

func (m *PairingChallenge) GetChallengeId() string {
	if m != nil {
		return m.ChallengeId
	}
	return ""
}

func (m *PairingChallenge) GetRequesterComponent() string {
	if m != nil {
		return m.RequesterComponent
	}
	return ""
}

func (m *PairingChallenge) GetTargetComponent() string {
	if m != nil {
		return m.TargetComponent
	}
	return ""
}

func (m *PairingChallenge) GetChallengeData() string {
	if m != nil {
		return m.ChallengeData
	}
	return ""
}

func (m *PairingChallenge) GetResponseData() string {
	if m != nil {
		return m.ResponseData
	}
	return ""
}

func (m *PairingChallenge) GetExpiresAt() int64 {
	if m != nil {
		return m.ExpiresAt
	}
	return 0
}

func (m *PairingChallenge) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

func (m *PairingChallenge) GetProxyComponent() string {
	if m != nil {
		return m.ProxyComponent
	}
	return ""
}

func init() {
	proto.RegisterType((*PairingChallenge)(nil), "racecarweb.pairing.v1.PairingChallenge")
}

func init() {
	proto.RegisterFile("racecarweb/pairing/v1/pairing_challenge.proto", fileDescriptor_dbb250d721894eca)
}

var fileDescriptor_dbb250d721894eca = []byte{
	// 304 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x4c, 0x91, 0xcd, 0x4e, 0xf2, 0x40,
	0x14, 0x86, 0x19, 0xf8, 0x3e, 0x94, 0x91, 0xbf, 0x8c, 0xd1, 0x34, 0x31, 0x4e, 0x50, 0x63, 0xc4,
	0x05, 0x10, 0x62, 0xbc, 0x00, 0xc5, 0x8d, 0x3b, 0xc3, 0xd2, 0x4d, 0x33, 0x94, 0x93, 0xda, 0x04,
	0x3b, 0xe3, 0xcc, 0x01, 0xcb, 0x5d, 0x78, 0x43, 0xee, 0x5d, 0xb2, 0x74, 0x69, 0xda, 0x1b, 0x31,
	0x0e, 0xed, 0x94, 0x5d, 0xcf, 0x73, 0x9e, 0x37, 0x3d, 0x99, 0x97, 0x0e, 0xb4, 0x08, 0x20, 0x10,
	0xfa, 0x1d, 0x66, 0x23, 0x25, 0x22, 0x1d, 0xc5, 0xe1, 0x68, 0x35, 0x2e, 0x3e, 0xfd, 0xe0, 0x45,
	0x2c, 0x16, 0x10, 0x87, 0x30, 0x54, 0x5a, 0xa2, 0x64, 0x47, 0xa5, 0x3e, 0xcc, 0x9d, 0xe1, 0x6a,
	0x7c, 0xfe, 0x59, 0xa5, 0xdd, 0xa7, 0xed, 0x38, 0x29, 0x12, 0xec, 0x8c, 0x36, 0x5d, 0xdc, 0x8f,
	0xe6, 0x1e, 0xe9, 0x91, 0x7e, 0x63, 0x7a, 0xe0, 0xd8, 0xe3, 0x9c, 0x8d, 0xe8, 0xa1, 0x86, 0xb7,
	0x25, 0x18, 0x04, 0xed, 0x07, 0xf2, 0x55, 0xc9, 0x18, 0x62, 0xf4, 0xaa, 0xd6, 0x64, 0x6e, 0x35,
	0x29, 0x36, 0xec, 0x9a, 0x76, 0x51, 0xe8, 0x10, 0x70, 0xc7, 0xae, 0x59, 0xbb, 0xb3, 0xe5, 0xa5,
	0x7a, 0x49, 0xdb, 0xe5, 0xef, 0xe7, 0x02, 0x85, 0xf7, 0xcf, 0x8a, 0x2d, 0x47, 0x1f, 0x04, 0x0a,
	0x76, 0x41, 0x5b, 0x1a, 0x8c, 0x92, 0xb1, 0xc9, 0xad, 0xff, 0xd6, 0x6a, 0x16, 0xd0, 0x4a, 0xa7,
	0x94, 0x42, 0xa2, 0x22, 0x0d, 0xc6, 0x17, 0xe8, 0xd5, 0x7b, 0xa4, 0x5f, 0x9b, 0x36, 0x72, 0x72,
	0x87, 0xec, 0x98, 0xd6, 0x0d, 0x0a, 0x5c, 0x1a, 0x6f, 0xcf, 0x86, 0xf3, 0x89, 0x5d, 0xd1, 0x8e,
	0xd2, 0x32, 0x59, 0xef, 0x1c, 0xbb, 0x6f, 0x85, 0xb6, 0xc5, 0xee, 0xd6, 0xfb, 0xdb, 0xaf, 0x94,
	0x93, 0x4d, 0xca, 0xc9, 0x4f, 0xca, 0xc9, 0x47, 0xc6, 0x2b, 0x9b, 0x8c, 0x57, 0xbe, 0x33, 0x5e,
	0x79, 0x3e, 0xc9, 0x1f, 0x7c, 0xf0, 0x57, 0x50, 0xe2, 0x2a, 0xc2, 0xb5, 0x02, 0x33, 0xab, 0xdb,
	0x52, 0x6e, 0x7e, 0x03, 0x00, 0x00, 0xff, 0xff, 0x52, 0xc3, 0xdc, 0x75, 0xc5, 0x01, 0x00, 0x00,
}

func (m *PairingChallenge) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PairingChallenge) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PairingChallenge) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ProxyComponent) > 0 {
		i -= len(m.ProxyComponent)
		copy(dAtA[i:], m.ProxyComponent)
		i = encodeVarintPairingChallenge(dAtA, i, uint64(len(m.ProxyComponent)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.Status) > 0 {
		i -= len(m.Status)
		copy(dAtA[i:], m.Status)
		i = encodeVarintPairingChallenge(dAtA, i, uint64(len(m.Status)))
		i--
		dAtA[i] = 0x3a
	}
	if m.ExpiresAt != 0 {
		i = encodeVarintPairingChallenge(dAtA, i, uint64(m.ExpiresAt))
		i--
		dAtA[i] = 0x30
	}
	if len(m.ResponseData) > 0 {
		i -= len(m.ResponseData)
		copy(dAtA[i:], m.ResponseData)
		i = encodeVarintPairingChallenge(dAtA, i, uint64(len(m.ResponseData)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.ChallengeData) > 0 {
		i -= len(m.ChallengeData)
		copy(dAtA[i:], m.ChallengeData)
		i = encodeVarintPairingChallenge(dAtA, i, uint64(len(m.ChallengeData)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.TargetComponent) > 0 {
		i -= len(m.TargetComponent)
		copy(dAtA[i:], m.TargetComponent)
		i = encodeVarintPairingChallenge(dAtA, i, uint64(len(m.TargetComponent)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.RequesterComponent) > 0 {
		i -= len(m.RequesterComponent)
		copy(dAtA[i:], m.RequesterComponent)
		i = encodeVarintPairingChallenge(dAtA, i, uint64(len(m.RequesterComponent)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ChallengeId) > 0 {
		i -= len(m.ChallengeId)
		copy(dAtA[i:], m.ChallengeId)
		i = encodeVarintPairingChallenge(dAtA, i, uint64(len(m.ChallengeId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintPairingChallenge(dAtA []byte, offset int, v uint64) int {
	offset -= sovPairingChallenge(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *PairingChallenge) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ChallengeId)
	if l > 0 {
		n += 1 + l + sovPairingChallenge(uint64(l))
	}
	l = len(m.RequesterComponent)
	if l > 0 {
		n += 1 + l + sovPairingChallenge(uint64(l))
	}
	l = len(m.TargetComponent)
	if l > 0 {
		n += 1 + l + sovPairingChallenge(uint64(l))
	}
	l = len(m.ChallengeData)
	if l > 0 {
		n += 1 + l + sovPairingChallenge(uint64(l))
	}
	l = len(m.ResponseData)
	if l > 0 {
		n += 1 + l + sovPairingChallenge(uint64(l))
	}
	if m.ExpiresAt != 0 {
		n += 1 + sovPairingChallenge(uint64(m.ExpiresAt))
	}
	l = len(m.Status)
	if l > 0 {
		n += 1 + l + sovPairingChallenge(uint64(l))
	}
	l = len(m.ProxyComponent)
	if l > 0 {
		n += 1 + l + sovPairingChallenge(uint64(l))
	}
	return n
}

func sovPairingChallenge(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozPairingChallenge(x uint64) (n int) {
	return sovPairingChallenge(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *PairingChallenge) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPairingChallenge
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PairingChallenge: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PairingChallenge: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChallengeId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPairingChallenge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPairingChallenge
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPairingChallenge
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChallengeId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequesterComponent", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPairingChallenge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPairingChallenge
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPairingChallenge
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RequesterComponent = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TargetComponent", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPairingChallenge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPairingChallenge
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPairingChallenge
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TargetComponent = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChallengeData", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPairingChallenge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPairingChallenge
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPairingChallenge
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChallengeData = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResponseData", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPairingChallenge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPairingChallenge
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPairingChallenge
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ResponseData = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExpiresAt", wireType)
			}
			m.ExpiresAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPairingChallenge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ExpiresAt |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPairingChallenge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPairingChallenge
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPairingChallenge
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Status = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProxyComponent", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPairingChallenge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPairingChallenge
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPairingChallenge
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProxyComponent = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPairingChallenge(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPairingChallenge
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipPairingChallenge(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowPairingChallenge
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPairingChallenge
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPairingChallenge
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthPairingChallenge
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupPairingChallenge
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthPairingChallenge
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthPairingChallenge        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowPairingChallenge          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupPairingChallenge = fmt.Errorf("proto: unexpected end of group")
)
