// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: racecarweb/pairingqueue/v1/pairing_request.proto

package types

import (
	fmt "fmt"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// PairingRequest defines the PairingRequest message.
type PairingRequest struct {
	RequestId     string `protobuf:"bytes,1,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
	InitiatorId   string `protobuf:"bytes,2,opt,name=initiator_id,json=initiatorId,proto3" json:"initiator_id,omitempty"`
	TargetId      string `protobuf:"bytes,3,opt,name=target_id,json=targetId,proto3" json:"target_id,omitempty"`
	RequestType   string `protobuf:"bytes,4,opt,name=request_type,json=requestType,proto3" json:"request_type,omitempty"`
	ProxyId       string `protobuf:"bytes,5,opt,name=proxy_id,json=proxyId,proto3" json:"proxy_id,omitempty"`
	Status        string `protobuf:"bytes,6,opt,name=status,proto3" json:"status,omitempty"`
	CreatedAt     int64  `protobuf:"varint,7,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	ProcessedAt   int64  `protobuf:"varint,8,opt,name=processed_at,json=processedAt,proto3" json:"processed_at,omitempty"`
	RequestData   string `protobuf:"bytes,9,opt,name=request_data,json=requestData,proto3" json:"request_data,omitempty"`
	RetryCount    int32  `protobuf:"varint,10,opt,name=retry_count,json=retryCount,proto3" json:"retry_count,omitempty"`
	MaxRetries    int32  `protobuf:"varint,11,opt,name=max_retries,json=maxRetries,proto3" json:"max_retries,omitempty"`
	LastAttemptAt int64  `protobuf:"varint,12,opt,name=last_attempt_at,json=lastAttemptAt,proto3" json:"last_attempt_at,omitempty"`
	NextRetryAt   int64  `protobuf:"varint,13,opt,name=next_retry_at,json=nextRetryAt,proto3" json:"next_retry_at,omitempty"`
	FailureReason string `protobuf:"bytes,14,opt,name=failure_reason,json=failureReason,proto3" json:"failure_reason,omitempty"`
}

func (m *PairingRequest) Reset()         { *m = PairingRequest{} }
func (m *PairingRequest) String() string { return proto.CompactTextString(m) }
func (*PairingRequest) ProtoMessage()    {}
func (*PairingRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e7c02ff41f83ff06, []int{0}
}
func (m *PairingRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PairingRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PairingRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PairingRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PairingRequest.Merge(m, src)
}
func (m *PairingRequest) XXX_Size() int {
	return m.Size()
}
func (m *PairingRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_PairingRequest.DiscardUnknown(m)
}

var xxx_messageInfo_PairingRequest proto.InternalMessageInfo

func (m *PairingRequest) GetRequestId() string {
	if m != nil {
		return m.RequestId
	}
	return ""
}

func (m *PairingRequest) GetInitiatorId() string {
	if m != nil {
		return m.InitiatorId
	}
	return ""
}

func (m *PairingRequest) GetTargetId() string {
	if m != nil {
		return m.TargetId
	}
	return ""
}

func (m *PairingRequest) GetRequestType() string {
	if m != nil {
		return m.RequestType
	}
	return ""
}

func (m *PairingRequest) GetProxyId() string {
	if m != nil {
		return m.ProxyId
	}
	return ""
}

func (m *PairingRequest) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

func (m *PairingRequest) GetCreatedAt() int64 {
	if m != nil {
		return m.CreatedAt
	}
	return 0
}

func (m *PairingRequest) GetProcessedAt() int64 {
	if m != nil {
		return m.ProcessedAt
	}
	return 0
}

func (m *PairingRequest) GetRequestData() string {
	if m != nil {
		return m.RequestData
	}
	return ""
}

func (m *PairingRequest) GetRetryCount() int32 {
	if m != nil {
		return m.RetryCount
	}
	return 0
}

func (m *PairingRequest) GetMaxRetries() int32 {
	if m != nil {
		return m.MaxRetries
	}
	return 0
}

func (m *PairingRequest) GetLastAttemptAt() int64 {
	if m != nil {
		return m.LastAttemptAt
	}
	return 0
}

func (m *PairingRequest) GetNextRetryAt() int64 {
	if m != nil {
		return m.NextRetryAt
	}
	return 0
}

func (m *PairingRequest) GetFailureReason() string {
	if m != nil {
		return m.FailureReason
	}
	return ""
}

func init() {
	proto.RegisterType((*PairingRequest)(nil), "racecarweb.pairingqueue.v1.PairingRequest")
}

func init() {
	proto.RegisterFile("racecarweb/pairingqueue/v1/pairing_request.proto", fileDescriptor_e7c02ff41f83ff06)
}

var fileDescriptor_e7c02ff41f83ff06 = []byte{
	// 400 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x54, 0x92, 0x31, 0x8f, 0xd3, 0x40,
	0x10, 0x85, 0x63, 0xc2, 0xe5, 0xe2, 0xf5, 0x39, 0x48, 0x5b, 0xa0, 0x05, 0x84, 0x31, 0x27, 0x81,
	0xd2, 0x90, 0xe3, 0x44, 0x47, 0x67, 0xa0, 0x49, 0x87, 0x2c, 0x2a, 0x9a, 0xd5, 0x9c, 0x3d, 0x9c,
	0x56, 0x4a, 0x6c, 0x67, 0x77, 0x1c, 0xec, 0x7f, 0xc1, 0xcf, 0xa2, 0x4c, 0x49, 0x07, 0x4a, 0xfe,
	0x08, 0xda, 0x5d, 0x27, 0x90, 0xca, 0x9a, 0x6f, 0xde, 0x9b, 0x7d, 0x92, 0x1f, 0x7b, 0xab, 0xa1,
	0xc0, 0x02, 0xf4, 0x77, 0xbc, 0xbb, 0x69, 0x40, 0x69, 0x55, 0xdd, 0x6f, 0x5a, 0x6c, 0xf1, 0x66,
	0x7b, 0x7b, 0x9c, 0xa5, 0xc6, 0x4d, 0x8b, 0x86, 0x16, 0x8d, 0xae, 0xa9, 0xe6, 0x4f, 0xff, 0x39,
	0x16, 0xff, 0x3b, 0x16, 0xdb, 0xdb, 0xeb, 0xdf, 0x63, 0x36, 0xfb, 0xec, 0x59, 0xee, 0x4d, 0xfc,
	0x39, 0x63, 0x83, 0x5f, 0xaa, 0x52, 0x04, 0x69, 0x30, 0x0f, 0xf3, 0x70, 0x20, 0xcb, 0x92, 0xbf,
	0x64, 0x57, 0xaa, 0x52, 0xa4, 0x80, 0x6a, 0x6d, 0x05, 0x0f, 0x9c, 0x20, 0x3a, 0xb1, 0x65, 0xc9,
	0x9f, 0xb1, 0x90, 0x40, 0xdf, 0xa3, 0x3b, 0x30, 0x76, 0xfb, 0xa9, 0x07, 0xde, 0x7f, 0x3c, 0x4f,
	0x7d, 0x83, 0xe2, 0xa1, 0xf7, 0x0f, 0xec, 0x4b, 0xdf, 0x20, 0x7f, 0xc2, 0xa6, 0x8d, 0xae, 0xbb,
	0xde, 0xda, 0x2f, 0xdc, 0xfa, 0xd2, 0xcd, 0xcb, 0x92, 0x3f, 0x66, 0x13, 0x43, 0x40, 0xad, 0x11,
	0x13, 0xb7, 0x18, 0x26, 0x1b, 0xba, 0xd0, 0x08, 0x84, 0xa5, 0x04, 0x12, 0x97, 0x69, 0x30, 0x1f,
	0xe7, 0xe1, 0x40, 0x32, 0xb2, 0x8f, 0x36, 0xba, 0x2e, 0xd0, 0x18, 0x2f, 0x98, 0x3a, 0x41, 0x74,
	0x62, 0x5e, 0x72, 0xcc, 0x55, 0x02, 0x81, 0x08, 0xcf, 0x72, 0x7d, 0x02, 0x02, 0xfe, 0x82, 0x45,
	0x1a, 0x49, 0xf7, 0xb2, 0xa8, 0xdb, 0x8a, 0x04, 0x4b, 0x83, 0xf9, 0x45, 0xce, 0x1c, 0xfa, 0x68,
	0x89, 0x15, 0xac, 0xa1, 0x93, 0x96, 0x28, 0x34, 0x22, 0xf2, 0x82, 0x35, 0x74, 0xb9, 0x27, 0xfc,
	0x35, 0x7b, 0xb4, 0x02, 0x43, 0x12, 0x88, 0x70, 0xdd, 0xd8, 0xaf, 0xb8, 0x72, 0x51, 0x62, 0x8b,
	0x33, 0x4f, 0x33, 0xe2, 0xd7, 0x2c, 0xae, 0xb0, 0x23, 0xe9, 0x9f, 0x03, 0x12, 0xb1, 0x0f, 0x6c,
	0xa1, 0xbd, 0xd5, 0x67, 0xc4, 0x5f, 0xb1, 0xd9, 0x37, 0x50, 0xab, 0x56, 0xa3, 0xd4, 0x08, 0xa6,
	0xae, 0xc4, 0xcc, 0x45, 0x8e, 0x07, 0x9a, 0x3b, 0xf8, 0xe1, 0xfd, 0xcf, 0x7d, 0x12, 0xec, 0xf6,
	0x49, 0xf0, 0x67, 0x9f, 0x04, 0x3f, 0x0e, 0xc9, 0x68, 0x77, 0x48, 0x46, 0xbf, 0x0e, 0xc9, 0xe8,
	0x6b, 0x3a, 0xf4, 0xe2, 0x8d, 0xad, 0x52, 0x77, 0x5e, 0x26, 0xfb, 0x6b, 0xcc, 0xdd, 0xc4, 0x15,
	0xe8, 0xdd, 0xdf, 0x00, 0x00, 0x00, 0xff, 0xff, 0x94, 0x3f, 0x9a, 0xde, 0x74, 0x02, 0x00, 0x00,
}

func (m *PairingRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PairingRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PairingRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.FailureReason) > 0 {
		i -= len(m.FailureReason)
		copy(dAtA[i:], m.FailureReason)
		i = encodeVarintPairingRequest(dAtA, i, uint64(len(m.FailureReason)))
		i--
		dAtA[i] = 0x72
	}
	if m.NextRetryAt != 0 {
		i = encodeVarintPairingRequest(dAtA, i, uint64(m.NextRetryAt))
		i--
		dAtA[i] = 0x68
	}
	if m.LastAttemptAt != 0 {
		i = encodeVarintPairingRequest(dAtA, i, uint64(m.LastAttemptAt))
		i--
		dAtA[i] = 0x60
	}
	if m.MaxRetries != 0 {
		i = encodeVarintPairingRequest(dAtA, i, uint64(m.MaxRetries))
		i--
		dAtA[i] = 0x58
	}
	if m.RetryCount != 0 {
		i = encodeVarintPairingRequest(dAtA, i, uint64(m.RetryCount))
		i--
		dAtA[i] = 0x50
	}
	if len(m.RequestData) > 0 {
		i -= len(m.RequestData)
		copy(dAtA[i:], m.RequestData)
		i = encodeVarintPairingRequest(dAtA, i, uint64(len(m.RequestData)))
		i--
		dAtA[i] = 0x4a
	}
	if m.ProcessedAt != 0 {
		i = encodeVarintPairingRequest(dAtA, i, uint64(m.ProcessedAt))
		i--
		dAtA[i] = 0x40
	}
	if m.CreatedAt != 0 {
		i = encodeVarintPairingRequest(dAtA, i, uint64(m.CreatedAt))
		i--
		dAtA[i] = 0x38
	}
	if len(m.Status) > 0 {
		i -= len(m.Status)
		copy(dAtA[i:], m.Status)
		i = encodeVarintPairingRequest(dAtA, i, uint64(len(m.Status)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.ProxyId) > 0 {
		i -= len(m.ProxyId)
		copy(dAtA[i:], m.ProxyId)
		i = encodeVarintPairingRequest(dAtA, i, uint64(len(m.ProxyId)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.RequestType) > 0 {
		i -= len(m.RequestType)
		copy(dAtA[i:], m.RequestType)
		i = encodeVarintPairingRequest(dAtA, i, uint64(len(m.RequestType)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.TargetId) > 0 {
		i -= len(m.TargetId)
		copy(dAtA[i:], m.TargetId)
		i = encodeVarintPairingRequest(dAtA, i, uint64(len(m.TargetId)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.InitiatorId) > 0 {
		i -= len(m.InitiatorId)
		copy(dAtA[i:], m.InitiatorId)
		i = encodeVarintPairingRequest(dAtA, i, uint64(len(m.InitiatorId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.RequestId) > 0 {
		i -= len(m.RequestId)
		copy(dAtA[i:], m.RequestId)
		i = encodeVarintPairingRequest(dAtA, i, uint64(len(m.RequestId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintPairingRequest(dAtA []byte, offset int, v uint64) int {
	offset -= sovPairingRequest(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *PairingRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.RequestId)
	if l > 0 {
		n += 1 + l + sovPairingRequest(uint64(l))
	}
	l = len(m.InitiatorId)
	if l > 0 {
		n += 1 + l + sovPairingRequest(uint64(l))
	}
	l = len(m.TargetId)
	if l > 0 {
		n += 1 + l + sovPairingRequest(uint64(l))
	}
	l = len(m.RequestType)
	if l > 0 {
		n += 1 + l + sovPairingRequest(uint64(l))
	}
	l = len(m.ProxyId)
	if l > 0 {
		n += 1 + l + sovPairingRequest(uint64(l))
	}
	l = len(m.Status)
	if l > 0 {
		n += 1 + l + sovPairingRequest(uint64(l))
	}
	if m.CreatedAt != 0 {
		n += 1 + sovPairingRequest(uint64(m.CreatedAt))
	}
	if m.ProcessedAt != 0 {
		n += 1 + sovPairingRequest(uint64(m.ProcessedAt))
	}
	l = len(m.RequestData)
	if l > 0 {
		n += 1 + l + sovPairingRequest(uint64(l))
	}
	if m.RetryCount != 0 {
		n += 1 + sovPairingRequest(uint64(m.RetryCount))
	}
	if m.MaxRetries != 0 {
		n += 1 + sovPairingRequest(uint64(m.MaxRetries))
	}
	if m.LastAttemptAt != 0 {
		n += 1 + sovPairingRequest(uint64(m.LastAttemptAt))
	}
	if m.NextRetryAt != 0 {
		n += 1 + sovPairingRequest(uint64(m.NextRetryAt))
	}
	l = len(m.FailureReason)
	if l > 0 {
		n += 1 + l + sovPairingRequest(uint64(l))
	}
	return n
}

func sovPairingRequest(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozPairingRequest(x uint64) (n int) {
	return sovPairingRequest(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *PairingRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPairingRequest
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PairingRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PairingRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPairingRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPairingRequest
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPairingRequest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RequestId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InitiatorId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPairingRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPairingRequest
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPairingRequest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InitiatorId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TargetId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPairingRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPairingRequest
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPairingRequest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TargetId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPairingRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPairingRequest
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPairingRequest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RequestType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProxyId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPairingRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPairingRequest
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPairingRequest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProxyId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPairingRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPairingRequest
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPairingRequest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Status = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAt", wireType)
			}
			m.CreatedAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPairingRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CreatedAt |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProcessedAt", wireType)
			}
			m.ProcessedAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPairingRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ProcessedAt |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestData", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPairingRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPairingRequest
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPairingRequest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RequestData = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RetryCount", wireType)
			}
			m.RetryCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPairingRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RetryCount |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxRetries", wireType)
			}
			m.MaxRetries = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPairingRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxRetries |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastAttemptAt", wireType)
			}
			m.LastAttemptAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPairingRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LastAttemptAt |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NextRetryAt", wireType)
			}
			m.NextRetryAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPairingRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NextRetryAt |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FailureReason", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPairingRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPairingRequest
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPairingRequest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FailureReason = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPairingRequest(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPairingRequest
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipPairingRequest(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowPairingRequest
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPairingRequest
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPairingRequest
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthPairingRequest
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupPairingRequest
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthPairingRequest
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthPairingRequest        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowPairingRequest          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupPairingRequest = fmt.Errorf("proto: unexpected end of group")
)
