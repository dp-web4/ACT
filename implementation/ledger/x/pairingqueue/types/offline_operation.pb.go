// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: racecarweb/pairingqueue/v1/offline_operation.proto

package types

import (
	fmt "fmt"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// OfflineOperation defines the OfflineOperation message.
type OfflineOperation struct {
	OperationId   string `protobuf:"bytes,1,opt,name=operation_id,json=operationId,proto3" json:"operation_id,omitempty"`
	ComponentId   string `protobuf:"bytes,2,opt,name=component_id,json=componentId,proto3" json:"component_id,omitempty"`
	OperationType string `protobuf:"bytes,3,opt,name=operation_type,json=operationType,proto3" json:"operation_type,omitempty"`
	QueuedAt      int64  `protobuf:"varint,4,opt,name=queued_at,json=queuedAt,proto3" json:"queued_at,omitempty"`
	RetryCount    int32  `protobuf:"varint,5,opt,name=retry_count,json=retryCount,proto3" json:"retry_count,omitempty"`
	MaxRetries    int32  `protobuf:"varint,6,opt,name=max_retries,json=maxRetries,proto3" json:"max_retries,omitempty"`
	LastAttemptAt int64  `protobuf:"varint,7,opt,name=last_attempt_at,json=lastAttemptAt,proto3" json:"last_attempt_at,omitempty"`
	NextRetryAt   int64  `protobuf:"varint,8,opt,name=next_retry_at,json=nextRetryAt,proto3" json:"next_retry_at,omitempty"`
	FailureReason string `protobuf:"bytes,9,opt,name=failure_reason,json=failureReason,proto3" json:"failure_reason,omitempty"`
}

func (m *OfflineOperation) Reset()         { *m = OfflineOperation{} }
func (m *OfflineOperation) String() string { return proto.CompactTextString(m) }
func (*OfflineOperation) ProtoMessage()    {}
func (*OfflineOperation) Descriptor() ([]byte, []int) {
	return fileDescriptor_1d3cec50e69f4604, []int{0}
}
func (m *OfflineOperation) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *OfflineOperation) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_OfflineOperation.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *OfflineOperation) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OfflineOperation.Merge(m, src)
}
func (m *OfflineOperation) XXX_Size() int {
	return m.Size()
}
func (m *OfflineOperation) XXX_DiscardUnknown() {
	xxx_messageInfo_OfflineOperation.DiscardUnknown(m)
}

var xxx_messageInfo_OfflineOperation proto.InternalMessageInfo

func (m *OfflineOperation) GetOperationId() string {
	if m != nil {
		return m.OperationId
	}
	return ""
}

func (m *OfflineOperation) GetComponentId() string {
	if m != nil {
		return m.ComponentId
	}
	return ""
}

func (m *OfflineOperation) GetOperationType() string {
	if m != nil {
		return m.OperationType
	}
	return ""
}

func (m *OfflineOperation) GetQueuedAt() int64 {
	if m != nil {
		return m.QueuedAt
	}
	return 0
}

func (m *OfflineOperation) GetRetryCount() int32 {
	if m != nil {
		return m.RetryCount
	}
	return 0
}

func (m *OfflineOperation) GetMaxRetries() int32 {
	if m != nil {
		return m.MaxRetries
	}
	return 0
}

func (m *OfflineOperation) GetLastAttemptAt() int64 {
	if m != nil {
		return m.LastAttemptAt
	}
	return 0
}

func (m *OfflineOperation) GetNextRetryAt() int64 {
	if m != nil {
		return m.NextRetryAt
	}
	return 0
}

func (m *OfflineOperation) GetFailureReason() string {
	if m != nil {
		return m.FailureReason
	}
	return ""
}

func init() {
	proto.RegisterType((*OfflineOperation)(nil), "racecarweb.pairingqueue.v1.OfflineOperation")
}

func init() {
	proto.RegisterFile("racecarweb/pairingqueue/v1/offline_operation.proto", fileDescriptor_1d3cec50e69f4604)
}

var fileDescriptor_1d3cec50e69f4604 = []byte{
	// 338 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x54, 0x91, 0xc1, 0x4e, 0xea, 0x40,
	0x14, 0x86, 0x29, 0x5c, 0xb8, 0x30, 0x5c, 0xae, 0xa6, 0xab, 0x89, 0x26, 0xb5, 0x92, 0x68, 0xd8,
	0x08, 0x41, 0x77, 0xee, 0xaa, 0x2b, 0x56, 0x24, 0x8d, 0x2b, 0x37, 0x93, 0xa1, 0x3d, 0x98, 0x26,
	0x74, 0xa6, 0x4e, 0x4f, 0xb1, 0x7d, 0x0b, 0x1f, 0xcb, 0x25, 0xee, 0x5c, 0x1a, 0x78, 0x11, 0x33,
	0x33, 0x58, 0x74, 0xd5, 0xe4, 0xcb, 0xf7, 0x9f, 0xd3, 0x33, 0x3f, 0xb9, 0x56, 0x3c, 0x82, 0x88,
	0xab, 0x17, 0x58, 0x4c, 0x32, 0x9e, 0xa8, 0x44, 0x3c, 0x3d, 0x17, 0x50, 0xc0, 0x64, 0x3d, 0x9d,
	0xc8, 0xe5, 0x72, 0x95, 0x08, 0x60, 0x32, 0x03, 0xc5, 0x31, 0x91, 0x62, 0x9c, 0x29, 0x89, 0xd2,
	0x3d, 0x39, 0x64, 0xc6, 0x3f, 0x33, 0xe3, 0xf5, 0x74, 0xf8, 0xde, 0x24, 0xc7, 0x73, 0x9b, 0x9b,
	0x7f, 0xc7, 0xdc, 0x73, 0xf2, 0xaf, 0x9e, 0xc1, 0x92, 0x98, 0x3a, 0xbe, 0x33, 0xea, 0x85, 0xfd,
	0x9a, 0xcd, 0x62, 0xad, 0x44, 0x32, 0xcd, 0xa4, 0x00, 0x81, 0x5a, 0x69, 0x5a, 0xa5, 0x66, 0xb3,
	0xd8, 0xbd, 0x20, 0xff, 0x0f, 0x53, 0xb0, 0xca, 0x80, 0xb6, 0x8c, 0x34, 0xa8, 0xe9, 0x43, 0x95,
	0x81, 0x7b, 0x4a, 0x7a, 0xe6, 0x6f, 0x62, 0xc6, 0x91, 0xfe, 0xf1, 0x9d, 0x51, 0x2b, 0xec, 0x5a,
	0x10, 0xa0, 0x7b, 0x46, 0xfa, 0x0a, 0x50, 0x55, 0x2c, 0x92, 0x85, 0x40, 0xda, 0xf6, 0x9d, 0x51,
	0x3b, 0x24, 0x06, 0xdd, 0x6b, 0xa2, 0x85, 0x94, 0x97, 0x4c, 0x93, 0x04, 0x72, 0xda, 0xb1, 0x42,
	0xca, 0xcb, 0xd0, 0x12, 0xf7, 0x92, 0x1c, 0xad, 0x78, 0x8e, 0x8c, 0x23, 0x42, 0x9a, 0xe9, 0x2f,
	0xfd, 0x6b, 0x96, 0x0c, 0x34, 0x0e, 0x2c, 0x0d, 0xd0, 0x1d, 0x92, 0x81, 0x80, 0x12, 0x99, 0x5d,
	0xc7, 0x91, 0x76, 0x8d, 0xd5, 0xd7, 0x50, 0xcf, 0xaa, 0x02, 0xd4, 0x17, 0x2d, 0x79, 0xb2, 0x2a,
	0x14, 0x30, 0x05, 0x3c, 0x97, 0x82, 0xf6, 0xec, 0x45, 0x7b, 0x1a, 0x1a, 0x78, 0x77, 0xfb, 0xb6,
	0xf5, 0x9c, 0xcd, 0xd6, 0x73, 0x3e, 0xb7, 0x9e, 0xf3, 0xba, 0xf3, 0x1a, 0x9b, 0x9d, 0xd7, 0xf8,
	0xd8, 0x79, 0x8d, 0x47, 0x7f, 0xdf, 0xc4, 0x95, 0xae, 0xaf, 0xfc, 0x5d, 0xa0, 0x7e, 0xa1, 0x7c,
	0xd1, 0x31, 0x95, 0xdd, 0x7c, 0x05, 0x00, 0x00, 0xff, 0xff, 0xf0, 0x03, 0x04, 0xf7, 0xe8, 0x01,
	0x00, 0x00,
}

func (m *OfflineOperation) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OfflineOperation) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *OfflineOperation) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.FailureReason) > 0 {
		i -= len(m.FailureReason)
		copy(dAtA[i:], m.FailureReason)
		i = encodeVarintOfflineOperation(dAtA, i, uint64(len(m.FailureReason)))
		i--
		dAtA[i] = 0x4a
	}
	if m.NextRetryAt != 0 {
		i = encodeVarintOfflineOperation(dAtA, i, uint64(m.NextRetryAt))
		i--
		dAtA[i] = 0x40
	}
	if m.LastAttemptAt != 0 {
		i = encodeVarintOfflineOperation(dAtA, i, uint64(m.LastAttemptAt))
		i--
		dAtA[i] = 0x38
	}
	if m.MaxRetries != 0 {
		i = encodeVarintOfflineOperation(dAtA, i, uint64(m.MaxRetries))
		i--
		dAtA[i] = 0x30
	}
	if m.RetryCount != 0 {
		i = encodeVarintOfflineOperation(dAtA, i, uint64(m.RetryCount))
		i--
		dAtA[i] = 0x28
	}
	if m.QueuedAt != 0 {
		i = encodeVarintOfflineOperation(dAtA, i, uint64(m.QueuedAt))
		i--
		dAtA[i] = 0x20
	}
	if len(m.OperationType) > 0 {
		i -= len(m.OperationType)
		copy(dAtA[i:], m.OperationType)
		i = encodeVarintOfflineOperation(dAtA, i, uint64(len(m.OperationType)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ComponentId) > 0 {
		i -= len(m.ComponentId)
		copy(dAtA[i:], m.ComponentId)
		i = encodeVarintOfflineOperation(dAtA, i, uint64(len(m.ComponentId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.OperationId) > 0 {
		i -= len(m.OperationId)
		copy(dAtA[i:], m.OperationId)
		i = encodeVarintOfflineOperation(dAtA, i, uint64(len(m.OperationId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintOfflineOperation(dAtA []byte, offset int, v uint64) int {
	offset -= sovOfflineOperation(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *OfflineOperation) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.OperationId)
	if l > 0 {
		n += 1 + l + sovOfflineOperation(uint64(l))
	}
	l = len(m.ComponentId)
	if l > 0 {
		n += 1 + l + sovOfflineOperation(uint64(l))
	}
	l = len(m.OperationType)
	if l > 0 {
		n += 1 + l + sovOfflineOperation(uint64(l))
	}
	if m.QueuedAt != 0 {
		n += 1 + sovOfflineOperation(uint64(m.QueuedAt))
	}
	if m.RetryCount != 0 {
		n += 1 + sovOfflineOperation(uint64(m.RetryCount))
	}
	if m.MaxRetries != 0 {
		n += 1 + sovOfflineOperation(uint64(m.MaxRetries))
	}
	if m.LastAttemptAt != 0 {
		n += 1 + sovOfflineOperation(uint64(m.LastAttemptAt))
	}
	if m.NextRetryAt != 0 {
		n += 1 + sovOfflineOperation(uint64(m.NextRetryAt))
	}
	l = len(m.FailureReason)
	if l > 0 {
		n += 1 + l + sovOfflineOperation(uint64(l))
	}
	return n
}

func sovOfflineOperation(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozOfflineOperation(x uint64) (n int) {
	return sovOfflineOperation(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *OfflineOperation) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOfflineOperation
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OfflineOperation: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OfflineOperation: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OperationId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOfflineOperation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOfflineOperation
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOfflineOperation
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OperationId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ComponentId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOfflineOperation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOfflineOperation
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOfflineOperation
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ComponentId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OperationType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOfflineOperation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOfflineOperation
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOfflineOperation
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OperationType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field QueuedAt", wireType)
			}
			m.QueuedAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOfflineOperation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.QueuedAt |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RetryCount", wireType)
			}
			m.RetryCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOfflineOperation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RetryCount |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxRetries", wireType)
			}
			m.MaxRetries = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOfflineOperation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxRetries |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastAttemptAt", wireType)
			}
			m.LastAttemptAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOfflineOperation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LastAttemptAt |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NextRetryAt", wireType)
			}
			m.NextRetryAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOfflineOperation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NextRetryAt |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FailureReason", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOfflineOperation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOfflineOperation
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOfflineOperation
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FailureReason = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipOfflineOperation(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthOfflineOperation
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipOfflineOperation(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowOfflineOperation
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowOfflineOperation
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowOfflineOperation
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthOfflineOperation
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupOfflineOperation
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthOfflineOperation
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthOfflineOperation        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowOfflineOperation          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupOfflineOperation = fmt.Errorf("proto: unexpected end of group")
)
