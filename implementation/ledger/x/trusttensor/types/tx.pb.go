// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: racecarweb/trusttensor/v1/tx.proto

package types

import (
	context "context"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	_ "github.com/cosmos/cosmos-sdk/types/msgservice"
	_ "github.com/cosmos/cosmos-sdk/types/tx/amino"
	_ "github.com/cosmos/gogoproto/gogoproto"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// MsgUpdateParams is the Msg/UpdateParams request type.
type MsgUpdateParams struct {
	// authority is the address that controls the module (defaults to x/gov unless overwritten).
	Authority string `protobuf:"bytes,1,opt,name=authority,proto3" json:"authority,omitempty"`
	// NOTE: All parameters must be supplied.
	Params Params `protobuf:"bytes,2,opt,name=params,proto3" json:"params"`
}

func (m *MsgUpdateParams) Reset()         { *m = MsgUpdateParams{} }
func (m *MsgUpdateParams) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateParams) ProtoMessage()    {}
func (*MsgUpdateParams) Descriptor() ([]byte, []int) {
	return fileDescriptor_587efd0e0e8cf3cb, []int{0}
}
func (m *MsgUpdateParams) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateParams) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateParams.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateParams) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateParams.Merge(m, src)
}
func (m *MsgUpdateParams) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateParams) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateParams.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateParams proto.InternalMessageInfo

func (m *MsgUpdateParams) GetAuthority() string {
	if m != nil {
		return m.Authority
	}
	return ""
}

func (m *MsgUpdateParams) GetParams() Params {
	if m != nil {
		return m.Params
	}
	return Params{}
}

// MsgUpdateParamsResponse defines the response structure for executing a
// MsgUpdateParams message.
type MsgUpdateParamsResponse struct {
}

func (m *MsgUpdateParamsResponse) Reset()         { *m = MsgUpdateParamsResponse{} }
func (m *MsgUpdateParamsResponse) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateParamsResponse) ProtoMessage()    {}
func (*MsgUpdateParamsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_587efd0e0e8cf3cb, []int{1}
}
func (m *MsgUpdateParamsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateParamsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateParamsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateParamsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateParamsResponse.Merge(m, src)
}
func (m *MsgUpdateParamsResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateParamsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateParamsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateParamsResponse proto.InternalMessageInfo

// MsgCreateRelationshipTensor defines the MsgCreateRelationshipTensor message.
type MsgCreateRelationshipTensor struct {
	Creator    string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	LctId      string `protobuf:"bytes,2,opt,name=lct_id,json=lctId,proto3" json:"lct_id,omitempty"`
	TensorType string `protobuf:"bytes,3,opt,name=tensor_type,json=tensorType,proto3" json:"tensor_type,omitempty"`
	Context    string `protobuf:"bytes,4,opt,name=context,proto3" json:"context,omitempty"`
}

func (m *MsgCreateRelationshipTensor) Reset()         { *m = MsgCreateRelationshipTensor{} }
func (m *MsgCreateRelationshipTensor) String() string { return proto.CompactTextString(m) }
func (*MsgCreateRelationshipTensor) ProtoMessage()    {}
func (*MsgCreateRelationshipTensor) Descriptor() ([]byte, []int) {
	return fileDescriptor_587efd0e0e8cf3cb, []int{2}
}
func (m *MsgCreateRelationshipTensor) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCreateRelationshipTensor) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCreateRelationshipTensor.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCreateRelationshipTensor) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCreateRelationshipTensor.Merge(m, src)
}
func (m *MsgCreateRelationshipTensor) XXX_Size() int {
	return m.Size()
}
func (m *MsgCreateRelationshipTensor) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCreateRelationshipTensor.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCreateRelationshipTensor proto.InternalMessageInfo

func (m *MsgCreateRelationshipTensor) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgCreateRelationshipTensor) GetLctId() string {
	if m != nil {
		return m.LctId
	}
	return ""
}

func (m *MsgCreateRelationshipTensor) GetTensorType() string {
	if m != nil {
		return m.TensorType
	}
	return ""
}

func (m *MsgCreateRelationshipTensor) GetContext() string {
	if m != nil {
		return m.Context
	}
	return ""
}

// MsgCreateRelationshipTensorResponse defines the MsgCreateRelationshipTensorResponse message.
type MsgCreateRelationshipTensorResponse struct {
	TensorId string `protobuf:"bytes,1,opt,name=tensor_id,json=tensorId,proto3" json:"tensor_id,omitempty"`
}

func (m *MsgCreateRelationshipTensorResponse) Reset()         { *m = MsgCreateRelationshipTensorResponse{} }
func (m *MsgCreateRelationshipTensorResponse) String() string { return proto.CompactTextString(m) }
func (*MsgCreateRelationshipTensorResponse) ProtoMessage()    {}
func (*MsgCreateRelationshipTensorResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_587efd0e0e8cf3cb, []int{3}
}
func (m *MsgCreateRelationshipTensorResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCreateRelationshipTensorResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCreateRelationshipTensorResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCreateRelationshipTensorResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCreateRelationshipTensorResponse.Merge(m, src)
}
func (m *MsgCreateRelationshipTensorResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgCreateRelationshipTensorResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCreateRelationshipTensorResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCreateRelationshipTensorResponse proto.InternalMessageInfo

func (m *MsgCreateRelationshipTensorResponse) GetTensorId() string {
	if m != nil {
		return m.TensorId
	}
	return ""
}

// MsgUpdateTensorScore defines the MsgUpdateTensorScore message.
type MsgUpdateTensorScore struct {
	Creator     string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	TensorId    string `protobuf:"bytes,2,opt,name=tensor_id,json=tensorId,proto3" json:"tensor_id,omitempty"`
	Dimension   string `protobuf:"bytes,3,opt,name=dimension,proto3" json:"dimension,omitempty"`
	Value       string `protobuf:"bytes,4,opt,name=value,proto3" json:"value,omitempty"`
	Context     string `protobuf:"bytes,5,opt,name=context,proto3" json:"context,omitempty"`
	WitnessData string `protobuf:"bytes,6,opt,name=witness_data,json=witnessData,proto3" json:"witness_data,omitempty"`
}

func (m *MsgUpdateTensorScore) Reset()         { *m = MsgUpdateTensorScore{} }
func (m *MsgUpdateTensorScore) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateTensorScore) ProtoMessage()    {}
func (*MsgUpdateTensorScore) Descriptor() ([]byte, []int) {
	return fileDescriptor_587efd0e0e8cf3cb, []int{4}
}
func (m *MsgUpdateTensorScore) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateTensorScore) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateTensorScore.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateTensorScore) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateTensorScore.Merge(m, src)
}
func (m *MsgUpdateTensorScore) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateTensorScore) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateTensorScore.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateTensorScore proto.InternalMessageInfo

func (m *MsgUpdateTensorScore) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgUpdateTensorScore) GetTensorId() string {
	if m != nil {
		return m.TensorId
	}
	return ""
}

func (m *MsgUpdateTensorScore) GetDimension() string {
	if m != nil {
		return m.Dimension
	}
	return ""
}

func (m *MsgUpdateTensorScore) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

func (m *MsgUpdateTensorScore) GetContext() string {
	if m != nil {
		return m.Context
	}
	return ""
}

func (m *MsgUpdateTensorScore) GetWitnessData() string {
	if m != nil {
		return m.WitnessData
	}
	return ""
}

// MsgUpdateTensorScoreResponse defines the MsgUpdateTensorScoreResponse message.
type MsgUpdateTensorScoreResponse struct {
}

func (m *MsgUpdateTensorScoreResponse) Reset()         { *m = MsgUpdateTensorScoreResponse{} }
func (m *MsgUpdateTensorScoreResponse) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateTensorScoreResponse) ProtoMessage()    {}
func (*MsgUpdateTensorScoreResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_587efd0e0e8cf3cb, []int{5}
}
func (m *MsgUpdateTensorScoreResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateTensorScoreResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateTensorScoreResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateTensorScoreResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateTensorScoreResponse.Merge(m, src)
}
func (m *MsgUpdateTensorScoreResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateTensorScoreResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateTensorScoreResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateTensorScoreResponse proto.InternalMessageInfo

// MsgAddTensorWitness defines the MsgAddTensorWitness message.
type MsgAddTensorWitness struct {
	Creator      string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	TensorId     string `protobuf:"bytes,2,opt,name=tensor_id,json=tensorId,proto3" json:"tensor_id,omitempty"`
	Dimension    string `protobuf:"bytes,3,opt,name=dimension,proto3" json:"dimension,omitempty"`
	WitnessLct   string `protobuf:"bytes,4,opt,name=witness_lct,json=witnessLct,proto3" json:"witness_lct,omitempty"`
	Confidence   string `protobuf:"bytes,5,opt,name=confidence,proto3" json:"confidence,omitempty"`
	EvidenceHash string `protobuf:"bytes,6,opt,name=evidence_hash,json=evidenceHash,proto3" json:"evidence_hash,omitempty"`
}

func (m *MsgAddTensorWitness) Reset()         { *m = MsgAddTensorWitness{} }
func (m *MsgAddTensorWitness) String() string { return proto.CompactTextString(m) }
func (*MsgAddTensorWitness) ProtoMessage()    {}
func (*MsgAddTensorWitness) Descriptor() ([]byte, []int) {
	return fileDescriptor_587efd0e0e8cf3cb, []int{6}
}
func (m *MsgAddTensorWitness) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgAddTensorWitness) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgAddTensorWitness.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgAddTensorWitness) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgAddTensorWitness.Merge(m, src)
}
func (m *MsgAddTensorWitness) XXX_Size() int {
	return m.Size()
}
func (m *MsgAddTensorWitness) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgAddTensorWitness.DiscardUnknown(m)
}

var xxx_messageInfo_MsgAddTensorWitness proto.InternalMessageInfo

func (m *MsgAddTensorWitness) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgAddTensorWitness) GetTensorId() string {
	if m != nil {
		return m.TensorId
	}
	return ""
}

func (m *MsgAddTensorWitness) GetDimension() string {
	if m != nil {
		return m.Dimension
	}
	return ""
}

func (m *MsgAddTensorWitness) GetWitnessLct() string {
	if m != nil {
		return m.WitnessLct
	}
	return ""
}

func (m *MsgAddTensorWitness) GetConfidence() string {
	if m != nil {
		return m.Confidence
	}
	return ""
}

func (m *MsgAddTensorWitness) GetEvidenceHash() string {
	if m != nil {
		return m.EvidenceHash
	}
	return ""
}

// MsgAddTensorWitnessResponse defines the MsgAddTensorWitnessResponse message.
type MsgAddTensorWitnessResponse struct {
}

func (m *MsgAddTensorWitnessResponse) Reset()         { *m = MsgAddTensorWitnessResponse{} }
func (m *MsgAddTensorWitnessResponse) String() string { return proto.CompactTextString(m) }
func (*MsgAddTensorWitnessResponse) ProtoMessage()    {}
func (*MsgAddTensorWitnessResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_587efd0e0e8cf3cb, []int{7}
}
func (m *MsgAddTensorWitnessResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgAddTensorWitnessResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgAddTensorWitnessResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgAddTensorWitnessResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgAddTensorWitnessResponse.Merge(m, src)
}
func (m *MsgAddTensorWitnessResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgAddTensorWitnessResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgAddTensorWitnessResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgAddTensorWitnessResponse proto.InternalMessageInfo

func init() {
	proto.RegisterType((*MsgUpdateParams)(nil), "racecarweb.trusttensor.v1.MsgUpdateParams")
	proto.RegisterType((*MsgUpdateParamsResponse)(nil), "racecarweb.trusttensor.v1.MsgUpdateParamsResponse")
	proto.RegisterType((*MsgCreateRelationshipTensor)(nil), "racecarweb.trusttensor.v1.MsgCreateRelationshipTensor")
	proto.RegisterType((*MsgCreateRelationshipTensorResponse)(nil), "racecarweb.trusttensor.v1.MsgCreateRelationshipTensorResponse")
	proto.RegisterType((*MsgUpdateTensorScore)(nil), "racecarweb.trusttensor.v1.MsgUpdateTensorScore")
	proto.RegisterType((*MsgUpdateTensorScoreResponse)(nil), "racecarweb.trusttensor.v1.MsgUpdateTensorScoreResponse")
	proto.RegisterType((*MsgAddTensorWitness)(nil), "racecarweb.trusttensor.v1.MsgAddTensorWitness")
	proto.RegisterType((*MsgAddTensorWitnessResponse)(nil), "racecarweb.trusttensor.v1.MsgAddTensorWitnessResponse")
}

func init() {
	proto.RegisterFile("racecarweb/trusttensor/v1/tx.proto", fileDescriptor_587efd0e0e8cf3cb)
}

var fileDescriptor_587efd0e0e8cf3cb = []byte{
	// 684 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x55, 0x4f, 0x6b, 0x13, 0x4f,
	0x18, 0xce, 0xb6, 0x4d, 0xfa, 0xcb, 0xdb, 0xfc, 0xd0, 0x8e, 0x91, 0x6e, 0xb7, 0x75, 0xd3, 0xa6,
	0x20, 0x25, 0xd0, 0x2c, 0x8d, 0x50, 0xb1, 0x82, 0xd0, 0xd8, 0x83, 0x05, 0x03, 0x92, 0x56, 0x04,
	0x2f, 0x61, 0xba, 0x3b, 0x6e, 0x16, 0x92, 0x9d, 0x65, 0x66, 0x9a, 0xb6, 0x82, 0x20, 0x1e, 0xc5,
	0x83, 0xf8, 0x29, 0x3c, 0x56, 0xf0, 0x43, 0xf4, 0xe0, 0xa1, 0x78, 0xf2, 0x24, 0xd2, 0x82, 0xfd,
	0x0a, 0x1e, 0x25, 0x3b, 0xb3, 0xf9, 0xb3, 0x31, 0xb1, 0xed, 0xc1, 0x4b, 0x98, 0x79, 0xde, 0xf7,
	0x7d, 0xde, 0xf7, 0x79, 0x32, 0x33, 0x0b, 0x79, 0x86, 0x6d, 0x62, 0x63, 0xb6, 0x4f, 0x76, 0x2d,
	0xc1, 0xf6, 0xb8, 0x10, 0xc4, 0xe7, 0x94, 0x59, 0xad, 0x55, 0x4b, 0x1c, 0x14, 0x03, 0x46, 0x05,
	0x45, 0xb3, 0xdd, 0x9c, 0x62, 0x4f, 0x4e, 0xb1, 0xb5, 0x6a, 0x4c, 0xe3, 0xa6, 0xe7, 0x53, 0x2b,
	0xfc, 0x95, 0xd9, 0xc6, 0x8c, 0x4d, 0x79, 0x93, 0x72, 0xab, 0xc9, 0xdd, 0x36, 0x4b, 0x93, 0xbb,
	0x2a, 0x30, 0x2b, 0x03, 0xb5, 0x70, 0x67, 0xc9, 0x8d, 0x0a, 0x65, 0x5d, 0xea, 0x52, 0x89, 0xb7,
	0x57, 0x0a, 0xbd, 0x3d, 0x7c, 0xb6, 0x00, 0x33, 0xdc, 0x54, 0xd5, 0xf9, 0x2f, 0x1a, 0x5c, 0xab,
	0x70, 0xf7, 0x69, 0xe0, 0x60, 0x41, 0x9e, 0x84, 0x11, 0xb4, 0x06, 0x69, 0xbc, 0x27, 0xea, 0x94,
	0x79, 0xe2, 0x50, 0xd7, 0x16, 0xb4, 0xe5, 0x74, 0x59, 0xff, 0xfa, 0x79, 0x25, 0xab, 0xda, 0x6e,
	0x38, 0x0e, 0x23, 0x9c, 0x6f, 0x0b, 0xe6, 0xf9, 0x6e, 0xb5, 0x9b, 0x8a, 0x36, 0x21, 0x25, 0xb9,
	0xf5, 0xb1, 0x05, 0x6d, 0x79, 0xaa, 0xb4, 0x58, 0x1c, 0x2a, 0xbe, 0x28, 0x5b, 0x95, 0xd3, 0xc7,
	0xdf, 0x73, 0x89, 0x8f, 0xe7, 0x47, 0x05, 0xad, 0xaa, 0x6a, 0xd7, 0xef, 0xbf, 0x39, 0x3f, 0x2a,
	0x74, 0x59, 0xdf, 0x9e, 0x1f, 0x15, 0x96, 0x7b, 0xc4, 0x1c, 0xf4, 0xc9, 0x89, 0x8d, 0x9e, 0x9f,
	0x85, 0x99, 0x18, 0x54, 0x25, 0x3c, 0xa0, 0x3e, 0x27, 0xf9, 0x4f, 0x1a, 0xcc, 0x55, 0xb8, 0xfb,
	0x90, 0x11, 0x2c, 0x48, 0x95, 0x34, 0xb0, 0xf0, 0xa8, 0xcf, 0xeb, 0x5e, 0xb0, 0x13, 0x52, 0xa1,
	0x12, 0x4c, 0xda, 0xed, 0x18, 0x65, 0x7f, 0xd5, 0x1c, 0x25, 0xa2, 0x9b, 0x90, 0x6a, 0xd8, 0xa2,
	0xe6, 0x39, 0xa1, 0xe2, 0x74, 0x35, 0xd9, 0xb0, 0xc5, 0x96, 0x83, 0x72, 0x30, 0x25, 0xe7, 0xab,
	0x89, 0xc3, 0x80, 0xe8, 0xe3, 0x61, 0x0c, 0x24, 0xb4, 0x73, 0x18, 0x10, 0xa4, 0xc3, 0xa4, 0x4d,
	0x7d, 0x41, 0x0e, 0x84, 0x3e, 0x11, 0x06, 0xa3, 0xed, 0x7a, 0xa6, 0xad, 0x3e, 0xe2, 0xcf, 0x97,
	0x61, 0x69, 0xc4, 0xc8, 0x91, 0x34, 0x34, 0x07, 0x69, 0xd5, 0xcf, 0x73, 0xe4, 0xf0, 0xd5, 0xff,
	0x24, 0xb0, 0xe5, 0xe4, 0x7f, 0x6a, 0x90, 0xed, 0x78, 0x22, 0x0b, 0xb7, 0x6d, 0xca, 0xc8, 0x95,
	0x04, 0xf7, 0x75, 0x1a, 0xeb, 0xef, 0x84, 0xe6, 0x21, 0xed, 0x78, 0x4d, 0xe2, 0x73, 0x8f, 0xfa,
	0x4a, 0x74, 0x17, 0x40, 0x59, 0x48, 0xb6, 0x70, 0x63, 0x8f, 0x28, 0xc5, 0x72, 0xd3, 0xeb, 0x44,
	0xb2, 0xcf, 0x09, 0xb4, 0x08, 0x99, 0x7d, 0x4f, 0xf8, 0x84, 0xf3, 0x9a, 0x83, 0x05, 0xd6, 0x53,
	0x61, 0x78, 0x4a, 0x61, 0x9b, 0x58, 0xe0, 0x98, 0x59, 0x26, 0xcc, 0xff, 0x49, 0x67, 0xe7, 0x00,
	0xfc, 0xd2, 0xe0, 0x46, 0x85, 0xbb, 0x1b, 0x8e, 0x23, 0xa3, 0xcf, 0x24, 0xd3, 0xbf, 0xf6, 0x21,
	0x07, 0x91, 0x86, 0x5a, 0xc3, 0x8e, 0xfe, 0x7f, 0x50, 0xd0, 0x63, 0x5b, 0x20, 0x13, 0xc0, 0xa6,
	0xfe, 0x0b, 0xcf, 0x21, 0xbe, 0x4d, 0x94, 0x2b, 0x3d, 0x08, 0x5a, 0x82, 0xff, 0x49, 0x4b, 0xae,
	0x6b, 0x75, 0xcc, 0xeb, 0xca, 0x99, 0x4c, 0x04, 0x3e, 0xc2, 0xbc, 0x1e, 0xb3, 0xe6, 0x56, 0x78,
	0xf4, 0xe3, 0xca, 0x23, 0x67, 0x4a, 0xef, 0x26, 0x60, 0xbc, 0xc2, 0x5d, 0xe4, 0x43, 0xa6, 0xef,
	0x21, 0x28, 0x8c, 0xb8, 0xc0, 0xb1, 0x6b, 0x66, 0x94, 0x2e, 0x9e, 0xdb, 0x39, 0xb7, 0x1f, 0x34,
	0xd0, 0x87, 0xde, 0xc7, 0xb5, 0xd1, 0x84, 0xc3, 0xea, 0x8c, 0x07, 0x57, 0xab, 0xeb, 0x0c, 0xf5,
	0x0a, 0xa6, 0x07, 0xef, 0x8a, 0x75, 0x11, 0x75, 0x3d, 0x05, 0xc6, 0xdd, 0x4b, 0x16, 0x74, 0xda,
	0xbf, 0x84, 0xeb, 0x03, 0x27, 0xb4, 0x38, 0x9a, 0x2c, 0x9e, 0x6f, 0xac, 0x5d, 0x2e, 0x3f, 0xea,
	0x6d, 0x24, 0x5f, 0xb7, 0x5f, 0xe2, 0xf2, 0xbd, 0xe3, 0x53, 0x53, 0x3b, 0x39, 0x35, 0xb5, 0x1f,
	0xa7, 0xa6, 0xf6, 0xfe, 0xcc, 0x4c, 0x9c, 0x9c, 0x99, 0x89, 0x6f, 0x67, 0x66, 0xe2, 0x79, 0x4e,
	0xf1, 0xae, 0x0c, 0xbe, 0xc4, 0xed, 0x97, 0x8e, 0xef, 0xa6, 0xc2, 0xaf, 0xca, 0x9d, 0xdf, 0x01,
	0x00, 0x00, 0xff, 0xff, 0x5a, 0xe0, 0xdc, 0xd0, 0x1b, 0x07, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MsgClient is the client API for Msg service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MsgClient interface {
	// UpdateParams defines a (governance) operation for updating the module
	// parameters. The authority defaults to the x/gov module account.
	UpdateParams(ctx context.Context, in *MsgUpdateParams, opts ...grpc.CallOption) (*MsgUpdateParamsResponse, error)
	// CreateRelationshipTensor defines the CreateRelationshipTensor RPC.
	CreateRelationshipTensor(ctx context.Context, in *MsgCreateRelationshipTensor, opts ...grpc.CallOption) (*MsgCreateRelationshipTensorResponse, error)
	// UpdateTensorScore defines the UpdateTensorScore RPC.
	UpdateTensorScore(ctx context.Context, in *MsgUpdateTensorScore, opts ...grpc.CallOption) (*MsgUpdateTensorScoreResponse, error)
	// AddTensorWitness defines the AddTensorWitness RPC.
	AddTensorWitness(ctx context.Context, in *MsgAddTensorWitness, opts ...grpc.CallOption) (*MsgAddTensorWitnessResponse, error)
}

type msgClient struct {
	cc grpc1.ClientConn
}

func NewMsgClient(cc grpc1.ClientConn) MsgClient {
	return &msgClient{cc}
}

func (c *msgClient) UpdateParams(ctx context.Context, in *MsgUpdateParams, opts ...grpc.CallOption) (*MsgUpdateParamsResponse, error) {
	out := new(MsgUpdateParamsResponse)
	err := c.cc.Invoke(ctx, "/racecarweb.trusttensor.v1.Msg/UpdateParams", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) CreateRelationshipTensor(ctx context.Context, in *MsgCreateRelationshipTensor, opts ...grpc.CallOption) (*MsgCreateRelationshipTensorResponse, error) {
	out := new(MsgCreateRelationshipTensorResponse)
	err := c.cc.Invoke(ctx, "/racecarweb.trusttensor.v1.Msg/CreateRelationshipTensor", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) UpdateTensorScore(ctx context.Context, in *MsgUpdateTensorScore, opts ...grpc.CallOption) (*MsgUpdateTensorScoreResponse, error) {
	out := new(MsgUpdateTensorScoreResponse)
	err := c.cc.Invoke(ctx, "/racecarweb.trusttensor.v1.Msg/UpdateTensorScore", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) AddTensorWitness(ctx context.Context, in *MsgAddTensorWitness, opts ...grpc.CallOption) (*MsgAddTensorWitnessResponse, error) {
	out := new(MsgAddTensorWitnessResponse)
	err := c.cc.Invoke(ctx, "/racecarweb.trusttensor.v1.Msg/AddTensorWitness", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MsgServer is the server API for Msg service.
type MsgServer interface {
	// UpdateParams defines a (governance) operation for updating the module
	// parameters. The authority defaults to the x/gov module account.
	UpdateParams(context.Context, *MsgUpdateParams) (*MsgUpdateParamsResponse, error)
	// CreateRelationshipTensor defines the CreateRelationshipTensor RPC.
	CreateRelationshipTensor(context.Context, *MsgCreateRelationshipTensor) (*MsgCreateRelationshipTensorResponse, error)
	// UpdateTensorScore defines the UpdateTensorScore RPC.
	UpdateTensorScore(context.Context, *MsgUpdateTensorScore) (*MsgUpdateTensorScoreResponse, error)
	// AddTensorWitness defines the AddTensorWitness RPC.
	AddTensorWitness(context.Context, *MsgAddTensorWitness) (*MsgAddTensorWitnessResponse, error)
}

// UnimplementedMsgServer can be embedded to have forward compatible implementations.
type UnimplementedMsgServer struct {
}

func (*UnimplementedMsgServer) UpdateParams(ctx context.Context, req *MsgUpdateParams) (*MsgUpdateParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateParams not implemented")
}
func (*UnimplementedMsgServer) CreateRelationshipTensor(ctx context.Context, req *MsgCreateRelationshipTensor) (*MsgCreateRelationshipTensorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRelationshipTensor not implemented")
}
func (*UnimplementedMsgServer) UpdateTensorScore(ctx context.Context, req *MsgUpdateTensorScore) (*MsgUpdateTensorScoreResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTensorScore not implemented")
}
func (*UnimplementedMsgServer) AddTensorWitness(ctx context.Context, req *MsgAddTensorWitness) (*MsgAddTensorWitnessResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddTensorWitness not implemented")
}

func RegisterMsgServer(s grpc1.Server, srv MsgServer) {
	s.RegisterService(&_Msg_serviceDesc, srv)
}

func _Msg_UpdateParams_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUpdateParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UpdateParams(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/racecarweb.trusttensor.v1.Msg/UpdateParams",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UpdateParams(ctx, req.(*MsgUpdateParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_CreateRelationshipTensor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgCreateRelationshipTensor)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).CreateRelationshipTensor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/racecarweb.trusttensor.v1.Msg/CreateRelationshipTensor",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).CreateRelationshipTensor(ctx, req.(*MsgCreateRelationshipTensor))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_UpdateTensorScore_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUpdateTensorScore)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UpdateTensorScore(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/racecarweb.trusttensor.v1.Msg/UpdateTensorScore",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UpdateTensorScore(ctx, req.(*MsgUpdateTensorScore))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_AddTensorWitness_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgAddTensorWitness)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).AddTensorWitness(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/racecarweb.trusttensor.v1.Msg/AddTensorWitness",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).AddTensorWitness(ctx, req.(*MsgAddTensorWitness))
	}
	return interceptor(ctx, in, info, handler)
}

var Msg_serviceDesc = _Msg_serviceDesc
var _Msg_serviceDesc = grpc.ServiceDesc{
	ServiceName: "racecarweb.trusttensor.v1.Msg",
	HandlerType: (*MsgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UpdateParams",
			Handler:    _Msg_UpdateParams_Handler,
		},
		{
			MethodName: "CreateRelationshipTensor",
			Handler:    _Msg_CreateRelationshipTensor_Handler,
		},
		{
			MethodName: "UpdateTensorScore",
			Handler:    _Msg_UpdateTensorScore_Handler,
		},
		{
			MethodName: "AddTensorWitness",
			Handler:    _Msg_AddTensorWitness_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "racecarweb/trusttensor/v1/tx.proto",
}

func (m *MsgUpdateParams) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateParams) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateParams) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.Authority) > 0 {
		i -= len(m.Authority)
		copy(dAtA[i:], m.Authority)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Authority)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgUpdateParamsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateParamsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateParamsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgCreateRelationshipTensor) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCreateRelationshipTensor) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCreateRelationshipTensor) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Context) > 0 {
		i -= len(m.Context)
		copy(dAtA[i:], m.Context)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Context)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.TensorType) > 0 {
		i -= len(m.TensorType)
		copy(dAtA[i:], m.TensorType)
		i = encodeVarintTx(dAtA, i, uint64(len(m.TensorType)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.LctId) > 0 {
		i -= len(m.LctId)
		copy(dAtA[i:], m.LctId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.LctId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgCreateRelationshipTensorResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCreateRelationshipTensorResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCreateRelationshipTensorResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.TensorId) > 0 {
		i -= len(m.TensorId)
		copy(dAtA[i:], m.TensorId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.TensorId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgUpdateTensorScore) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateTensorScore) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateTensorScore) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.WitnessData) > 0 {
		i -= len(m.WitnessData)
		copy(dAtA[i:], m.WitnessData)
		i = encodeVarintTx(dAtA, i, uint64(len(m.WitnessData)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Context) > 0 {
		i -= len(m.Context)
		copy(dAtA[i:], m.Context)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Context)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Value) > 0 {
		i -= len(m.Value)
		copy(dAtA[i:], m.Value)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Value)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Dimension) > 0 {
		i -= len(m.Dimension)
		copy(dAtA[i:], m.Dimension)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Dimension)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.TensorId) > 0 {
		i -= len(m.TensorId)
		copy(dAtA[i:], m.TensorId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.TensorId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgUpdateTensorScoreResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateTensorScoreResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateTensorScoreResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgAddTensorWitness) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgAddTensorWitness) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgAddTensorWitness) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.EvidenceHash) > 0 {
		i -= len(m.EvidenceHash)
		copy(dAtA[i:], m.EvidenceHash)
		i = encodeVarintTx(dAtA, i, uint64(len(m.EvidenceHash)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Confidence) > 0 {
		i -= len(m.Confidence)
		copy(dAtA[i:], m.Confidence)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Confidence)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.WitnessLct) > 0 {
		i -= len(m.WitnessLct)
		copy(dAtA[i:], m.WitnessLct)
		i = encodeVarintTx(dAtA, i, uint64(len(m.WitnessLct)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Dimension) > 0 {
		i -= len(m.Dimension)
		copy(dAtA[i:], m.Dimension)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Dimension)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.TensorId) > 0 {
		i -= len(m.TensorId)
		copy(dAtA[i:], m.TensorId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.TensorId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgAddTensorWitnessResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgAddTensorWitnessResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgAddTensorWitnessResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func encodeVarintTx(dAtA []byte, offset int, v uint64) int {
	offset -= sovTx(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MsgUpdateParams) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Authority)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = m.Params.Size()
	n += 1 + l + sovTx(uint64(l))
	return n
}

func (m *MsgUpdateParamsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgCreateRelationshipTensor) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.LctId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.TensorType)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Context)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgCreateRelationshipTensorResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.TensorId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgUpdateTensorScore) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.TensorId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Dimension)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Value)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Context)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.WitnessData)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgUpdateTensorScoreResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgAddTensorWitness) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.TensorId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Dimension)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.WitnessLct)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Confidence)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.EvidenceHash)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgAddTensorWitnessResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func sovTx(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTx(x uint64) (n int) {
	return sovTx(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MsgUpdateParams) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateParams: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateParams: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Authority", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Authority = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateParamsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateParamsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateParamsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgCreateRelationshipTensor) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCreateRelationshipTensor: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCreateRelationshipTensor: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LctId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LctId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TensorType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TensorType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Context", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Context = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgCreateRelationshipTensorResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCreateRelationshipTensorResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCreateRelationshipTensorResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TensorId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TensorId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateTensorScore) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateTensorScore: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateTensorScore: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TensorId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TensorId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dimension", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Dimension = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Value = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Context", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Context = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WitnessData", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.WitnessData = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateTensorScoreResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateTensorScoreResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateTensorScoreResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgAddTensorWitness) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgAddTensorWitness: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgAddTensorWitness: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TensorId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TensorId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dimension", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Dimension = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WitnessLct", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.WitnessLct = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Confidence", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Confidence = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EvidenceHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EvidenceHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgAddTensorWitnessResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgAddTensorWitnessResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgAddTensorWitnessResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTx(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTx
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTx
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTx
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTx
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTx        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTx          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTx = fmt.Errorf("proto: unexpected end of group")
)
