// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: racecarweb/trusttensor/v1/value_tensor.proto

package types

import (
	fmt "fmt"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// ValueTensor defines the ValueTensor message.
type ValueTensor struct {
	TensorId       string `protobuf:"bytes,1,opt,name=tensor_id,json=tensorId,proto3" json:"tensor_id,omitempty"`
	LctId          string `protobuf:"bytes,2,opt,name=lct_id,json=lctId,proto3" json:"lct_id,omitempty"`
	OperationId    string `protobuf:"bytes,3,opt,name=operation_id,json=operationId,proto3" json:"operation_id,omitempty"`
	ValuationScore string `protobuf:"bytes,4,opt,name=valuation_score,json=valuationScore,proto3" json:"valuation_score,omitempty"`
	VeracityScore  string `protobuf:"bytes,5,opt,name=veracity_score,json=veracityScore,proto3" json:"veracity_score,omitempty"`
	ValidityScore  string `protobuf:"bytes,6,opt,name=validity_score,json=validityScore,proto3" json:"validity_score,omitempty"`
	CreatedAt      int64  `protobuf:"varint,7,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
}

func (m *ValueTensor) Reset()         { *m = ValueTensor{} }
func (m *ValueTensor) String() string { return proto.CompactTextString(m) }
func (*ValueTensor) ProtoMessage()    {}
func (*ValueTensor) Descriptor() ([]byte, []int) {
	return fileDescriptor_f9ab57804e97912c, []int{0}
}
func (m *ValueTensor) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ValueTensor) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ValueTensor.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ValueTensor) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ValueTensor.Merge(m, src)
}
func (m *ValueTensor) XXX_Size() int {
	return m.Size()
}
func (m *ValueTensor) XXX_DiscardUnknown() {
	xxx_messageInfo_ValueTensor.DiscardUnknown(m)
}

var xxx_messageInfo_ValueTensor proto.InternalMessageInfo

func (m *ValueTensor) GetTensorId() string {
	if m != nil {
		return m.TensorId
	}
	return ""
}

func (m *ValueTensor) GetLctId() string {
	if m != nil {
		return m.LctId
	}
	return ""
}

func (m *ValueTensor) GetOperationId() string {
	if m != nil {
		return m.OperationId
	}
	return ""
}

func (m *ValueTensor) GetValuationScore() string {
	if m != nil {
		return m.ValuationScore
	}
	return ""
}

func (m *ValueTensor) GetVeracityScore() string {
	if m != nil {
		return m.VeracityScore
	}
	return ""
}

func (m *ValueTensor) GetValidityScore() string {
	if m != nil {
		return m.ValidityScore
	}
	return ""
}

func (m *ValueTensor) GetCreatedAt() int64 {
	if m != nil {
		return m.CreatedAt
	}
	return 0
}

func init() {
	proto.RegisterType((*ValueTensor)(nil), "racecarweb.trusttensor.v1.ValueTensor")
}

func init() {
	proto.RegisterFile("racecarweb/trusttensor/v1/value_tensor.proto", fileDescriptor_f9ab57804e97912c)
}

var fileDescriptor_f9ab57804e97912c = []byte{
	// 277 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x54, 0x90, 0xb1, 0x4e, 0xf3, 0x30,
	0x14, 0x46, 0xe3, 0xbf, 0x7f, 0x03, 0x71, 0xa1, 0x48, 0x96, 0x90, 0x82, 0x10, 0xa6, 0x20, 0x21,
	0x3a, 0x40, 0xa2, 0x8a, 0x89, 0x11, 0xb6, 0xac, 0x05, 0x31, 0xb0, 0x44, 0xae, 0x7d, 0x87, 0x48,
	0x51, 0x1d, 0x39, 0xb7, 0x81, 0xbe, 0x05, 0x8f, 0xc5, 0xd8, 0x91, 0x11, 0x25, 0x6f, 0xc1, 0x84,
	0xec, 0x84, 0x06, 0x46, 0x9f, 0x73, 0x2c, 0x5d, 0x7d, 0xf4, 0xca, 0x08, 0x09, 0x52, 0x98, 0x17,
	0x58, 0xc4, 0x68, 0x56, 0x25, 0x22, 0x2c, 0x4b, 0x6d, 0xe2, 0x6a, 0x16, 0x57, 0x22, 0x5f, 0x41,
	0xda, 0xbe, 0xa3, 0xc2, 0x68, 0xd4, 0xec, 0xa8, 0xaf, 0xa3, 0x5f, 0x75, 0x54, 0xcd, 0xce, 0xbf,
	0x08, 0x1d, 0x3d, 0xd9, 0x1f, 0x8f, 0x0e, 0xb1, 0x63, 0x1a, 0xb4, 0x32, 0xcd, 0x54, 0x48, 0x26,
	0x64, 0x1a, 0xcc, 0x77, 0x5b, 0x90, 0x28, 0x76, 0x48, 0xfd, 0x5c, 0xa2, 0x35, 0xff, 0x9c, 0x19,
	0xe6, 0x12, 0x13, 0xc5, 0xce, 0xe8, 0x9e, 0x2e, 0xc0, 0x08, 0xcc, 0xf4, 0xd2, 0xca, 0x81, 0x93,
	0xa3, 0x2d, 0x4b, 0x14, 0xbb, 0xa4, 0x07, 0xf6, 0xae, 0x36, 0x29, 0xa5, 0x36, 0x10, 0xfe, 0x77,
	0xd5, 0x78, 0x8b, 0x1f, 0x2c, 0x65, 0x17, 0x74, 0x5c, 0x81, 0x11, 0x32, 0xc3, 0x75, 0xd7, 0x0d,
	0x5d, 0xb7, 0xff, 0x43, 0xfb, 0x4c, 0xe4, 0x99, 0xea, 0x33, 0xbf, 0xcb, 0x3a, 0xda, 0x66, 0x27,
	0x94, 0x4a, 0x03, 0x02, 0x41, 0xa5, 0x02, 0xc3, 0x9d, 0x09, 0x99, 0x0e, 0xe6, 0x41, 0x47, 0xee,
	0xf0, 0xfe, 0xf6, 0xbd, 0xe6, 0x64, 0x53, 0x73, 0xf2, 0x59, 0x73, 0xf2, 0xd6, 0x70, 0x6f, 0xd3,
	0x70, 0xef, 0xa3, 0xe1, 0xde, 0xf3, 0x69, 0xb7, 0xd8, 0xb5, 0x1d, 0xf8, 0xf5, 0xcf, 0xc4, 0xb8,
	0x2e, 0xa0, 0x5c, 0xf8, 0x6e, 0xd9, 0x9b, 0xef, 0x00, 0x00, 0x00, 0xff, 0xff, 0xfa, 0xdd, 0xa7,
	0xfd, 0x89, 0x01, 0x00, 0x00,
}

func (m *ValueTensor) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ValueTensor) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ValueTensor) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.CreatedAt != 0 {
		i = encodeVarintValueTensor(dAtA, i, uint64(m.CreatedAt))
		i--
		dAtA[i] = 0x38
	}
	if len(m.ValidityScore) > 0 {
		i -= len(m.ValidityScore)
		copy(dAtA[i:], m.ValidityScore)
		i = encodeVarintValueTensor(dAtA, i, uint64(len(m.ValidityScore)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.VeracityScore) > 0 {
		i -= len(m.VeracityScore)
		copy(dAtA[i:], m.VeracityScore)
		i = encodeVarintValueTensor(dAtA, i, uint64(len(m.VeracityScore)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.ValuationScore) > 0 {
		i -= len(m.ValuationScore)
		copy(dAtA[i:], m.ValuationScore)
		i = encodeVarintValueTensor(dAtA, i, uint64(len(m.ValuationScore)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.OperationId) > 0 {
		i -= len(m.OperationId)
		copy(dAtA[i:], m.OperationId)
		i = encodeVarintValueTensor(dAtA, i, uint64(len(m.OperationId)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.LctId) > 0 {
		i -= len(m.LctId)
		copy(dAtA[i:], m.LctId)
		i = encodeVarintValueTensor(dAtA, i, uint64(len(m.LctId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.TensorId) > 0 {
		i -= len(m.TensorId)
		copy(dAtA[i:], m.TensorId)
		i = encodeVarintValueTensor(dAtA, i, uint64(len(m.TensorId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintValueTensor(dAtA []byte, offset int, v uint64) int {
	offset -= sovValueTensor(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *ValueTensor) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.TensorId)
	if l > 0 {
		n += 1 + l + sovValueTensor(uint64(l))
	}
	l = len(m.LctId)
	if l > 0 {
		n += 1 + l + sovValueTensor(uint64(l))
	}
	l = len(m.OperationId)
	if l > 0 {
		n += 1 + l + sovValueTensor(uint64(l))
	}
	l = len(m.ValuationScore)
	if l > 0 {
		n += 1 + l + sovValueTensor(uint64(l))
	}
	l = len(m.VeracityScore)
	if l > 0 {
		n += 1 + l + sovValueTensor(uint64(l))
	}
	l = len(m.ValidityScore)
	if l > 0 {
		n += 1 + l + sovValueTensor(uint64(l))
	}
	if m.CreatedAt != 0 {
		n += 1 + sovValueTensor(uint64(m.CreatedAt))
	}
	return n
}

func sovValueTensor(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozValueTensor(x uint64) (n int) {
	return sovValueTensor(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ValueTensor) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowValueTensor
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ValueTensor: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ValueTensor: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TensorId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValueTensor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthValueTensor
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthValueTensor
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TensorId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LctId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValueTensor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthValueTensor
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthValueTensor
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LctId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OperationId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValueTensor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthValueTensor
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthValueTensor
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OperationId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValuationScore", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValueTensor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthValueTensor
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthValueTensor
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ValuationScore = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VeracityScore", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValueTensor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthValueTensor
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthValueTensor
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VeracityScore = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValidityScore", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValueTensor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthValueTensor
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthValueTensor
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ValidityScore = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAt", wireType)
			}
			m.CreatedAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValueTensor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CreatedAt |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipValueTensor(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthValueTensor
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipValueTensor(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowValueTensor
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowValueTensor
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowValueTensor
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthValueTensor
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupValueTensor
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthValueTensor
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthValueTensor        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowValueTensor          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupValueTensor = fmt.Errorf("proto: unexpected end of group")
)
