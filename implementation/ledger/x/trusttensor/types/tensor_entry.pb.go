// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: racecarweb/trusttensor/v1/tensor_entry.proto

package types

import (
	fmt "fmt"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// TensorEntry defines the TensorEntry message.
type TensorEntry struct {
	EntryId           string `protobuf:"bytes,1,opt,name=entry_id,json=entryId,proto3" json:"entry_id,omitempty"`
	TensorId          string `protobuf:"bytes,2,opt,name=tensor_id,json=tensorId,proto3" json:"tensor_id,omitempty"`
	Dimension         string `protobuf:"bytes,3,opt,name=dimension,proto3" json:"dimension,omitempty"`
	EntryType         string `protobuf:"bytes,4,opt,name=entry_type,json=entryType,proto3" json:"entry_type,omitempty"`
	ScoreValue        string `protobuf:"bytes,5,opt,name=score_value,json=scoreValue,proto3" json:"score_value,omitempty"`
	WitnessChain      string `protobuf:"bytes,6,opt,name=witness_chain,json=witnessChain,proto3" json:"witness_chain,omitempty"`
	WitnessConfidence string `protobuf:"bytes,7,opt,name=witness_confidence,json=witnessConfidence,proto3" json:"witness_confidence,omitempty"`
	Timestamp         int64  `protobuf:"varint,8,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
}

func (m *TensorEntry) Reset()         { *m = TensorEntry{} }
func (m *TensorEntry) String() string { return proto.CompactTextString(m) }
func (*TensorEntry) ProtoMessage()    {}
func (*TensorEntry) Descriptor() ([]byte, []int) {
	return fileDescriptor_0f241719d1668f50, []int{0}
}
func (m *TensorEntry) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TensorEntry) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TensorEntry.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TensorEntry) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TensorEntry.Merge(m, src)
}
func (m *TensorEntry) XXX_Size() int {
	return m.Size()
}
func (m *TensorEntry) XXX_DiscardUnknown() {
	xxx_messageInfo_TensorEntry.DiscardUnknown(m)
}

var xxx_messageInfo_TensorEntry proto.InternalMessageInfo

func (m *TensorEntry) GetEntryId() string {
	if m != nil {
		return m.EntryId
	}
	return ""
}

func (m *TensorEntry) GetTensorId() string {
	if m != nil {
		return m.TensorId
	}
	return ""
}

func (m *TensorEntry) GetDimension() string {
	if m != nil {
		return m.Dimension
	}
	return ""
}

func (m *TensorEntry) GetEntryType() string {
	if m != nil {
		return m.EntryType
	}
	return ""
}

func (m *TensorEntry) GetScoreValue() string {
	if m != nil {
		return m.ScoreValue
	}
	return ""
}

func (m *TensorEntry) GetWitnessChain() string {
	if m != nil {
		return m.WitnessChain
	}
	return ""
}

func (m *TensorEntry) GetWitnessConfidence() string {
	if m != nil {
		return m.WitnessConfidence
	}
	return ""
}

func (m *TensorEntry) GetTimestamp() int64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func init() {
	proto.RegisterType((*TensorEntry)(nil), "racecarweb.trusttensor.v1.TensorEntry")
}

func init() {
	proto.RegisterFile("racecarweb/trusttensor/v1/tensor_entry.proto", fileDescriptor_0f241719d1668f50)
}

var fileDescriptor_0f241719d1668f50 = []byte{
	// 299 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x54, 0x90, 0xbd, 0x4e, 0xf3, 0x30,
	0x14, 0x86, 0xeb, 0xf6, 0xfb, 0xfa, 0xe3, 0xc2, 0x80, 0x27, 0x57, 0x80, 0x5b, 0xc1, 0xd2, 0x81,
	0x36, 0xaa, 0x98, 0x58, 0x41, 0x0c, 0x5d, 0xab, 0x8a, 0x81, 0x25, 0x4a, 0xe3, 0x83, 0xb0, 0x44,
	0xec, 0xc8, 0x76, 0x53, 0x72, 0x17, 0x2c, 0xdc, 0x13, 0x63, 0x47, 0x46, 0x94, 0xdc, 0x08, 0xb2,
	0x13, 0x1a, 0xd8, 0x72, 0x9e, 0xf7, 0x39, 0x47, 0xf1, 0x8b, 0xaf, 0x74, 0x14, 0x43, 0x1c, 0xe9,
	0x1d, 0x6c, 0x02, 0xab, 0xb7, 0xc6, 0x5a, 0x90, 0x46, 0xe9, 0x20, 0x5b, 0x04, 0xd5, 0x57, 0x08,
	0xd2, 0xea, 0x7c, 0x9e, 0x6a, 0x65, 0x15, 0x19, 0x35, 0xf6, 0xfc, 0x97, 0x3d, 0xcf, 0x16, 0x17,
	0xef, 0x6d, 0x3c, 0x5c, 0xfb, 0xe9, 0xde, 0x2d, 0x90, 0x11, 0xee, 0xfb, 0xcd, 0x50, 0x70, 0x8a,
	0x26, 0x68, 0x3a, 0x58, 0xf5, 0xfc, 0xbc, 0xe4, 0xe4, 0x14, 0x0f, 0xea, 0xdb, 0x82, 0xd3, 0xb6,
	0xcf, 0xfa, 0x15, 0x58, 0x72, 0x72, 0x86, 0x07, 0x5c, 0x24, 0x20, 0x8d, 0x50, 0x92, 0x76, 0x7c,
	0xd8, 0x00, 0x72, 0x8e, 0x71, 0x75, 0xd5, 0xe6, 0x29, 0xd0, 0x7f, 0x55, 0xec, 0xc9, 0x3a, 0x4f,
	0x81, 0x8c, 0xf1, 0xd0, 0xc4, 0x4a, 0x43, 0x98, 0x45, 0x2f, 0x5b, 0xa0, 0xff, 0x7d, 0x8e, 0x3d,
	0x7a, 0x70, 0x84, 0x5c, 0xe2, 0xe3, 0x9d, 0xb0, 0x12, 0x8c, 0x09, 0xe3, 0xe7, 0x48, 0x48, 0xda,
	0xf5, 0xca, 0x51, 0x0d, 0xef, 0x1c, 0x23, 0x33, 0x4c, 0x0e, 0x92, 0x92, 0x4f, 0x82, 0x83, 0x8c,
	0x81, 0xf6, 0xbc, 0x79, 0xf2, 0x63, 0x1e, 0x02, 0xf7, 0xc7, 0x56, 0x24, 0x60, 0x6c, 0x94, 0xa4,
	0xb4, 0x3f, 0x41, 0xd3, 0xce, 0xaa, 0x01, 0xb7, 0x37, 0x1f, 0x05, 0x43, 0xfb, 0x82, 0xa1, 0xaf,
	0x82, 0xa1, 0xb7, 0x92, 0xb5, 0xf6, 0x25, 0x6b, 0x7d, 0x96, 0xac, 0xf5, 0x38, 0xae, 0xcb, 0x9c,
	0xb9, 0xee, 0x5f, 0xff, 0xb4, 0xef, 0x5e, 0x67, 0x36, 0x5d, 0x5f, 0xfa, 0xf5, 0x77, 0x00, 0x00,
	0x00, 0xff, 0xff, 0x29, 0x79, 0x5d, 0x2d, 0xa4, 0x01, 0x00, 0x00,
}

func (m *TensorEntry) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TensorEntry) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TensorEntry) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Timestamp != 0 {
		i = encodeVarintTensorEntry(dAtA, i, uint64(m.Timestamp))
		i--
		dAtA[i] = 0x40
	}
	if len(m.WitnessConfidence) > 0 {
		i -= len(m.WitnessConfidence)
		copy(dAtA[i:], m.WitnessConfidence)
		i = encodeVarintTensorEntry(dAtA, i, uint64(len(m.WitnessConfidence)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.WitnessChain) > 0 {
		i -= len(m.WitnessChain)
		copy(dAtA[i:], m.WitnessChain)
		i = encodeVarintTensorEntry(dAtA, i, uint64(len(m.WitnessChain)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.ScoreValue) > 0 {
		i -= len(m.ScoreValue)
		copy(dAtA[i:], m.ScoreValue)
		i = encodeVarintTensorEntry(dAtA, i, uint64(len(m.ScoreValue)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.EntryType) > 0 {
		i -= len(m.EntryType)
		copy(dAtA[i:], m.EntryType)
		i = encodeVarintTensorEntry(dAtA, i, uint64(len(m.EntryType)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Dimension) > 0 {
		i -= len(m.Dimension)
		copy(dAtA[i:], m.Dimension)
		i = encodeVarintTensorEntry(dAtA, i, uint64(len(m.Dimension)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.TensorId) > 0 {
		i -= len(m.TensorId)
		copy(dAtA[i:], m.TensorId)
		i = encodeVarintTensorEntry(dAtA, i, uint64(len(m.TensorId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.EntryId) > 0 {
		i -= len(m.EntryId)
		copy(dAtA[i:], m.EntryId)
		i = encodeVarintTensorEntry(dAtA, i, uint64(len(m.EntryId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintTensorEntry(dAtA []byte, offset int, v uint64) int {
	offset -= sovTensorEntry(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *TensorEntry) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.EntryId)
	if l > 0 {
		n += 1 + l + sovTensorEntry(uint64(l))
	}
	l = len(m.TensorId)
	if l > 0 {
		n += 1 + l + sovTensorEntry(uint64(l))
	}
	l = len(m.Dimension)
	if l > 0 {
		n += 1 + l + sovTensorEntry(uint64(l))
	}
	l = len(m.EntryType)
	if l > 0 {
		n += 1 + l + sovTensorEntry(uint64(l))
	}
	l = len(m.ScoreValue)
	if l > 0 {
		n += 1 + l + sovTensorEntry(uint64(l))
	}
	l = len(m.WitnessChain)
	if l > 0 {
		n += 1 + l + sovTensorEntry(uint64(l))
	}
	l = len(m.WitnessConfidence)
	if l > 0 {
		n += 1 + l + sovTensorEntry(uint64(l))
	}
	if m.Timestamp != 0 {
		n += 1 + sovTensorEntry(uint64(m.Timestamp))
	}
	return n
}

func sovTensorEntry(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTensorEntry(x uint64) (n int) {
	return sovTensorEntry(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *TensorEntry) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTensorEntry
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TensorEntry: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TensorEntry: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EntryId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTensorEntry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTensorEntry
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTensorEntry
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EntryId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TensorId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTensorEntry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTensorEntry
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTensorEntry
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TensorId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dimension", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTensorEntry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTensorEntry
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTensorEntry
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Dimension = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EntryType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTensorEntry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTensorEntry
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTensorEntry
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EntryType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ScoreValue", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTensorEntry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTensorEntry
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTensorEntry
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ScoreValue = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WitnessChain", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTensorEntry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTensorEntry
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTensorEntry
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.WitnessChain = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WitnessConfidence", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTensorEntry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTensorEntry
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTensorEntry
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.WitnessConfidence = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timestamp", wireType)
			}
			m.Timestamp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTensorEntry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Timestamp |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTensorEntry(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTensorEntry
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTensorEntry(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTensorEntry
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTensorEntry
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTensorEntry
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTensorEntry
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTensorEntry
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTensorEntry
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTensorEntry        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTensorEntry          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTensorEntry = fmt.Errorf("proto: unexpected end of group")
)
