// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: racecarweb/lctmanager/v1/component_relationship.proto

package types

import (
	fmt "fmt"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// ComponentRelationship defines the ComponentRelationship message.
type ComponentRelationship struct {
	RelationshipId   string `protobuf:"bytes,1,opt,name=relationship_id,json=relationshipId,proto3" json:"relationship_id,omitempty"`
	ComponentId      string `protobuf:"bytes,2,opt,name=component_id,json=componentId,proto3" json:"component_id,omitempty"`
	RelatedLcts      string `protobuf:"bytes,3,opt,name=related_lcts,json=relatedLcts,proto3" json:"related_lcts,omitempty"`
	RelationshipType string `protobuf:"bytes,4,opt,name=relationship_type,json=relationshipType,proto3" json:"relationship_type,omitempty"`
	Status           string `protobuf:"bytes,5,opt,name=status,proto3" json:"status,omitempty"`
}

func (m *ComponentRelationship) Reset()         { *m = ComponentRelationship{} }
func (m *ComponentRelationship) String() string { return proto.CompactTextString(m) }
func (*ComponentRelationship) ProtoMessage()    {}
func (*ComponentRelationship) Descriptor() ([]byte, []int) {
	return fileDescriptor_51d617ef76b1d447, []int{0}
}
func (m *ComponentRelationship) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ComponentRelationship) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ComponentRelationship.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ComponentRelationship) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ComponentRelationship.Merge(m, src)
}
func (m *ComponentRelationship) XXX_Size() int {
	return m.Size()
}
func (m *ComponentRelationship) XXX_DiscardUnknown() {
	xxx_messageInfo_ComponentRelationship.DiscardUnknown(m)
}

var xxx_messageInfo_ComponentRelationship proto.InternalMessageInfo

func (m *ComponentRelationship) GetRelationshipId() string {
	if m != nil {
		return m.RelationshipId
	}
	return ""
}

func (m *ComponentRelationship) GetComponentId() string {
	if m != nil {
		return m.ComponentId
	}
	return ""
}

func (m *ComponentRelationship) GetRelatedLcts() string {
	if m != nil {
		return m.RelatedLcts
	}
	return ""
}

func (m *ComponentRelationship) GetRelationshipType() string {
	if m != nil {
		return m.RelationshipType
	}
	return ""
}

func (m *ComponentRelationship) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

func init() {
	proto.RegisterType((*ComponentRelationship)(nil), "racecarweb.lctmanager.v1.ComponentRelationship")
}

func init() {
	proto.RegisterFile("racecarweb/lctmanager/v1/component_relationship.proto", fileDescriptor_51d617ef76b1d447)
}

var fileDescriptor_51d617ef76b1d447 = []byte{
	// 242 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x32, 0x2d, 0x4a, 0x4c, 0x4e,
	0x4d, 0x4e, 0x2c, 0x2a, 0x4f, 0x4d, 0xd2, 0xcf, 0x49, 0x2e, 0xc9, 0x4d, 0xcc, 0x4b, 0x4c, 0x4f,
	0x2d, 0xd2, 0x2f, 0x33, 0xd4, 0x4f, 0xce, 0xcf, 0x2d, 0xc8, 0xcf, 0x4b, 0xcd, 0x2b, 0x89, 0x2f,
	0x4a, 0xcd, 0x49, 0x2c, 0xc9, 0xcc, 0xcf, 0x2b, 0xce, 0xc8, 0x2c, 0xd0, 0x2b, 0x28, 0xca, 0x2f,
	0xc9, 0x17, 0x92, 0x40, 0x68, 0xd3, 0x43, 0x68, 0xd3, 0x2b, 0x33, 0x54, 0x3a, 0xcd, 0xc8, 0x25,
	0xea, 0x0c, 0xd3, 0x1a, 0x84, 0xa4, 0x53, 0x48, 0x9d, 0x8b, 0x1f, 0xd9, 0xa4, 0xf8, 0xcc, 0x14,
	0x09, 0x46, 0x05, 0x46, 0x0d, 0xce, 0x20, 0x3e, 0x64, 0x61, 0xcf, 0x14, 0x21, 0x45, 0x2e, 0x1e,
	0x84, 0xe5, 0x99, 0x29, 0x12, 0x4c, 0x60, 0x55, 0xdc, 0x70, 0x31, 0x88, 0x12, 0xb0, 0xa6, 0xd4,
	0x94, 0xf8, 0x9c, 0xe4, 0x92, 0x62, 0x09, 0x66, 0x88, 0x12, 0xa8, 0x98, 0x4f, 0x72, 0x49, 0xb1,
	0x90, 0x36, 0x97, 0x20, 0x8a, 0x75, 0x25, 0x95, 0x05, 0xa9, 0x12, 0x2c, 0x60, 0x75, 0x02, 0xc8,
	0x12, 0x21, 0x95, 0x05, 0xa9, 0x42, 0x62, 0x5c, 0x6c, 0xc5, 0x25, 0x89, 0x25, 0xa5, 0xc5, 0x12,
	0xac, 0x60, 0x15, 0x50, 0x9e, 0x93, 0xc5, 0x89, 0x47, 0x72, 0x8c, 0x17, 0x1e, 0xc9, 0x31, 0x3e,
	0x78, 0x24, 0xc7, 0x38, 0xe1, 0xb1, 0x1c, 0xc3, 0x85, 0xc7, 0x72, 0x0c, 0x37, 0x1e, 0xcb, 0x31,
	0x44, 0xc9, 0x41, 0x43, 0x40, 0x17, 0x14, 0x72, 0x15, 0xc8, 0x61, 0x07, 0xb2, 0xa8, 0x38, 0x89,
	0x0d, 0x1c, 0x50, 0xc6, 0x80, 0x00, 0x00, 0x00, 0xff, 0xff, 0x86, 0xd7, 0x29, 0x68, 0x61, 0x01,
	0x00, 0x00,
}

func (m *ComponentRelationship) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ComponentRelationship) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ComponentRelationship) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Status) > 0 {
		i -= len(m.Status)
		copy(dAtA[i:], m.Status)
		i = encodeVarintComponentRelationship(dAtA, i, uint64(len(m.Status)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.RelationshipType) > 0 {
		i -= len(m.RelationshipType)
		copy(dAtA[i:], m.RelationshipType)
		i = encodeVarintComponentRelationship(dAtA, i, uint64(len(m.RelationshipType)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.RelatedLcts) > 0 {
		i -= len(m.RelatedLcts)
		copy(dAtA[i:], m.RelatedLcts)
		i = encodeVarintComponentRelationship(dAtA, i, uint64(len(m.RelatedLcts)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ComponentId) > 0 {
		i -= len(m.ComponentId)
		copy(dAtA[i:], m.ComponentId)
		i = encodeVarintComponentRelationship(dAtA, i, uint64(len(m.ComponentId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.RelationshipId) > 0 {
		i -= len(m.RelationshipId)
		copy(dAtA[i:], m.RelationshipId)
		i = encodeVarintComponentRelationship(dAtA, i, uint64(len(m.RelationshipId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintComponentRelationship(dAtA []byte, offset int, v uint64) int {
	offset -= sovComponentRelationship(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *ComponentRelationship) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.RelationshipId)
	if l > 0 {
		n += 1 + l + sovComponentRelationship(uint64(l))
	}
	l = len(m.ComponentId)
	if l > 0 {
		n += 1 + l + sovComponentRelationship(uint64(l))
	}
	l = len(m.RelatedLcts)
	if l > 0 {
		n += 1 + l + sovComponentRelationship(uint64(l))
	}
	l = len(m.RelationshipType)
	if l > 0 {
		n += 1 + l + sovComponentRelationship(uint64(l))
	}
	l = len(m.Status)
	if l > 0 {
		n += 1 + l + sovComponentRelationship(uint64(l))
	}
	return n
}

func sovComponentRelationship(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozComponentRelationship(x uint64) (n int) {
	return sovComponentRelationship(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ComponentRelationship) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowComponentRelationship
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ComponentRelationship: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ComponentRelationship: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RelationshipId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComponentRelationship
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthComponentRelationship
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthComponentRelationship
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RelationshipId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ComponentId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComponentRelationship
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthComponentRelationship
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthComponentRelationship
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ComponentId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RelatedLcts", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComponentRelationship
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthComponentRelationship
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthComponentRelationship
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RelatedLcts = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RelationshipType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComponentRelationship
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthComponentRelationship
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthComponentRelationship
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RelationshipType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComponentRelationship
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthComponentRelationship
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthComponentRelationship
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Status = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipComponentRelationship(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthComponentRelationship
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipComponentRelationship(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowComponentRelationship
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowComponentRelationship
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowComponentRelationship
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthComponentRelationship
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupComponentRelationship
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthComponentRelationship
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthComponentRelationship        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowComponentRelationship          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupComponentRelationship = fmt.Errorf("proto: unexpected end of group")
)
