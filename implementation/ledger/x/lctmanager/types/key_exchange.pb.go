// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: racecarweb/lctmanager/v1/key_exchange.proto

package types

import (
	fmt "fmt"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// LCTMediatedPairing defines the LCT-mediated pairing process
type LCTMediatedPairing struct {
	PairingId      string `protobuf:"bytes,1,opt,name=pairing_id,json=pairingId,proto3" json:"pairing_id,omitempty"`
	InitiatorLctId string `protobuf:"bytes,2,opt,name=initiator_lct_id,json=initiatorLctId,proto3" json:"initiator_lct_id,omitempty"`
	TargetLctId    string `protobuf:"bytes,3,opt,name=target_lct_id,json=targetLctId,proto3" json:"target_lct_id,omitempty"`
	Context        string `protobuf:"bytes,4,opt,name=context,proto3" json:"context,omitempty"`
	ProxyLctId     string `protobuf:"bytes,5,opt,name=proxy_lct_id,json=proxyLctId,proto3" json:"proxy_lct_id,omitempty"`
	Status         string `protobuf:"bytes,6,opt,name=status,proto3" json:"status,omitempty"`
	CreatedAt      int64  `protobuf:"varint,7,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	ExpiresAt      int64  `protobuf:"varint,8,opt,name=expires_at,json=expiresAt,proto3" json:"expires_at,omitempty"`
}

func (m *LCTMediatedPairing) Reset()         { *m = LCTMediatedPairing{} }
func (m *LCTMediatedPairing) String() string { return proto.CompactTextString(m) }
func (*LCTMediatedPairing) ProtoMessage()    {}
func (*LCTMediatedPairing) Descriptor() ([]byte, []int) {
	return fileDescriptor_6f7cee81d1d9a17a, []int{0}
}
func (m *LCTMediatedPairing) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LCTMediatedPairing) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LCTMediatedPairing.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LCTMediatedPairing) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LCTMediatedPairing.Merge(m, src)
}
func (m *LCTMediatedPairing) XXX_Size() int {
	return m.Size()
}
func (m *LCTMediatedPairing) XXX_DiscardUnknown() {
	xxx_messageInfo_LCTMediatedPairing.DiscardUnknown(m)
}

var xxx_messageInfo_LCTMediatedPairing proto.InternalMessageInfo

func (m *LCTMediatedPairing) GetPairingId() string {
	if m != nil {
		return m.PairingId
	}
	return ""
}

func (m *LCTMediatedPairing) GetInitiatorLctId() string {
	if m != nil {
		return m.InitiatorLctId
	}
	return ""
}

func (m *LCTMediatedPairing) GetTargetLctId() string {
	if m != nil {
		return m.TargetLctId
	}
	return ""
}

func (m *LCTMediatedPairing) GetContext() string {
	if m != nil {
		return m.Context
	}
	return ""
}

func (m *LCTMediatedPairing) GetProxyLctId() string {
	if m != nil {
		return m.ProxyLctId
	}
	return ""
}

func (m *LCTMediatedPairing) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

func (m *LCTMediatedPairing) GetCreatedAt() int64 {
	if m != nil {
		return m.CreatedAt
	}
	return 0
}

func (m *LCTMediatedPairing) GetExpiresAt() int64 {
	if m != nil {
		return m.ExpiresAt
	}
	return 0
}

// SessionKeyExchange defines the session key exchange for paired devices
type SessionKeyExchange struct {
	PairingId                    string `protobuf:"bytes,1,opt,name=pairing_id,json=pairingId,proto3" json:"pairing_id,omitempty"`
	LctRelationshipId            string `protobuf:"bytes,2,opt,name=lct_relationship_id,json=lctRelationshipId,proto3" json:"lct_relationship_id,omitempty"`
	EncryptedSessionKeyInitiator []byte `protobuf:"bytes,3,opt,name=encrypted_session_key_initiator,json=encryptedSessionKeyInitiator,proto3" json:"encrypted_session_key_initiator,omitempty"`
	EncryptedSessionKeyTarget    []byte `protobuf:"bytes,4,opt,name=encrypted_session_key_target,json=encryptedSessionKeyTarget,proto3" json:"encrypted_session_key_target,omitempty"`
	HashedCombinedSessionKey     []byte `protobuf:"bytes,5,opt,name=hashed_combined_session_key,json=hashedCombinedSessionKey,proto3" json:"hashed_combined_session_key,omitempty"`
	Status                       string `protobuf:"bytes,6,opt,name=status,proto3" json:"status,omitempty"`
	CreatedAt                    int64  `protobuf:"varint,7,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	LastUsed                     int64  `protobuf:"varint,8,opt,name=last_used,json=lastUsed,proto3" json:"last_used,omitempty"`
}

func (m *SessionKeyExchange) Reset()         { *m = SessionKeyExchange{} }
func (m *SessionKeyExchange) String() string { return proto.CompactTextString(m) }
func (*SessionKeyExchange) ProtoMessage()    {}
func (*SessionKeyExchange) Descriptor() ([]byte, []int) {
	return fileDescriptor_6f7cee81d1d9a17a, []int{1}
}
func (m *SessionKeyExchange) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SessionKeyExchange) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SessionKeyExchange.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SessionKeyExchange) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SessionKeyExchange.Merge(m, src)
}
func (m *SessionKeyExchange) XXX_Size() int {
	return m.Size()
}
func (m *SessionKeyExchange) XXX_DiscardUnknown() {
	xxx_messageInfo_SessionKeyExchange.DiscardUnknown(m)
}

var xxx_messageInfo_SessionKeyExchange proto.InternalMessageInfo

func (m *SessionKeyExchange) GetPairingId() string {
	if m != nil {
		return m.PairingId
	}
	return ""
}

func (m *SessionKeyExchange) GetLctRelationshipId() string {
	if m != nil {
		return m.LctRelationshipId
	}
	return ""
}

func (m *SessionKeyExchange) GetEncryptedSessionKeyInitiator() []byte {
	if m != nil {
		return m.EncryptedSessionKeyInitiator
	}
	return nil
}

func (m *SessionKeyExchange) GetEncryptedSessionKeyTarget() []byte {
	if m != nil {
		return m.EncryptedSessionKeyTarget
	}
	return nil
}

func (m *SessionKeyExchange) GetHashedCombinedSessionKey() []byte {
	if m != nil {
		return m.HashedCombinedSessionKey
	}
	return nil
}

func (m *SessionKeyExchange) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

func (m *SessionKeyExchange) GetCreatedAt() int64 {
	if m != nil {
		return m.CreatedAt
	}
	return 0
}

func (m *SessionKeyExchange) GetLastUsed() int64 {
	if m != nil {
		return m.LastUsed
	}
	return 0
}

// PairingChallenge defines a challenge for LCT-mediated authentication
type PairingChallenge struct {
	ChallengeId      string `protobuf:"bytes,1,opt,name=challenge_id,json=challengeId,proto3" json:"challenge_id,omitempty"`
	PairingId        string `protobuf:"bytes,2,opt,name=pairing_id,json=pairingId,proto3" json:"pairing_id,omitempty"`
	ChallengeData    []byte `protobuf:"bytes,3,opt,name=challenge_data,json=challengeData,proto3" json:"challenge_data,omitempty"`
	ExpectedResponse []byte `protobuf:"bytes,4,opt,name=expected_response,json=expectedResponse,proto3" json:"expected_response,omitempty"`
	ExpiresAt        int64  `protobuf:"varint,5,opt,name=expires_at,json=expiresAt,proto3" json:"expires_at,omitempty"`
	Status           string `protobuf:"bytes,6,opt,name=status,proto3" json:"status,omitempty"`
}

func (m *PairingChallenge) Reset()         { *m = PairingChallenge{} }
func (m *PairingChallenge) String() string { return proto.CompactTextString(m) }
func (*PairingChallenge) ProtoMessage()    {}
func (*PairingChallenge) Descriptor() ([]byte, []int) {
	return fileDescriptor_6f7cee81d1d9a17a, []int{2}
}
func (m *PairingChallenge) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PairingChallenge) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PairingChallenge.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PairingChallenge) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PairingChallenge.Merge(m, src)
}
func (m *PairingChallenge) XXX_Size() int {
	return m.Size()
}
func (m *PairingChallenge) XXX_DiscardUnknown() {
	xxx_messageInfo_PairingChallenge.DiscardUnknown(m)
}

var xxx_messageInfo_PairingChallenge proto.InternalMessageInfo

func (m *PairingChallenge) GetChallengeId() string {
	if m != nil {
		return m.ChallengeId
	}
	return ""
}

func (m *PairingChallenge) GetPairingId() string {
	if m != nil {
		return m.PairingId
	}
	return ""
}

func (m *PairingChallenge) GetChallengeData() []byte {
	if m != nil {
		return m.ChallengeData
	}
	return nil
}

func (m *PairingChallenge) GetExpectedResponse() []byte {
	if m != nil {
		return m.ExpectedResponse
	}
	return nil
}

func (m *PairingChallenge) GetExpiresAt() int64 {
	if m != nil {
		return m.ExpiresAt
	}
	return 0
}

func (m *PairingChallenge) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

// PairingRequest defines a request to initiate LCT-mediated pairing
type PairingRequest struct {
	InitiatorLctId string `protobuf:"bytes,1,opt,name=initiator_lct_id,json=initiatorLctId,proto3" json:"initiator_lct_id,omitempty"`
	TargetLctId    string `protobuf:"bytes,2,opt,name=target_lct_id,json=targetLctId,proto3" json:"target_lct_id,omitempty"`
	Context        string `protobuf:"bytes,3,opt,name=context,proto3" json:"context,omitempty"`
	ProxyLctId     string `protobuf:"bytes,4,opt,name=proxy_lct_id,json=proxyLctId,proto3" json:"proxy_lct_id,omitempty"`
	ExpiresAt      int64  `protobuf:"varint,5,opt,name=expires_at,json=expiresAt,proto3" json:"expires_at,omitempty"`
}

func (m *PairingRequest) Reset()         { *m = PairingRequest{} }
func (m *PairingRequest) String() string { return proto.CompactTextString(m) }
func (*PairingRequest) ProtoMessage()    {}
func (*PairingRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_6f7cee81d1d9a17a, []int{3}
}
func (m *PairingRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PairingRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PairingRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PairingRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PairingRequest.Merge(m, src)
}
func (m *PairingRequest) XXX_Size() int {
	return m.Size()
}
func (m *PairingRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_PairingRequest.DiscardUnknown(m)
}

var xxx_messageInfo_PairingRequest proto.InternalMessageInfo

func (m *PairingRequest) GetInitiatorLctId() string {
	if m != nil {
		return m.InitiatorLctId
	}
	return ""
}

func (m *PairingRequest) GetTargetLctId() string {
	if m != nil {
		return m.TargetLctId
	}
	return ""
}

func (m *PairingRequest) GetContext() string {
	if m != nil {
		return m.Context
	}
	return ""
}

func (m *PairingRequest) GetProxyLctId() string {
	if m != nil {
		return m.ProxyLctId
	}
	return ""
}

func (m *PairingRequest) GetExpiresAt() int64 {
	if m != nil {
		return m.ExpiresAt
	}
	return 0
}

// PairingResponse defines the response to a pairing request
type PairingResponse struct {
	PairingId         string `protobuf:"bytes,1,opt,name=pairing_id,json=pairingId,proto3" json:"pairing_id,omitempty"`
	Status            string `protobuf:"bytes,2,opt,name=status,proto3" json:"status,omitempty"`
	ChallengeId       string `protobuf:"bytes,3,opt,name=challenge_id,json=challengeId,proto3" json:"challenge_id,omitempty"`
	ChallengeData     []byte `protobuf:"bytes,4,opt,name=challenge_data,json=challengeData,proto3" json:"challenge_data,omitempty"`
	LctRelationshipId string `protobuf:"bytes,5,opt,name=lct_relationship_id,json=lctRelationshipId,proto3" json:"lct_relationship_id,omitempty"`
	Error             string `protobuf:"bytes,6,opt,name=error,proto3" json:"error,omitempty"`
}

func (m *PairingResponse) Reset()         { *m = PairingResponse{} }
func (m *PairingResponse) String() string { return proto.CompactTextString(m) }
func (*PairingResponse) ProtoMessage()    {}
func (*PairingResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_6f7cee81d1d9a17a, []int{4}
}
func (m *PairingResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PairingResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PairingResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PairingResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PairingResponse.Merge(m, src)
}
func (m *PairingResponse) XXX_Size() int {
	return m.Size()
}
func (m *PairingResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_PairingResponse.DiscardUnknown(m)
}

var xxx_messageInfo_PairingResponse proto.InternalMessageInfo

func (m *PairingResponse) GetPairingId() string {
	if m != nil {
		return m.PairingId
	}
	return ""
}

func (m *PairingResponse) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

func (m *PairingResponse) GetChallengeId() string {
	if m != nil {
		return m.ChallengeId
	}
	return ""
}

func (m *PairingResponse) GetChallengeData() []byte {
	if m != nil {
		return m.ChallengeData
	}
	return nil
}

func (m *PairingResponse) GetLctRelationshipId() string {
	if m != nil {
		return m.LctRelationshipId
	}
	return ""
}

func (m *PairingResponse) GetError() string {
	if m != nil {
		return m.Error
	}
	return ""
}

// CompletePairingRequest defines the completion of LCT-mediated pairing
type CompletePairingRequest struct {
	PairingId         string `protobuf:"bytes,1,opt,name=pairing_id,json=pairingId,proto3" json:"pairing_id,omitempty"`
	InitiatorResponse string `protobuf:"bytes,2,opt,name=initiator_response,json=initiatorResponse,proto3" json:"initiator_response,omitempty"`
	TargetResponse    string `protobuf:"bytes,3,opt,name=target_response,json=targetResponse,proto3" json:"target_response,omitempty"`
	SessionKeyData    []byte `protobuf:"bytes,4,opt,name=session_key_data,json=sessionKeyData,proto3" json:"session_key_data,omitempty"`
}

func (m *CompletePairingRequest) Reset()         { *m = CompletePairingRequest{} }
func (m *CompletePairingRequest) String() string { return proto.CompactTextString(m) }
func (*CompletePairingRequest) ProtoMessage()    {}
func (*CompletePairingRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_6f7cee81d1d9a17a, []int{5}
}
func (m *CompletePairingRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CompletePairingRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CompletePairingRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CompletePairingRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CompletePairingRequest.Merge(m, src)
}
func (m *CompletePairingRequest) XXX_Size() int {
	return m.Size()
}
func (m *CompletePairingRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CompletePairingRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CompletePairingRequest proto.InternalMessageInfo

func (m *CompletePairingRequest) GetPairingId() string {
	if m != nil {
		return m.PairingId
	}
	return ""
}

func (m *CompletePairingRequest) GetInitiatorResponse() string {
	if m != nil {
		return m.InitiatorResponse
	}
	return ""
}

func (m *CompletePairingRequest) GetTargetResponse() string {
	if m != nil {
		return m.TargetResponse
	}
	return ""
}

func (m *CompletePairingRequest) GetSessionKeyData() []byte {
	if m != nil {
		return m.SessionKeyData
	}
	return nil
}

// CompletePairingResponse defines the response to pairing completion
type CompletePairingResponse struct {
	PairingId                    string `protobuf:"bytes,1,opt,name=pairing_id,json=pairingId,proto3" json:"pairing_id,omitempty"`
	Status                       string `protobuf:"bytes,2,opt,name=status,proto3" json:"status,omitempty"`
	LctRelationshipId            string `protobuf:"bytes,3,opt,name=lct_relationship_id,json=lctRelationshipId,proto3" json:"lct_relationship_id,omitempty"`
	EncryptedSessionKeyInitiator []byte `protobuf:"bytes,4,opt,name=encrypted_session_key_initiator,json=encryptedSessionKeyInitiator,proto3" json:"encrypted_session_key_initiator,omitempty"`
	EncryptedSessionKeyTarget    []byte `protobuf:"bytes,5,opt,name=encrypted_session_key_target,json=encryptedSessionKeyTarget,proto3" json:"encrypted_session_key_target,omitempty"`
	HashedCombinedSessionKey     []byte `protobuf:"bytes,6,opt,name=hashed_combined_session_key,json=hashedCombinedSessionKey,proto3" json:"hashed_combined_session_key,omitempty"`
	TrustScore                   string `protobuf:"bytes,7,opt,name=trust_score,json=trustScore,proto3" json:"trust_score,omitempty"`
	Error                        string `protobuf:"bytes,8,opt,name=error,proto3" json:"error,omitempty"`
}

func (m *CompletePairingResponse) Reset()         { *m = CompletePairingResponse{} }
func (m *CompletePairingResponse) String() string { return proto.CompactTextString(m) }
func (*CompletePairingResponse) ProtoMessage()    {}
func (*CompletePairingResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_6f7cee81d1d9a17a, []int{6}
}
func (m *CompletePairingResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CompletePairingResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CompletePairingResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CompletePairingResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CompletePairingResponse.Merge(m, src)
}
func (m *CompletePairingResponse) XXX_Size() int {
	return m.Size()
}
func (m *CompletePairingResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_CompletePairingResponse.DiscardUnknown(m)
}

var xxx_messageInfo_CompletePairingResponse proto.InternalMessageInfo

func (m *CompletePairingResponse) GetPairingId() string {
	if m != nil {
		return m.PairingId
	}
	return ""
}

func (m *CompletePairingResponse) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

func (m *CompletePairingResponse) GetLctRelationshipId() string {
	if m != nil {
		return m.LctRelationshipId
	}
	return ""
}

func (m *CompletePairingResponse) GetEncryptedSessionKeyInitiator() []byte {
	if m != nil {
		return m.EncryptedSessionKeyInitiator
	}
	return nil
}

func (m *CompletePairingResponse) GetEncryptedSessionKeyTarget() []byte {
	if m != nil {
		return m.EncryptedSessionKeyTarget
	}
	return nil
}

func (m *CompletePairingResponse) GetHashedCombinedSessionKey() []byte {
	if m != nil {
		return m.HashedCombinedSessionKey
	}
	return nil
}

func (m *CompletePairingResponse) GetTrustScore() string {
	if m != nil {
		return m.TrustScore
	}
	return ""
}

func (m *CompletePairingResponse) GetError() string {
	if m != nil {
		return m.Error
	}
	return ""
}

// SplitKey represents the metadata for an LCT cryptographic relationship
// NOTE: No cryptographic secrets are stored on-chain - only public metadata
// Key halves are ephemeral and only exist in memory during operations
type SplitKey struct {
	LctId       string `protobuf:"bytes,1,opt,name=lct_id,json=lctId,proto3" json:"lct_id,omitempty"`
	Status      string `protobuf:"bytes,2,opt,name=status,proto3" json:"status,omitempty"`
	CreatedAt   int64  `protobuf:"varint,3,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	ActivatedAt int64  `protobuf:"varint,4,opt,name=activated_at,json=activatedAt,proto3" json:"activated_at,omitempty"`
}

func (m *SplitKey) Reset()         { *m = SplitKey{} }
func (m *SplitKey) String() string { return proto.CompactTextString(m) }
func (*SplitKey) ProtoMessage()    {}
func (*SplitKey) Descriptor() ([]byte, []int) {
	return fileDescriptor_6f7cee81d1d9a17a, []int{7}
}
func (m *SplitKey) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SplitKey) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SplitKey.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SplitKey) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SplitKey.Merge(m, src)
}
func (m *SplitKey) XXX_Size() int {
	return m.Size()
}
func (m *SplitKey) XXX_DiscardUnknown() {
	xxx_messageInfo_SplitKey.DiscardUnknown(m)
}

var xxx_messageInfo_SplitKey proto.InternalMessageInfo

func (m *SplitKey) GetLctId() string {
	if m != nil {
		return m.LctId
	}
	return ""
}

func (m *SplitKey) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

func (m *SplitKey) GetCreatedAt() int64 {
	if m != nil {
		return m.CreatedAt
	}
	return 0
}

func (m *SplitKey) GetActivatedAt() int64 {
	if m != nil {
		return m.ActivatedAt
	}
	return 0
}

func init() {
	proto.RegisterType((*LCTMediatedPairing)(nil), "racecarweb.lctmanager.v1.LCTMediatedPairing")
	proto.RegisterType((*SessionKeyExchange)(nil), "racecarweb.lctmanager.v1.SessionKeyExchange")
	proto.RegisterType((*PairingChallenge)(nil), "racecarweb.lctmanager.v1.PairingChallenge")
	proto.RegisterType((*PairingRequest)(nil), "racecarweb.lctmanager.v1.PairingRequest")
	proto.RegisterType((*PairingResponse)(nil), "racecarweb.lctmanager.v1.PairingResponse")
	proto.RegisterType((*CompletePairingRequest)(nil), "racecarweb.lctmanager.v1.CompletePairingRequest")
	proto.RegisterType((*CompletePairingResponse)(nil), "racecarweb.lctmanager.v1.CompletePairingResponse")
	proto.RegisterType((*SplitKey)(nil), "racecarweb.lctmanager.v1.SplitKey")
}

func init() {
	proto.RegisterFile("racecarweb/lctmanager/v1/key_exchange.proto", fileDescriptor_6f7cee81d1d9a17a)
}

var fileDescriptor_6f7cee81d1d9a17a = []byte{
	// 747 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x56, 0xcd, 0x6e, 0xd3, 0x4c,
	0x14, 0xad, 0xf3, 0xd7, 0xe4, 0x26, 0x4d, 0x53, 0x7f, 0xdf, 0xd7, 0x2f, 0xa8, 0x25, 0x6d, 0x23,
	0x21, 0x22, 0x55, 0x4d, 0x55, 0xb1, 0x61, 0x83, 0x50, 0x09, 0x5d, 0x44, 0x14, 0x09, 0xb9, 0x65,
	0xc3, 0xc6, 0x9a, 0xda, 0x57, 0x89, 0x85, 0x6b, 0x9b, 0x99, 0x9b, 0x92, 0x88, 0x97, 0x40, 0xe2,
	0x69, 0x78, 0x03, 0x96, 0x5d, 0x76, 0x07, 0x6a, 0xdf, 0x03, 0xa1, 0xb1, 0x27, 0x76, 0xea, 0xfc,
	0x14, 0x51, 0x76, 0x99, 0x73, 0x8f, 0x27, 0x33, 0xe7, 0xdc, 0x73, 0x6d, 0xd8, 0xe5, 0xcc, 0x42,
	0x8b, 0xf1, 0x8f, 0x78, 0xb6, 0xef, 0x5a, 0x74, 0xce, 0x3c, 0xd6, 0x43, 0xbe, 0x7f, 0x71, 0xb0,
	0xff, 0x1e, 0x47, 0x26, 0x0e, 0xad, 0x3e, 0xf3, 0x7a, 0xd8, 0x0e, 0xb8, 0x4f, 0xbe, 0x5e, 0x4f,
	0xc8, 0xed, 0x84, 0xdc, 0xbe, 0x38, 0x68, 0x7e, 0xc9, 0x80, 0x7e, 0xdc, 0x39, 0x7d, 0x8d, 0xb6,
	0xc3, 0x08, 0xed, 0x37, 0xcc, 0xe1, 0x8e, 0xd7, 0xd3, 0x1f, 0x02, 0x04, 0xd1, 0x4f, 0xd3, 0xb1,
	0xeb, 0xda, 0xb6, 0xd6, 0x2a, 0x19, 0x25, 0x85, 0x74, 0x6d, 0xbd, 0x05, 0x35, 0xc7, 0x73, 0xc8,
	0x61, 0xe4, 0x73, 0xd3, 0xb5, 0x48, 0x92, 0x32, 0x21, 0xa9, 0x1a, 0xe3, 0xc7, 0x16, 0x75, 0x6d,
	0xbd, 0x09, 0x2b, 0xc4, 0x78, 0x0f, 0x69, 0x4c, 0xcb, 0x86, 0xb4, 0x72, 0x04, 0x46, 0x9c, 0x3a,
	0x2c, 0x5b, 0xbe, 0x47, 0x38, 0xa4, 0x7a, 0x2e, 0xac, 0x8e, 0x97, 0xfa, 0x36, 0x54, 0x02, 0xee,
	0x0f, 0x47, 0xe3, 0x87, 0xf3, 0x61, 0x19, 0x42, 0x2c, 0x7a, 0x76, 0x1d, 0x0a, 0x82, 0x18, 0x0d,
	0x44, 0xbd, 0x10, 0xd6, 0xd4, 0x4a, 0x5e, 0xc0, 0xe2, 0x28, 0xaf, 0x64, 0x32, 0xaa, 0x2f, 0x6f,
	0x6b, 0xad, 0xac, 0x51, 0x52, 0xc8, 0x21, 0xc9, 0x32, 0x0e, 0x03, 0x87, 0xa3, 0x90, 0xe5, 0x62,
	0x54, 0x56, 0xc8, 0x21, 0x35, 0x7f, 0x66, 0x40, 0x3f, 0x41, 0x21, 0x1c, 0xdf, 0x7b, 0x85, 0xa3,
	0x23, 0x25, 0xe6, 0x5d, 0xaa, 0xb4, 0xe1, 0x1f, 0x79, 0x4e, 0x8e, 0x2e, 0x23, 0xc7, 0xf7, 0x44,
	0xdf, 0x09, 0x12, 0x61, 0xd6, 0x5c, 0x8b, 0x8c, 0x89, 0x4a, 0xd7, 0xd6, 0x8f, 0x60, 0x0b, 0x3d,
	0x8b, 0x8f, 0x02, 0x79, 0x4a, 0x11, 0xfd, 0x9d, 0x29, 0xdd, 0x8b, 0x35, 0x0c, 0xd5, 0xaa, 0x18,
	0x9b, 0x31, 0x2d, 0x39, 0x54, 0x77, 0xcc, 0xd1, 0x9f, 0xc3, 0xe6, 0xec, 0x6d, 0x22, 0x8d, 0x43,
	0x4d, 0x2b, 0xc6, 0x83, 0x19, 0x7b, 0x9c, 0x86, 0x04, 0xfd, 0x19, 0x6c, 0xf4, 0x99, 0xe8, 0xa3,
	0x6d, 0x5a, 0xfe, 0xf9, 0x99, 0xe3, 0xdd, 0xde, 0x26, 0x14, 0xbd, 0x62, 0xd4, 0x23, 0x4a, 0x47,
	0x31, 0x92, 0x4d, 0xfe, 0xd4, 0x82, 0x0d, 0x28, 0xb9, 0x4c, 0x90, 0x39, 0x10, 0x68, 0x2b, 0x07,
	0x8a, 0x12, 0x78, 0x2b, 0xd0, 0x6e, 0x7e, 0xd7, 0xa0, 0xa6, 0x7a, 0xb1, 0xd3, 0x67, 0xae, 0x8b,
	0x52, 0xfe, 0x1d, 0xa8, 0x58, 0xe3, 0x45, 0x62, 0x40, 0x39, 0xc6, 0xba, 0x76, 0xca, 0xa1, 0x4c,
	0xda, 0xa1, 0x47, 0x50, 0x4d, 0x76, 0xb0, 0x19, 0x31, 0x25, 0xf0, 0x4a, 0x8c, 0xbe, 0x64, 0xc4,
	0xf4, 0x5d, 0x58, 0xc3, 0x61, 0x80, 0x96, 0x3c, 0x3a, 0x47, 0x11, 0xf8, 0x9e, 0x40, 0x25, 0x63,
	0x6d, 0x5c, 0x30, 0x14, 0x9e, 0x6a, 0xa5, 0x7c, 0xaa, 0x95, 0xe6, 0xa9, 0xd3, 0xfc, 0xaa, 0x41,
	0x55, 0xdd, 0xd0, 0xc0, 0x0f, 0x03, 0x14, 0x34, 0x33, 0x55, 0xda, 0xef, 0xa5, 0x2a, 0xb3, 0x30,
	0x55, 0xd9, 0xc5, 0xa9, 0xca, 0x4d, 0xa5, 0x6a, 0xf1, 0x9d, 0x9a, 0x57, 0x1a, 0xac, 0xc6, 0x67,
	0x4f, 0x64, 0x58, 0x94, 0x8d, 0x44, 0x86, 0xcc, 0xad, 0x26, 0x49, 0x7b, 0x9a, 0x9d, 0xf6, 0x74,
	0xda, 0xb4, 0xdc, 0x2c, 0xd3, 0xe6, 0xa4, 0x2f, 0x3f, 0x2f, 0x7d, 0xff, 0x42, 0x1e, 0x39, 0xf7,
	0xb9, 0xf2, 0x25, 0x5a, 0x48, 0x5b, 0xd6, 0x3b, 0xfe, 0x79, 0xe0, 0x22, 0x61, 0xca, 0x9e, 0x3b,
	0x6e, 0xb8, 0x07, 0x7a, 0xe2, 0x5e, 0xdc, 0x35, 0x2a, 0xfc, 0x71, 0x25, 0xd6, 0xeb, 0x31, 0xac,
	0x2a, 0x0b, 0x63, 0x6e, 0x74, 0xf7, 0x6a, 0x04, 0xc7, 0xc4, 0x16, 0xd4, 0x26, 0x43, 0x3d, 0x21,
	0x40, 0x55, 0xc4, 0x21, 0x94, 0x0a, 0xc8, 0xa9, 0xf5, 0xff, 0xd4, 0xd9, 0xef, 0x67, 0xcf, 0x1c,
	0x51, 0xb3, 0xf7, 0x18, 0x69, 0xb9, 0xbf, 0x30, 0xd2, 0xf2, 0xf7, 0x1c, 0x69, 0x85, 0x3b, 0x46,
	0xda, 0x16, 0x94, 0x89, 0x0f, 0x04, 0x99, 0xc2, 0xf2, 0x39, 0x86, 0xb3, 0xab, 0x64, 0x40, 0x08,
	0x9d, 0x48, 0x24, 0x69, 0x9e, 0xe2, 0x64, 0xf3, 0x7c, 0x82, 0xe2, 0x49, 0xe0, 0x3a, 0x24, 0xb7,
	0xf8, 0x0f, 0x0a, 0xb7, 0x22, 0x9c, 0x77, 0x53, 0xef, 0xab, 0xcc, 0x82, 0x61, 0x99, 0x4d, 0x0f,
	0xcb, 0x1d, 0xa8, 0x30, 0x8b, 0x9c, 0x8b, 0x31, 0x21, 0x17, 0x12, 0xca, 0x31, 0x76, 0x48, 0x2f,
	0x9e, 0x7e, 0xbb, 0x6e, 0x68, 0x97, 0xd7, 0x0d, 0xed, 0xc7, 0x75, 0x43, 0xfb, 0x7c, 0xd3, 0x58,
	0xba, 0xbc, 0x69, 0x2c, 0x5d, 0xdd, 0x34, 0x96, 0xde, 0x35, 0xd4, 0xdb, 0x7f, 0x4f, 0x7e, 0x2b,
	0x0c, 0x27, 0xbf, 0x16, 0x68, 0x14, 0xa0, 0x38, 0x2b, 0x84, 0x1f, 0x09, 0x4f, 0x7e, 0x05, 0x00,
	0x00, 0xff, 0xff, 0xfe, 0x6c, 0xaf, 0x18, 0x53, 0x08, 0x00, 0x00,
}

func (m *LCTMediatedPairing) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LCTMediatedPairing) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LCTMediatedPairing) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ExpiresAt != 0 {
		i = encodeVarintKeyExchange(dAtA, i, uint64(m.ExpiresAt))
		i--
		dAtA[i] = 0x40
	}
	if m.CreatedAt != 0 {
		i = encodeVarintKeyExchange(dAtA, i, uint64(m.CreatedAt))
		i--
		dAtA[i] = 0x38
	}
	if len(m.Status) > 0 {
		i -= len(m.Status)
		copy(dAtA[i:], m.Status)
		i = encodeVarintKeyExchange(dAtA, i, uint64(len(m.Status)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.ProxyLctId) > 0 {
		i -= len(m.ProxyLctId)
		copy(dAtA[i:], m.ProxyLctId)
		i = encodeVarintKeyExchange(dAtA, i, uint64(len(m.ProxyLctId)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Context) > 0 {
		i -= len(m.Context)
		copy(dAtA[i:], m.Context)
		i = encodeVarintKeyExchange(dAtA, i, uint64(len(m.Context)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.TargetLctId) > 0 {
		i -= len(m.TargetLctId)
		copy(dAtA[i:], m.TargetLctId)
		i = encodeVarintKeyExchange(dAtA, i, uint64(len(m.TargetLctId)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.InitiatorLctId) > 0 {
		i -= len(m.InitiatorLctId)
		copy(dAtA[i:], m.InitiatorLctId)
		i = encodeVarintKeyExchange(dAtA, i, uint64(len(m.InitiatorLctId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.PairingId) > 0 {
		i -= len(m.PairingId)
		copy(dAtA[i:], m.PairingId)
		i = encodeVarintKeyExchange(dAtA, i, uint64(len(m.PairingId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SessionKeyExchange) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SessionKeyExchange) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SessionKeyExchange) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.LastUsed != 0 {
		i = encodeVarintKeyExchange(dAtA, i, uint64(m.LastUsed))
		i--
		dAtA[i] = 0x40
	}
	if m.CreatedAt != 0 {
		i = encodeVarintKeyExchange(dAtA, i, uint64(m.CreatedAt))
		i--
		dAtA[i] = 0x38
	}
	if len(m.Status) > 0 {
		i -= len(m.Status)
		copy(dAtA[i:], m.Status)
		i = encodeVarintKeyExchange(dAtA, i, uint64(len(m.Status)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.HashedCombinedSessionKey) > 0 {
		i -= len(m.HashedCombinedSessionKey)
		copy(dAtA[i:], m.HashedCombinedSessionKey)
		i = encodeVarintKeyExchange(dAtA, i, uint64(len(m.HashedCombinedSessionKey)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.EncryptedSessionKeyTarget) > 0 {
		i -= len(m.EncryptedSessionKeyTarget)
		copy(dAtA[i:], m.EncryptedSessionKeyTarget)
		i = encodeVarintKeyExchange(dAtA, i, uint64(len(m.EncryptedSessionKeyTarget)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.EncryptedSessionKeyInitiator) > 0 {
		i -= len(m.EncryptedSessionKeyInitiator)
		copy(dAtA[i:], m.EncryptedSessionKeyInitiator)
		i = encodeVarintKeyExchange(dAtA, i, uint64(len(m.EncryptedSessionKeyInitiator)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.LctRelationshipId) > 0 {
		i -= len(m.LctRelationshipId)
		copy(dAtA[i:], m.LctRelationshipId)
		i = encodeVarintKeyExchange(dAtA, i, uint64(len(m.LctRelationshipId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.PairingId) > 0 {
		i -= len(m.PairingId)
		copy(dAtA[i:], m.PairingId)
		i = encodeVarintKeyExchange(dAtA, i, uint64(len(m.PairingId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PairingChallenge) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PairingChallenge) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PairingChallenge) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Status) > 0 {
		i -= len(m.Status)
		copy(dAtA[i:], m.Status)
		i = encodeVarintKeyExchange(dAtA, i, uint64(len(m.Status)))
		i--
		dAtA[i] = 0x32
	}
	if m.ExpiresAt != 0 {
		i = encodeVarintKeyExchange(dAtA, i, uint64(m.ExpiresAt))
		i--
		dAtA[i] = 0x28
	}
	if len(m.ExpectedResponse) > 0 {
		i -= len(m.ExpectedResponse)
		copy(dAtA[i:], m.ExpectedResponse)
		i = encodeVarintKeyExchange(dAtA, i, uint64(len(m.ExpectedResponse)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.ChallengeData) > 0 {
		i -= len(m.ChallengeData)
		copy(dAtA[i:], m.ChallengeData)
		i = encodeVarintKeyExchange(dAtA, i, uint64(len(m.ChallengeData)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.PairingId) > 0 {
		i -= len(m.PairingId)
		copy(dAtA[i:], m.PairingId)
		i = encodeVarintKeyExchange(dAtA, i, uint64(len(m.PairingId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ChallengeId) > 0 {
		i -= len(m.ChallengeId)
		copy(dAtA[i:], m.ChallengeId)
		i = encodeVarintKeyExchange(dAtA, i, uint64(len(m.ChallengeId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PairingRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PairingRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PairingRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ExpiresAt != 0 {
		i = encodeVarintKeyExchange(dAtA, i, uint64(m.ExpiresAt))
		i--
		dAtA[i] = 0x28
	}
	if len(m.ProxyLctId) > 0 {
		i -= len(m.ProxyLctId)
		copy(dAtA[i:], m.ProxyLctId)
		i = encodeVarintKeyExchange(dAtA, i, uint64(len(m.ProxyLctId)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Context) > 0 {
		i -= len(m.Context)
		copy(dAtA[i:], m.Context)
		i = encodeVarintKeyExchange(dAtA, i, uint64(len(m.Context)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.TargetLctId) > 0 {
		i -= len(m.TargetLctId)
		copy(dAtA[i:], m.TargetLctId)
		i = encodeVarintKeyExchange(dAtA, i, uint64(len(m.TargetLctId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.InitiatorLctId) > 0 {
		i -= len(m.InitiatorLctId)
		copy(dAtA[i:], m.InitiatorLctId)
		i = encodeVarintKeyExchange(dAtA, i, uint64(len(m.InitiatorLctId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PairingResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PairingResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PairingResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Error) > 0 {
		i -= len(m.Error)
		copy(dAtA[i:], m.Error)
		i = encodeVarintKeyExchange(dAtA, i, uint64(len(m.Error)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.LctRelationshipId) > 0 {
		i -= len(m.LctRelationshipId)
		copy(dAtA[i:], m.LctRelationshipId)
		i = encodeVarintKeyExchange(dAtA, i, uint64(len(m.LctRelationshipId)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.ChallengeData) > 0 {
		i -= len(m.ChallengeData)
		copy(dAtA[i:], m.ChallengeData)
		i = encodeVarintKeyExchange(dAtA, i, uint64(len(m.ChallengeData)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.ChallengeId) > 0 {
		i -= len(m.ChallengeId)
		copy(dAtA[i:], m.ChallengeId)
		i = encodeVarintKeyExchange(dAtA, i, uint64(len(m.ChallengeId)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Status) > 0 {
		i -= len(m.Status)
		copy(dAtA[i:], m.Status)
		i = encodeVarintKeyExchange(dAtA, i, uint64(len(m.Status)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.PairingId) > 0 {
		i -= len(m.PairingId)
		copy(dAtA[i:], m.PairingId)
		i = encodeVarintKeyExchange(dAtA, i, uint64(len(m.PairingId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CompletePairingRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CompletePairingRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CompletePairingRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.SessionKeyData) > 0 {
		i -= len(m.SessionKeyData)
		copy(dAtA[i:], m.SessionKeyData)
		i = encodeVarintKeyExchange(dAtA, i, uint64(len(m.SessionKeyData)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.TargetResponse) > 0 {
		i -= len(m.TargetResponse)
		copy(dAtA[i:], m.TargetResponse)
		i = encodeVarintKeyExchange(dAtA, i, uint64(len(m.TargetResponse)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.InitiatorResponse) > 0 {
		i -= len(m.InitiatorResponse)
		copy(dAtA[i:], m.InitiatorResponse)
		i = encodeVarintKeyExchange(dAtA, i, uint64(len(m.InitiatorResponse)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.PairingId) > 0 {
		i -= len(m.PairingId)
		copy(dAtA[i:], m.PairingId)
		i = encodeVarintKeyExchange(dAtA, i, uint64(len(m.PairingId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CompletePairingResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CompletePairingResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CompletePairingResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Error) > 0 {
		i -= len(m.Error)
		copy(dAtA[i:], m.Error)
		i = encodeVarintKeyExchange(dAtA, i, uint64(len(m.Error)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.TrustScore) > 0 {
		i -= len(m.TrustScore)
		copy(dAtA[i:], m.TrustScore)
		i = encodeVarintKeyExchange(dAtA, i, uint64(len(m.TrustScore)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.HashedCombinedSessionKey) > 0 {
		i -= len(m.HashedCombinedSessionKey)
		copy(dAtA[i:], m.HashedCombinedSessionKey)
		i = encodeVarintKeyExchange(dAtA, i, uint64(len(m.HashedCombinedSessionKey)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.EncryptedSessionKeyTarget) > 0 {
		i -= len(m.EncryptedSessionKeyTarget)
		copy(dAtA[i:], m.EncryptedSessionKeyTarget)
		i = encodeVarintKeyExchange(dAtA, i, uint64(len(m.EncryptedSessionKeyTarget)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.EncryptedSessionKeyInitiator) > 0 {
		i -= len(m.EncryptedSessionKeyInitiator)
		copy(dAtA[i:], m.EncryptedSessionKeyInitiator)
		i = encodeVarintKeyExchange(dAtA, i, uint64(len(m.EncryptedSessionKeyInitiator)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.LctRelationshipId) > 0 {
		i -= len(m.LctRelationshipId)
		copy(dAtA[i:], m.LctRelationshipId)
		i = encodeVarintKeyExchange(dAtA, i, uint64(len(m.LctRelationshipId)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Status) > 0 {
		i -= len(m.Status)
		copy(dAtA[i:], m.Status)
		i = encodeVarintKeyExchange(dAtA, i, uint64(len(m.Status)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.PairingId) > 0 {
		i -= len(m.PairingId)
		copy(dAtA[i:], m.PairingId)
		i = encodeVarintKeyExchange(dAtA, i, uint64(len(m.PairingId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SplitKey) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SplitKey) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SplitKey) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ActivatedAt != 0 {
		i = encodeVarintKeyExchange(dAtA, i, uint64(m.ActivatedAt))
		i--
		dAtA[i] = 0x20
	}
	if m.CreatedAt != 0 {
		i = encodeVarintKeyExchange(dAtA, i, uint64(m.CreatedAt))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Status) > 0 {
		i -= len(m.Status)
		copy(dAtA[i:], m.Status)
		i = encodeVarintKeyExchange(dAtA, i, uint64(len(m.Status)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.LctId) > 0 {
		i -= len(m.LctId)
		copy(dAtA[i:], m.LctId)
		i = encodeVarintKeyExchange(dAtA, i, uint64(len(m.LctId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintKeyExchange(dAtA []byte, offset int, v uint64) int {
	offset -= sovKeyExchange(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *LCTMediatedPairing) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.PairingId)
	if l > 0 {
		n += 1 + l + sovKeyExchange(uint64(l))
	}
	l = len(m.InitiatorLctId)
	if l > 0 {
		n += 1 + l + sovKeyExchange(uint64(l))
	}
	l = len(m.TargetLctId)
	if l > 0 {
		n += 1 + l + sovKeyExchange(uint64(l))
	}
	l = len(m.Context)
	if l > 0 {
		n += 1 + l + sovKeyExchange(uint64(l))
	}
	l = len(m.ProxyLctId)
	if l > 0 {
		n += 1 + l + sovKeyExchange(uint64(l))
	}
	l = len(m.Status)
	if l > 0 {
		n += 1 + l + sovKeyExchange(uint64(l))
	}
	if m.CreatedAt != 0 {
		n += 1 + sovKeyExchange(uint64(m.CreatedAt))
	}
	if m.ExpiresAt != 0 {
		n += 1 + sovKeyExchange(uint64(m.ExpiresAt))
	}
	return n
}

func (m *SessionKeyExchange) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.PairingId)
	if l > 0 {
		n += 1 + l + sovKeyExchange(uint64(l))
	}
	l = len(m.LctRelationshipId)
	if l > 0 {
		n += 1 + l + sovKeyExchange(uint64(l))
	}
	l = len(m.EncryptedSessionKeyInitiator)
	if l > 0 {
		n += 1 + l + sovKeyExchange(uint64(l))
	}
	l = len(m.EncryptedSessionKeyTarget)
	if l > 0 {
		n += 1 + l + sovKeyExchange(uint64(l))
	}
	l = len(m.HashedCombinedSessionKey)
	if l > 0 {
		n += 1 + l + sovKeyExchange(uint64(l))
	}
	l = len(m.Status)
	if l > 0 {
		n += 1 + l + sovKeyExchange(uint64(l))
	}
	if m.CreatedAt != 0 {
		n += 1 + sovKeyExchange(uint64(m.CreatedAt))
	}
	if m.LastUsed != 0 {
		n += 1 + sovKeyExchange(uint64(m.LastUsed))
	}
	return n
}

func (m *PairingChallenge) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ChallengeId)
	if l > 0 {
		n += 1 + l + sovKeyExchange(uint64(l))
	}
	l = len(m.PairingId)
	if l > 0 {
		n += 1 + l + sovKeyExchange(uint64(l))
	}
	l = len(m.ChallengeData)
	if l > 0 {
		n += 1 + l + sovKeyExchange(uint64(l))
	}
	l = len(m.ExpectedResponse)
	if l > 0 {
		n += 1 + l + sovKeyExchange(uint64(l))
	}
	if m.ExpiresAt != 0 {
		n += 1 + sovKeyExchange(uint64(m.ExpiresAt))
	}
	l = len(m.Status)
	if l > 0 {
		n += 1 + l + sovKeyExchange(uint64(l))
	}
	return n
}

func (m *PairingRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.InitiatorLctId)
	if l > 0 {
		n += 1 + l + sovKeyExchange(uint64(l))
	}
	l = len(m.TargetLctId)
	if l > 0 {
		n += 1 + l + sovKeyExchange(uint64(l))
	}
	l = len(m.Context)
	if l > 0 {
		n += 1 + l + sovKeyExchange(uint64(l))
	}
	l = len(m.ProxyLctId)
	if l > 0 {
		n += 1 + l + sovKeyExchange(uint64(l))
	}
	if m.ExpiresAt != 0 {
		n += 1 + sovKeyExchange(uint64(m.ExpiresAt))
	}
	return n
}

func (m *PairingResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.PairingId)
	if l > 0 {
		n += 1 + l + sovKeyExchange(uint64(l))
	}
	l = len(m.Status)
	if l > 0 {
		n += 1 + l + sovKeyExchange(uint64(l))
	}
	l = len(m.ChallengeId)
	if l > 0 {
		n += 1 + l + sovKeyExchange(uint64(l))
	}
	l = len(m.ChallengeData)
	if l > 0 {
		n += 1 + l + sovKeyExchange(uint64(l))
	}
	l = len(m.LctRelationshipId)
	if l > 0 {
		n += 1 + l + sovKeyExchange(uint64(l))
	}
	l = len(m.Error)
	if l > 0 {
		n += 1 + l + sovKeyExchange(uint64(l))
	}
	return n
}

func (m *CompletePairingRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.PairingId)
	if l > 0 {
		n += 1 + l + sovKeyExchange(uint64(l))
	}
	l = len(m.InitiatorResponse)
	if l > 0 {
		n += 1 + l + sovKeyExchange(uint64(l))
	}
	l = len(m.TargetResponse)
	if l > 0 {
		n += 1 + l + sovKeyExchange(uint64(l))
	}
	l = len(m.SessionKeyData)
	if l > 0 {
		n += 1 + l + sovKeyExchange(uint64(l))
	}
	return n
}

func (m *CompletePairingResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.PairingId)
	if l > 0 {
		n += 1 + l + sovKeyExchange(uint64(l))
	}
	l = len(m.Status)
	if l > 0 {
		n += 1 + l + sovKeyExchange(uint64(l))
	}
	l = len(m.LctRelationshipId)
	if l > 0 {
		n += 1 + l + sovKeyExchange(uint64(l))
	}
	l = len(m.EncryptedSessionKeyInitiator)
	if l > 0 {
		n += 1 + l + sovKeyExchange(uint64(l))
	}
	l = len(m.EncryptedSessionKeyTarget)
	if l > 0 {
		n += 1 + l + sovKeyExchange(uint64(l))
	}
	l = len(m.HashedCombinedSessionKey)
	if l > 0 {
		n += 1 + l + sovKeyExchange(uint64(l))
	}
	l = len(m.TrustScore)
	if l > 0 {
		n += 1 + l + sovKeyExchange(uint64(l))
	}
	l = len(m.Error)
	if l > 0 {
		n += 1 + l + sovKeyExchange(uint64(l))
	}
	return n
}

func (m *SplitKey) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.LctId)
	if l > 0 {
		n += 1 + l + sovKeyExchange(uint64(l))
	}
	l = len(m.Status)
	if l > 0 {
		n += 1 + l + sovKeyExchange(uint64(l))
	}
	if m.CreatedAt != 0 {
		n += 1 + sovKeyExchange(uint64(m.CreatedAt))
	}
	if m.ActivatedAt != 0 {
		n += 1 + sovKeyExchange(uint64(m.ActivatedAt))
	}
	return n
}

func sovKeyExchange(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozKeyExchange(x uint64) (n int) {
	return sovKeyExchange(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *LCTMediatedPairing) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowKeyExchange
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LCTMediatedPairing: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LCTMediatedPairing: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PairingId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowKeyExchange
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthKeyExchange
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthKeyExchange
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PairingId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InitiatorLctId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowKeyExchange
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthKeyExchange
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthKeyExchange
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InitiatorLctId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TargetLctId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowKeyExchange
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthKeyExchange
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthKeyExchange
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TargetLctId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Context", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowKeyExchange
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthKeyExchange
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthKeyExchange
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Context = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProxyLctId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowKeyExchange
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthKeyExchange
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthKeyExchange
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProxyLctId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowKeyExchange
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthKeyExchange
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthKeyExchange
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Status = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAt", wireType)
			}
			m.CreatedAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowKeyExchange
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CreatedAt |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExpiresAt", wireType)
			}
			m.ExpiresAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowKeyExchange
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ExpiresAt |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipKeyExchange(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthKeyExchange
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SessionKeyExchange) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowKeyExchange
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SessionKeyExchange: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SessionKeyExchange: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PairingId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowKeyExchange
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthKeyExchange
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthKeyExchange
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PairingId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LctRelationshipId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowKeyExchange
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthKeyExchange
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthKeyExchange
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LctRelationshipId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EncryptedSessionKeyInitiator", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowKeyExchange
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthKeyExchange
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthKeyExchange
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EncryptedSessionKeyInitiator = append(m.EncryptedSessionKeyInitiator[:0], dAtA[iNdEx:postIndex]...)
			if m.EncryptedSessionKeyInitiator == nil {
				m.EncryptedSessionKeyInitiator = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EncryptedSessionKeyTarget", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowKeyExchange
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthKeyExchange
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthKeyExchange
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EncryptedSessionKeyTarget = append(m.EncryptedSessionKeyTarget[:0], dAtA[iNdEx:postIndex]...)
			if m.EncryptedSessionKeyTarget == nil {
				m.EncryptedSessionKeyTarget = []byte{}
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HashedCombinedSessionKey", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowKeyExchange
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthKeyExchange
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthKeyExchange
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HashedCombinedSessionKey = append(m.HashedCombinedSessionKey[:0], dAtA[iNdEx:postIndex]...)
			if m.HashedCombinedSessionKey == nil {
				m.HashedCombinedSessionKey = []byte{}
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowKeyExchange
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthKeyExchange
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthKeyExchange
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Status = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAt", wireType)
			}
			m.CreatedAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowKeyExchange
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CreatedAt |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastUsed", wireType)
			}
			m.LastUsed = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowKeyExchange
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LastUsed |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipKeyExchange(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthKeyExchange
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PairingChallenge) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowKeyExchange
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PairingChallenge: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PairingChallenge: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChallengeId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowKeyExchange
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthKeyExchange
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthKeyExchange
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChallengeId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PairingId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowKeyExchange
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthKeyExchange
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthKeyExchange
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PairingId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChallengeData", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowKeyExchange
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthKeyExchange
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthKeyExchange
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChallengeData = append(m.ChallengeData[:0], dAtA[iNdEx:postIndex]...)
			if m.ChallengeData == nil {
				m.ChallengeData = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExpectedResponse", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowKeyExchange
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthKeyExchange
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthKeyExchange
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExpectedResponse = append(m.ExpectedResponse[:0], dAtA[iNdEx:postIndex]...)
			if m.ExpectedResponse == nil {
				m.ExpectedResponse = []byte{}
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExpiresAt", wireType)
			}
			m.ExpiresAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowKeyExchange
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ExpiresAt |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowKeyExchange
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthKeyExchange
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthKeyExchange
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Status = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipKeyExchange(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthKeyExchange
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PairingRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowKeyExchange
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PairingRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PairingRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InitiatorLctId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowKeyExchange
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthKeyExchange
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthKeyExchange
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InitiatorLctId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TargetLctId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowKeyExchange
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthKeyExchange
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthKeyExchange
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TargetLctId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Context", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowKeyExchange
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthKeyExchange
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthKeyExchange
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Context = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProxyLctId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowKeyExchange
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthKeyExchange
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthKeyExchange
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProxyLctId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExpiresAt", wireType)
			}
			m.ExpiresAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowKeyExchange
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ExpiresAt |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipKeyExchange(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthKeyExchange
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PairingResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowKeyExchange
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PairingResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PairingResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PairingId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowKeyExchange
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthKeyExchange
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthKeyExchange
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PairingId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowKeyExchange
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthKeyExchange
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthKeyExchange
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Status = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChallengeId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowKeyExchange
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthKeyExchange
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthKeyExchange
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChallengeId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChallengeData", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowKeyExchange
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthKeyExchange
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthKeyExchange
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChallengeData = append(m.ChallengeData[:0], dAtA[iNdEx:postIndex]...)
			if m.ChallengeData == nil {
				m.ChallengeData = []byte{}
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LctRelationshipId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowKeyExchange
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthKeyExchange
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthKeyExchange
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LctRelationshipId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowKeyExchange
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthKeyExchange
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthKeyExchange
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Error = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipKeyExchange(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthKeyExchange
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CompletePairingRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowKeyExchange
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CompletePairingRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CompletePairingRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PairingId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowKeyExchange
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthKeyExchange
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthKeyExchange
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PairingId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InitiatorResponse", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowKeyExchange
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthKeyExchange
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthKeyExchange
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InitiatorResponse = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TargetResponse", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowKeyExchange
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthKeyExchange
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthKeyExchange
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TargetResponse = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SessionKeyData", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowKeyExchange
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthKeyExchange
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthKeyExchange
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SessionKeyData = append(m.SessionKeyData[:0], dAtA[iNdEx:postIndex]...)
			if m.SessionKeyData == nil {
				m.SessionKeyData = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipKeyExchange(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthKeyExchange
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CompletePairingResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowKeyExchange
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CompletePairingResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CompletePairingResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PairingId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowKeyExchange
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthKeyExchange
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthKeyExchange
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PairingId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowKeyExchange
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthKeyExchange
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthKeyExchange
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Status = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LctRelationshipId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowKeyExchange
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthKeyExchange
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthKeyExchange
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LctRelationshipId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EncryptedSessionKeyInitiator", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowKeyExchange
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthKeyExchange
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthKeyExchange
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EncryptedSessionKeyInitiator = append(m.EncryptedSessionKeyInitiator[:0], dAtA[iNdEx:postIndex]...)
			if m.EncryptedSessionKeyInitiator == nil {
				m.EncryptedSessionKeyInitiator = []byte{}
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EncryptedSessionKeyTarget", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowKeyExchange
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthKeyExchange
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthKeyExchange
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EncryptedSessionKeyTarget = append(m.EncryptedSessionKeyTarget[:0], dAtA[iNdEx:postIndex]...)
			if m.EncryptedSessionKeyTarget == nil {
				m.EncryptedSessionKeyTarget = []byte{}
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HashedCombinedSessionKey", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowKeyExchange
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthKeyExchange
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthKeyExchange
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HashedCombinedSessionKey = append(m.HashedCombinedSessionKey[:0], dAtA[iNdEx:postIndex]...)
			if m.HashedCombinedSessionKey == nil {
				m.HashedCombinedSessionKey = []byte{}
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TrustScore", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowKeyExchange
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthKeyExchange
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthKeyExchange
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TrustScore = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowKeyExchange
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthKeyExchange
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthKeyExchange
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Error = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipKeyExchange(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthKeyExchange
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SplitKey) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowKeyExchange
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SplitKey: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SplitKey: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LctId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowKeyExchange
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthKeyExchange
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthKeyExchange
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LctId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowKeyExchange
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthKeyExchange
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthKeyExchange
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Status = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAt", wireType)
			}
			m.CreatedAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowKeyExchange
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CreatedAt |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActivatedAt", wireType)
			}
			m.ActivatedAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowKeyExchange
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ActivatedAt |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipKeyExchange(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthKeyExchange
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipKeyExchange(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowKeyExchange
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowKeyExchange
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowKeyExchange
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthKeyExchange
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupKeyExchange
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthKeyExchange
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthKeyExchange        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowKeyExchange          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupKeyExchange = fmt.Errorf("proto: unexpected end of group")
)
