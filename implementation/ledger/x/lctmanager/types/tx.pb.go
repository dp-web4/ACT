// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: racecarweb/lctmanager/v1/tx.proto

package types

import (
	context "context"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	_ "github.com/cosmos/cosmos-sdk/types/msgservice"
	_ "github.com/cosmos/cosmos-sdk/types/tx/amino"
	_ "github.com/cosmos/gogoproto/gogoproto"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// MsgUpdateParams is the Msg/UpdateParams request type.
type MsgUpdateParams struct {
	// authority is the address that controls the module (defaults to x/gov unless overwritten).
	Authority string `protobuf:"bytes,1,opt,name=authority,proto3" json:"authority,omitempty"`
	// NOTE: All parameters must be supplied.
	Params Params `protobuf:"bytes,2,opt,name=params,proto3" json:"params"`
}

func (m *MsgUpdateParams) Reset()         { *m = MsgUpdateParams{} }
func (m *MsgUpdateParams) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateParams) ProtoMessage()    {}
func (*MsgUpdateParams) Descriptor() ([]byte, []int) {
	return fileDescriptor_2aab7cf165c3e8a2, []int{0}
}
func (m *MsgUpdateParams) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateParams) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateParams.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateParams) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateParams.Merge(m, src)
}
func (m *MsgUpdateParams) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateParams) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateParams.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateParams proto.InternalMessageInfo

func (m *MsgUpdateParams) GetAuthority() string {
	if m != nil {
		return m.Authority
	}
	return ""
}

func (m *MsgUpdateParams) GetParams() Params {
	if m != nil {
		return m.Params
	}
	return Params{}
}

// MsgUpdateParamsResponse defines the response structure for executing a
// MsgUpdateParams message.
type MsgUpdateParamsResponse struct {
}

func (m *MsgUpdateParamsResponse) Reset()         { *m = MsgUpdateParamsResponse{} }
func (m *MsgUpdateParamsResponse) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateParamsResponse) ProtoMessage()    {}
func (*MsgUpdateParamsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2aab7cf165c3e8a2, []int{1}
}
func (m *MsgUpdateParamsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateParamsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateParamsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateParamsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateParamsResponse.Merge(m, src)
}
func (m *MsgUpdateParamsResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateParamsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateParamsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateParamsResponse proto.InternalMessageInfo

// MsgMintLCT defines the MsgMintLCT message for minting new LCTs.
type MsgMintLCT struct {
	Creator          string            `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	EntityName       string            `protobuf:"bytes,2,opt,name=entity_name,json=entityName,proto3" json:"entity_name,omitempty"`
	EntityType       string            `protobuf:"bytes,3,opt,name=entity_type,json=entityType,proto3" json:"entity_type,omitempty"`
	Metadata         map[string]string `protobuf:"bytes,4,rep,name=metadata,proto3" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	InitialT3Tensor  string            `protobuf:"bytes,5,opt,name=initial_t3_tensor,json=initialT3Tensor,proto3" json:"initial_t3_tensor,omitempty"`
	InitialV3Tensor  string            `protobuf:"bytes,6,opt,name=initial_v3_tensor,json=initialV3Tensor,proto3" json:"initial_v3_tensor,omitempty"`
	InitialAdpAmount string            `protobuf:"bytes,7,opt,name=initial_adp_amount,json=initialAdpAmount,proto3" json:"initial_adp_amount,omitempty"`
}

func (m *MsgMintLCT) Reset()         { *m = MsgMintLCT{} }
func (m *MsgMintLCT) String() string { return proto.CompactTextString(m) }
func (*MsgMintLCT) ProtoMessage()    {}
func (*MsgMintLCT) Descriptor() ([]byte, []int) {
	return fileDescriptor_2aab7cf165c3e8a2, []int{2}
}
func (m *MsgMintLCT) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgMintLCT) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgMintLCT.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgMintLCT) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgMintLCT.Merge(m, src)
}
func (m *MsgMintLCT) XXX_Size() int {
	return m.Size()
}
func (m *MsgMintLCT) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgMintLCT.DiscardUnknown(m)
}

var xxx_messageInfo_MsgMintLCT proto.InternalMessageInfo

func (m *MsgMintLCT) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgMintLCT) GetEntityName() string {
	if m != nil {
		return m.EntityName
	}
	return ""
}

func (m *MsgMintLCT) GetEntityType() string {
	if m != nil {
		return m.EntityType
	}
	return ""
}

func (m *MsgMintLCT) GetMetadata() map[string]string {
	if m != nil {
		return m.Metadata
	}
	return nil
}

func (m *MsgMintLCT) GetInitialT3Tensor() string {
	if m != nil {
		return m.InitialT3Tensor
	}
	return ""
}

func (m *MsgMintLCT) GetInitialV3Tensor() string {
	if m != nil {
		return m.InitialV3Tensor
	}
	return ""
}

func (m *MsgMintLCT) GetInitialAdpAmount() string {
	if m != nil {
		return m.InitialAdpAmount
	}
	return ""
}

// MsgMintLCTResponse defines the response for MsgMintLCT.
type MsgMintLCTResponse struct {
	LctId         string `protobuf:"bytes,1,opt,name=lct_id,json=lctId,proto3" json:"lct_id,omitempty"`
	EntityAddress string `protobuf:"bytes,2,opt,name=entity_address,json=entityAddress,proto3" json:"entity_address,omitempty"`
	AdpBalance    string `protobuf:"bytes,3,opt,name=adp_balance,json=adpBalance,proto3" json:"adp_balance,omitempty"`
	Status        string `protobuf:"bytes,4,opt,name=status,proto3" json:"status,omitempty"`
}

func (m *MsgMintLCTResponse) Reset()         { *m = MsgMintLCTResponse{} }
func (m *MsgMintLCTResponse) String() string { return proto.CompactTextString(m) }
func (*MsgMintLCTResponse) ProtoMessage()    {}
func (*MsgMintLCTResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2aab7cf165c3e8a2, []int{3}
}
func (m *MsgMintLCTResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgMintLCTResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgMintLCTResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgMintLCTResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgMintLCTResponse.Merge(m, src)
}
func (m *MsgMintLCTResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgMintLCTResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgMintLCTResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgMintLCTResponse proto.InternalMessageInfo

func (m *MsgMintLCTResponse) GetLctId() string {
	if m != nil {
		return m.LctId
	}
	return ""
}

func (m *MsgMintLCTResponse) GetEntityAddress() string {
	if m != nil {
		return m.EntityAddress
	}
	return ""
}

func (m *MsgMintLCTResponse) GetAdpBalance() string {
	if m != nil {
		return m.AdpBalance
	}
	return ""
}

func (m *MsgMintLCTResponse) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

// MsgCreateLctRelationship defines the MsgCreateLctRelationship message.
type MsgCreateLctRelationship struct {
	Creator    string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	ComponentA string `protobuf:"bytes,2,opt,name=component_a,json=componentA,proto3" json:"component_a,omitempty"`
	ComponentB string `protobuf:"bytes,3,opt,name=component_b,json=componentB,proto3" json:"component_b,omitempty"`
	Context    string `protobuf:"bytes,4,opt,name=context,proto3" json:"context,omitempty"`
	ProxyId    string `protobuf:"bytes,5,opt,name=proxy_id,json=proxyId,proto3" json:"proxy_id,omitempty"`
}

func (m *MsgCreateLctRelationship) Reset()         { *m = MsgCreateLctRelationship{} }
func (m *MsgCreateLctRelationship) String() string { return proto.CompactTextString(m) }
func (*MsgCreateLctRelationship) ProtoMessage()    {}
func (*MsgCreateLctRelationship) Descriptor() ([]byte, []int) {
	return fileDescriptor_2aab7cf165c3e8a2, []int{4}
}
func (m *MsgCreateLctRelationship) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCreateLctRelationship) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCreateLctRelationship.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCreateLctRelationship) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCreateLctRelationship.Merge(m, src)
}
func (m *MsgCreateLctRelationship) XXX_Size() int {
	return m.Size()
}
func (m *MsgCreateLctRelationship) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCreateLctRelationship.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCreateLctRelationship proto.InternalMessageInfo

func (m *MsgCreateLctRelationship) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgCreateLctRelationship) GetComponentA() string {
	if m != nil {
		return m.ComponentA
	}
	return ""
}

func (m *MsgCreateLctRelationship) GetComponentB() string {
	if m != nil {
		return m.ComponentB
	}
	return ""
}

func (m *MsgCreateLctRelationship) GetContext() string {
	if m != nil {
		return m.Context
	}
	return ""
}

func (m *MsgCreateLctRelationship) GetProxyId() string {
	if m != nil {
		return m.ProxyId
	}
	return ""
}

// MsgCreateLctRelationshipResponse defines the MsgCreateLctRelationshipResponse message.
type MsgCreateLctRelationshipResponse struct {
	LctId       string `protobuf:"bytes,1,opt,name=lct_id,json=lctId,proto3" json:"lct_id,omitempty"`
	KeyExchange string `protobuf:"bytes,2,opt,name=key_exchange,json=keyExchange,proto3" json:"key_exchange,omitempty"`
	Status      string `protobuf:"bytes,3,opt,name=status,proto3" json:"status,omitempty"`
}

func (m *MsgCreateLctRelationshipResponse) Reset()         { *m = MsgCreateLctRelationshipResponse{} }
func (m *MsgCreateLctRelationshipResponse) String() string { return proto.CompactTextString(m) }
func (*MsgCreateLctRelationshipResponse) ProtoMessage()    {}
func (*MsgCreateLctRelationshipResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2aab7cf165c3e8a2, []int{5}
}
func (m *MsgCreateLctRelationshipResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCreateLctRelationshipResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCreateLctRelationshipResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCreateLctRelationshipResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCreateLctRelationshipResponse.Merge(m, src)
}
func (m *MsgCreateLctRelationshipResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgCreateLctRelationshipResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCreateLctRelationshipResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCreateLctRelationshipResponse proto.InternalMessageInfo

func (m *MsgCreateLctRelationshipResponse) GetLctId() string {
	if m != nil {
		return m.LctId
	}
	return ""
}

func (m *MsgCreateLctRelationshipResponse) GetKeyExchange() string {
	if m != nil {
		return m.KeyExchange
	}
	return ""
}

func (m *MsgCreateLctRelationshipResponse) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

// MsgUpdateLctStatus defines the MsgUpdateLctStatus message.
type MsgUpdateLctStatus struct {
	Creator   string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	LctId     string `protobuf:"bytes,2,opt,name=lct_id,json=lctId,proto3" json:"lct_id,omitempty"`
	NewStatus string `protobuf:"bytes,3,opt,name=new_status,json=newStatus,proto3" json:"new_status,omitempty"`
	Reason    string `protobuf:"bytes,4,opt,name=reason,proto3" json:"reason,omitempty"`
}

func (m *MsgUpdateLctStatus) Reset()         { *m = MsgUpdateLctStatus{} }
func (m *MsgUpdateLctStatus) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateLctStatus) ProtoMessage()    {}
func (*MsgUpdateLctStatus) Descriptor() ([]byte, []int) {
	return fileDescriptor_2aab7cf165c3e8a2, []int{6}
}
func (m *MsgUpdateLctStatus) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateLctStatus) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateLctStatus.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateLctStatus) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateLctStatus.Merge(m, src)
}
func (m *MsgUpdateLctStatus) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateLctStatus) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateLctStatus.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateLctStatus proto.InternalMessageInfo

func (m *MsgUpdateLctStatus) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgUpdateLctStatus) GetLctId() string {
	if m != nil {
		return m.LctId
	}
	return ""
}

func (m *MsgUpdateLctStatus) GetNewStatus() string {
	if m != nil {
		return m.NewStatus
	}
	return ""
}

func (m *MsgUpdateLctStatus) GetReason() string {
	if m != nil {
		return m.Reason
	}
	return ""
}

// MsgUpdateLctStatusResponse defines the MsgUpdateLctStatusResponse message.
type MsgUpdateLctStatusResponse struct {
}

func (m *MsgUpdateLctStatusResponse) Reset()         { *m = MsgUpdateLctStatusResponse{} }
func (m *MsgUpdateLctStatusResponse) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateLctStatusResponse) ProtoMessage()    {}
func (*MsgUpdateLctStatusResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2aab7cf165c3e8a2, []int{7}
}
func (m *MsgUpdateLctStatusResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateLctStatusResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateLctStatusResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateLctStatusResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateLctStatusResponse.Merge(m, src)
}
func (m *MsgUpdateLctStatusResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateLctStatusResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateLctStatusResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateLctStatusResponse proto.InternalMessageInfo

// MsgTerminateLctRelationship defines the MsgTerminateLctRelationship message.
type MsgTerminateLctRelationship struct {
	Creator       string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	LctId         string `protobuf:"bytes,2,opt,name=lct_id,json=lctId,proto3" json:"lct_id,omitempty"`
	Reason        string `protobuf:"bytes,3,opt,name=reason,proto3" json:"reason,omitempty"`
	NotifyOffline bool   `protobuf:"varint,4,opt,name=notify_offline,json=notifyOffline,proto3" json:"notify_offline,omitempty"`
}

func (m *MsgTerminateLctRelationship) Reset()         { *m = MsgTerminateLctRelationship{} }
func (m *MsgTerminateLctRelationship) String() string { return proto.CompactTextString(m) }
func (*MsgTerminateLctRelationship) ProtoMessage()    {}
func (*MsgTerminateLctRelationship) Descriptor() ([]byte, []int) {
	return fileDescriptor_2aab7cf165c3e8a2, []int{8}
}
func (m *MsgTerminateLctRelationship) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgTerminateLctRelationship) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgTerminateLctRelationship.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgTerminateLctRelationship) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgTerminateLctRelationship.Merge(m, src)
}
func (m *MsgTerminateLctRelationship) XXX_Size() int {
	return m.Size()
}
func (m *MsgTerminateLctRelationship) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgTerminateLctRelationship.DiscardUnknown(m)
}

var xxx_messageInfo_MsgTerminateLctRelationship proto.InternalMessageInfo

func (m *MsgTerminateLctRelationship) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgTerminateLctRelationship) GetLctId() string {
	if m != nil {
		return m.LctId
	}
	return ""
}

func (m *MsgTerminateLctRelationship) GetReason() string {
	if m != nil {
		return m.Reason
	}
	return ""
}

func (m *MsgTerminateLctRelationship) GetNotifyOffline() bool {
	if m != nil {
		return m.NotifyOffline
	}
	return false
}

// MsgTerminateLctRelationshipResponse defines the MsgTerminateLctRelationshipResponse message.
type MsgTerminateLctRelationshipResponse struct {
}

func (m *MsgTerminateLctRelationshipResponse) Reset()         { *m = MsgTerminateLctRelationshipResponse{} }
func (m *MsgTerminateLctRelationshipResponse) String() string { return proto.CompactTextString(m) }
func (*MsgTerminateLctRelationshipResponse) ProtoMessage()    {}
func (*MsgTerminateLctRelationshipResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2aab7cf165c3e8a2, []int{9}
}
func (m *MsgTerminateLctRelationshipResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgTerminateLctRelationshipResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgTerminateLctRelationshipResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgTerminateLctRelationshipResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgTerminateLctRelationshipResponse.Merge(m, src)
}
func (m *MsgTerminateLctRelationshipResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgTerminateLctRelationshipResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgTerminateLctRelationshipResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgTerminateLctRelationshipResponse proto.InternalMessageInfo

// MsgInitiateLCTMediatedPairing defines the MsgInitiateLCTMediatedPairing message.
type MsgInitiateLCTMediatedPairing struct {
	Creator        string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	InitiatorLctId string `protobuf:"bytes,2,opt,name=initiator_lct_id,json=initiatorLctId,proto3" json:"initiator_lct_id,omitempty"`
	TargetLctId    string `protobuf:"bytes,3,opt,name=target_lct_id,json=targetLctId,proto3" json:"target_lct_id,omitempty"`
	Context        string `protobuf:"bytes,4,opt,name=context,proto3" json:"context,omitempty"`
	ProxyLctId     string `protobuf:"bytes,5,opt,name=proxy_lct_id,json=proxyLctId,proto3" json:"proxy_lct_id,omitempty"`
	ExpiresAt      int64  `protobuf:"varint,6,opt,name=expires_at,json=expiresAt,proto3" json:"expires_at,omitempty"`
}

func (m *MsgInitiateLCTMediatedPairing) Reset()         { *m = MsgInitiateLCTMediatedPairing{} }
func (m *MsgInitiateLCTMediatedPairing) String() string { return proto.CompactTextString(m) }
func (*MsgInitiateLCTMediatedPairing) ProtoMessage()    {}
func (*MsgInitiateLCTMediatedPairing) Descriptor() ([]byte, []int) {
	return fileDescriptor_2aab7cf165c3e8a2, []int{10}
}
func (m *MsgInitiateLCTMediatedPairing) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgInitiateLCTMediatedPairing) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgInitiateLCTMediatedPairing.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgInitiateLCTMediatedPairing) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgInitiateLCTMediatedPairing.Merge(m, src)
}
func (m *MsgInitiateLCTMediatedPairing) XXX_Size() int {
	return m.Size()
}
func (m *MsgInitiateLCTMediatedPairing) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgInitiateLCTMediatedPairing.DiscardUnknown(m)
}

var xxx_messageInfo_MsgInitiateLCTMediatedPairing proto.InternalMessageInfo

func (m *MsgInitiateLCTMediatedPairing) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgInitiateLCTMediatedPairing) GetInitiatorLctId() string {
	if m != nil {
		return m.InitiatorLctId
	}
	return ""
}

func (m *MsgInitiateLCTMediatedPairing) GetTargetLctId() string {
	if m != nil {
		return m.TargetLctId
	}
	return ""
}

func (m *MsgInitiateLCTMediatedPairing) GetContext() string {
	if m != nil {
		return m.Context
	}
	return ""
}

func (m *MsgInitiateLCTMediatedPairing) GetProxyLctId() string {
	if m != nil {
		return m.ProxyLctId
	}
	return ""
}

func (m *MsgInitiateLCTMediatedPairing) GetExpiresAt() int64 {
	if m != nil {
		return m.ExpiresAt
	}
	return 0
}

// MsgInitiateLCTMediatedPairingResponse defines the MsgInitiateLCTMediatedPairingResponse message.
type MsgInitiateLCTMediatedPairingResponse struct {
	PairingId         string `protobuf:"bytes,1,opt,name=pairing_id,json=pairingId,proto3" json:"pairing_id,omitempty"`
	Status            string `protobuf:"bytes,2,opt,name=status,proto3" json:"status,omitempty"`
	ChallengeId       string `protobuf:"bytes,3,opt,name=challenge_id,json=challengeId,proto3" json:"challenge_id,omitempty"`
	ChallengeData     []byte `protobuf:"bytes,4,opt,name=challenge_data,json=challengeData,proto3" json:"challenge_data,omitempty"`
	LctRelationshipId string `protobuf:"bytes,5,opt,name=lct_relationship_id,json=lctRelationshipId,proto3" json:"lct_relationship_id,omitempty"`
}

func (m *MsgInitiateLCTMediatedPairingResponse) Reset()         { *m = MsgInitiateLCTMediatedPairingResponse{} }
func (m *MsgInitiateLCTMediatedPairingResponse) String() string { return proto.CompactTextString(m) }
func (*MsgInitiateLCTMediatedPairingResponse) ProtoMessage()    {}
func (*MsgInitiateLCTMediatedPairingResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2aab7cf165c3e8a2, []int{11}
}
func (m *MsgInitiateLCTMediatedPairingResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgInitiateLCTMediatedPairingResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgInitiateLCTMediatedPairingResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgInitiateLCTMediatedPairingResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgInitiateLCTMediatedPairingResponse.Merge(m, src)
}
func (m *MsgInitiateLCTMediatedPairingResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgInitiateLCTMediatedPairingResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgInitiateLCTMediatedPairingResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgInitiateLCTMediatedPairingResponse proto.InternalMessageInfo

func (m *MsgInitiateLCTMediatedPairingResponse) GetPairingId() string {
	if m != nil {
		return m.PairingId
	}
	return ""
}

func (m *MsgInitiateLCTMediatedPairingResponse) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

func (m *MsgInitiateLCTMediatedPairingResponse) GetChallengeId() string {
	if m != nil {
		return m.ChallengeId
	}
	return ""
}

func (m *MsgInitiateLCTMediatedPairingResponse) GetChallengeData() []byte {
	if m != nil {
		return m.ChallengeData
	}
	return nil
}

func (m *MsgInitiateLCTMediatedPairingResponse) GetLctRelationshipId() string {
	if m != nil {
		return m.LctRelationshipId
	}
	return ""
}

// MsgCompleteLCTMediatedPairing defines the MsgCompleteLCTMediatedPairing message.
type MsgCompleteLCTMediatedPairing struct {
	Creator           string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	PairingId         string `protobuf:"bytes,2,opt,name=pairing_id,json=pairingId,proto3" json:"pairing_id,omitempty"`
	InitiatorResponse string `protobuf:"bytes,3,opt,name=initiator_response,json=initiatorResponse,proto3" json:"initiator_response,omitempty"`
	TargetResponse    string `protobuf:"bytes,4,opt,name=target_response,json=targetResponse,proto3" json:"target_response,omitempty"`
	SessionKeyData    []byte `protobuf:"bytes,5,opt,name=session_key_data,json=sessionKeyData,proto3" json:"session_key_data,omitempty"`
}

func (m *MsgCompleteLCTMediatedPairing) Reset()         { *m = MsgCompleteLCTMediatedPairing{} }
func (m *MsgCompleteLCTMediatedPairing) String() string { return proto.CompactTextString(m) }
func (*MsgCompleteLCTMediatedPairing) ProtoMessage()    {}
func (*MsgCompleteLCTMediatedPairing) Descriptor() ([]byte, []int) {
	return fileDescriptor_2aab7cf165c3e8a2, []int{12}
}
func (m *MsgCompleteLCTMediatedPairing) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCompleteLCTMediatedPairing) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCompleteLCTMediatedPairing.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCompleteLCTMediatedPairing) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCompleteLCTMediatedPairing.Merge(m, src)
}
func (m *MsgCompleteLCTMediatedPairing) XXX_Size() int {
	return m.Size()
}
func (m *MsgCompleteLCTMediatedPairing) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCompleteLCTMediatedPairing.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCompleteLCTMediatedPairing proto.InternalMessageInfo

func (m *MsgCompleteLCTMediatedPairing) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgCompleteLCTMediatedPairing) GetPairingId() string {
	if m != nil {
		return m.PairingId
	}
	return ""
}

func (m *MsgCompleteLCTMediatedPairing) GetInitiatorResponse() string {
	if m != nil {
		return m.InitiatorResponse
	}
	return ""
}

func (m *MsgCompleteLCTMediatedPairing) GetTargetResponse() string {
	if m != nil {
		return m.TargetResponse
	}
	return ""
}

func (m *MsgCompleteLCTMediatedPairing) GetSessionKeyData() []byte {
	if m != nil {
		return m.SessionKeyData
	}
	return nil
}

// MsgCompleteLCTMediatedPairingResponse defines the MsgCompleteLCTMediatedPairingResponse message.
type MsgCompleteLCTMediatedPairingResponse struct {
	PairingId                    string `protobuf:"bytes,1,opt,name=pairing_id,json=pairingId,proto3" json:"pairing_id,omitempty"`
	Status                       string `protobuf:"bytes,2,opt,name=status,proto3" json:"status,omitempty"`
	LctRelationshipId            string `protobuf:"bytes,3,opt,name=lct_relationship_id,json=lctRelationshipId,proto3" json:"lct_relationship_id,omitempty"`
	EncryptedSessionKeyInitiator []byte `protobuf:"bytes,4,opt,name=encrypted_session_key_initiator,json=encryptedSessionKeyInitiator,proto3" json:"encrypted_session_key_initiator,omitempty"`
	EncryptedSessionKeyTarget    []byte `protobuf:"bytes,5,opt,name=encrypted_session_key_target,json=encryptedSessionKeyTarget,proto3" json:"encrypted_session_key_target,omitempty"`
	HashedCombinedSessionKey     []byte `protobuf:"bytes,6,opt,name=hashed_combined_session_key,json=hashedCombinedSessionKey,proto3" json:"hashed_combined_session_key,omitempty"`
	TrustScore                   string `protobuf:"bytes,7,opt,name=trust_score,json=trustScore,proto3" json:"trust_score,omitempty"`
}

func (m *MsgCompleteLCTMediatedPairingResponse) Reset()         { *m = MsgCompleteLCTMediatedPairingResponse{} }
func (m *MsgCompleteLCTMediatedPairingResponse) String() string { return proto.CompactTextString(m) }
func (*MsgCompleteLCTMediatedPairingResponse) ProtoMessage()    {}
func (*MsgCompleteLCTMediatedPairingResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2aab7cf165c3e8a2, []int{13}
}
func (m *MsgCompleteLCTMediatedPairingResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCompleteLCTMediatedPairingResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCompleteLCTMediatedPairingResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCompleteLCTMediatedPairingResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCompleteLCTMediatedPairingResponse.Merge(m, src)
}
func (m *MsgCompleteLCTMediatedPairingResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgCompleteLCTMediatedPairingResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCompleteLCTMediatedPairingResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCompleteLCTMediatedPairingResponse proto.InternalMessageInfo

func (m *MsgCompleteLCTMediatedPairingResponse) GetPairingId() string {
	if m != nil {
		return m.PairingId
	}
	return ""
}

func (m *MsgCompleteLCTMediatedPairingResponse) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

func (m *MsgCompleteLCTMediatedPairingResponse) GetLctRelationshipId() string {
	if m != nil {
		return m.LctRelationshipId
	}
	return ""
}

func (m *MsgCompleteLCTMediatedPairingResponse) GetEncryptedSessionKeyInitiator() []byte {
	if m != nil {
		return m.EncryptedSessionKeyInitiator
	}
	return nil
}

func (m *MsgCompleteLCTMediatedPairingResponse) GetEncryptedSessionKeyTarget() []byte {
	if m != nil {
		return m.EncryptedSessionKeyTarget
	}
	return nil
}

func (m *MsgCompleteLCTMediatedPairingResponse) GetHashedCombinedSessionKey() []byte {
	if m != nil {
		return m.HashedCombinedSessionKey
	}
	return nil
}

func (m *MsgCompleteLCTMediatedPairingResponse) GetTrustScore() string {
	if m != nil {
		return m.TrustScore
	}
	return ""
}

// MsgEncryptLCTMessage defines the MsgEncryptLCTMessage message.
type MsgEncryptLCTMessage struct {
	Creator string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	LctId   string `protobuf:"bytes,2,opt,name=lct_id,json=lctId,proto3" json:"lct_id,omitempty"`
	Message []byte `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"`
}

func (m *MsgEncryptLCTMessage) Reset()         { *m = MsgEncryptLCTMessage{} }
func (m *MsgEncryptLCTMessage) String() string { return proto.CompactTextString(m) }
func (*MsgEncryptLCTMessage) ProtoMessage()    {}
func (*MsgEncryptLCTMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_2aab7cf165c3e8a2, []int{14}
}
func (m *MsgEncryptLCTMessage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgEncryptLCTMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgEncryptLCTMessage.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgEncryptLCTMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgEncryptLCTMessage.Merge(m, src)
}
func (m *MsgEncryptLCTMessage) XXX_Size() int {
	return m.Size()
}
func (m *MsgEncryptLCTMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgEncryptLCTMessage.DiscardUnknown(m)
}

var xxx_messageInfo_MsgEncryptLCTMessage proto.InternalMessageInfo

func (m *MsgEncryptLCTMessage) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgEncryptLCTMessage) GetLctId() string {
	if m != nil {
		return m.LctId
	}
	return ""
}

func (m *MsgEncryptLCTMessage) GetMessage() []byte {
	if m != nil {
		return m.Message
	}
	return nil
}

// MsgEncryptLCTMessageResponse defines the MsgEncryptLCTMessageResponse message.
type MsgEncryptLCTMessageResponse struct {
	LctId            string `protobuf:"bytes,1,opt,name=lct_id,json=lctId,proto3" json:"lct_id,omitempty"`
	EncryptedMessage []byte `protobuf:"bytes,2,opt,name=encrypted_message,json=encryptedMessage,proto3" json:"encrypted_message,omitempty"`
	Status           string `protobuf:"bytes,3,opt,name=status,proto3" json:"status,omitempty"`
}

func (m *MsgEncryptLCTMessageResponse) Reset()         { *m = MsgEncryptLCTMessageResponse{} }
func (m *MsgEncryptLCTMessageResponse) String() string { return proto.CompactTextString(m) }
func (*MsgEncryptLCTMessageResponse) ProtoMessage()    {}
func (*MsgEncryptLCTMessageResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2aab7cf165c3e8a2, []int{15}
}
func (m *MsgEncryptLCTMessageResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgEncryptLCTMessageResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgEncryptLCTMessageResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgEncryptLCTMessageResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgEncryptLCTMessageResponse.Merge(m, src)
}
func (m *MsgEncryptLCTMessageResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgEncryptLCTMessageResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgEncryptLCTMessageResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgEncryptLCTMessageResponse proto.InternalMessageInfo

func (m *MsgEncryptLCTMessageResponse) GetLctId() string {
	if m != nil {
		return m.LctId
	}
	return ""
}

func (m *MsgEncryptLCTMessageResponse) GetEncryptedMessage() []byte {
	if m != nil {
		return m.EncryptedMessage
	}
	return nil
}

func (m *MsgEncryptLCTMessageResponse) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

// MsgGenerateLCTChallenge defines the MsgGenerateLCTChallenge message.
type MsgGenerateLCTChallenge struct {
	Creator string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	LctId   string `protobuf:"bytes,2,opt,name=lct_id,json=lctId,proto3" json:"lct_id,omitempty"`
}

func (m *MsgGenerateLCTChallenge) Reset()         { *m = MsgGenerateLCTChallenge{} }
func (m *MsgGenerateLCTChallenge) String() string { return proto.CompactTextString(m) }
func (*MsgGenerateLCTChallenge) ProtoMessage()    {}
func (*MsgGenerateLCTChallenge) Descriptor() ([]byte, []int) {
	return fileDescriptor_2aab7cf165c3e8a2, []int{16}
}
func (m *MsgGenerateLCTChallenge) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgGenerateLCTChallenge) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgGenerateLCTChallenge.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgGenerateLCTChallenge) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgGenerateLCTChallenge.Merge(m, src)
}
func (m *MsgGenerateLCTChallenge) XXX_Size() int {
	return m.Size()
}
func (m *MsgGenerateLCTChallenge) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgGenerateLCTChallenge.DiscardUnknown(m)
}

var xxx_messageInfo_MsgGenerateLCTChallenge proto.InternalMessageInfo

func (m *MsgGenerateLCTChallenge) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgGenerateLCTChallenge) GetLctId() string {
	if m != nil {
		return m.LctId
	}
	return ""
}

// MsgGenerateLCTChallengeResponse defines the MsgGenerateLCTChallengeResponse message.
type MsgGenerateLCTChallengeResponse struct {
	LctId     string `protobuf:"bytes,1,opt,name=lct_id,json=lctId,proto3" json:"lct_id,omitempty"`
	Challenge []byte `protobuf:"bytes,2,opt,name=challenge,proto3" json:"challenge,omitempty"`
	Status    string `protobuf:"bytes,3,opt,name=status,proto3" json:"status,omitempty"`
}

func (m *MsgGenerateLCTChallengeResponse) Reset()         { *m = MsgGenerateLCTChallengeResponse{} }
func (m *MsgGenerateLCTChallengeResponse) String() string { return proto.CompactTextString(m) }
func (*MsgGenerateLCTChallengeResponse) ProtoMessage()    {}
func (*MsgGenerateLCTChallengeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2aab7cf165c3e8a2, []int{17}
}
func (m *MsgGenerateLCTChallengeResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgGenerateLCTChallengeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgGenerateLCTChallengeResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgGenerateLCTChallengeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgGenerateLCTChallengeResponse.Merge(m, src)
}
func (m *MsgGenerateLCTChallengeResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgGenerateLCTChallengeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgGenerateLCTChallengeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgGenerateLCTChallengeResponse proto.InternalMessageInfo

func (m *MsgGenerateLCTChallengeResponse) GetLctId() string {
	if m != nil {
		return m.LctId
	}
	return ""
}

func (m *MsgGenerateLCTChallengeResponse) GetChallenge() []byte {
	if m != nil {
		return m.Challenge
	}
	return nil
}

func (m *MsgGenerateLCTChallengeResponse) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

// MsgVerifyLCTChallenge defines the MsgVerifyLCTChallenge message.
type MsgVerifyLCTChallenge struct {
	Creator   string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	LctId     string `protobuf:"bytes,2,opt,name=lct_id,json=lctId,proto3" json:"lct_id,omitempty"`
	Challenge []byte `protobuf:"bytes,3,opt,name=challenge,proto3" json:"challenge,omitempty"`
	Response  []byte `protobuf:"bytes,4,opt,name=response,proto3" json:"response,omitempty"`
}

func (m *MsgVerifyLCTChallenge) Reset()         { *m = MsgVerifyLCTChallenge{} }
func (m *MsgVerifyLCTChallenge) String() string { return proto.CompactTextString(m) }
func (*MsgVerifyLCTChallenge) ProtoMessage()    {}
func (*MsgVerifyLCTChallenge) Descriptor() ([]byte, []int) {
	return fileDescriptor_2aab7cf165c3e8a2, []int{18}
}
func (m *MsgVerifyLCTChallenge) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgVerifyLCTChallenge) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgVerifyLCTChallenge.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgVerifyLCTChallenge) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgVerifyLCTChallenge.Merge(m, src)
}
func (m *MsgVerifyLCTChallenge) XXX_Size() int {
	return m.Size()
}
func (m *MsgVerifyLCTChallenge) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgVerifyLCTChallenge.DiscardUnknown(m)
}

var xxx_messageInfo_MsgVerifyLCTChallenge proto.InternalMessageInfo

func (m *MsgVerifyLCTChallenge) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgVerifyLCTChallenge) GetLctId() string {
	if m != nil {
		return m.LctId
	}
	return ""
}

func (m *MsgVerifyLCTChallenge) GetChallenge() []byte {
	if m != nil {
		return m.Challenge
	}
	return nil
}

func (m *MsgVerifyLCTChallenge) GetResponse() []byte {
	if m != nil {
		return m.Response
	}
	return nil
}

// MsgVerifyLCTChallengeResponse defines the MsgVerifyLCTChallengeResponse message.
type MsgVerifyLCTChallengeResponse struct {
	LctId    string `protobuf:"bytes,1,opt,name=lct_id,json=lctId,proto3" json:"lct_id,omitempty"`
	Verified bool   `protobuf:"varint,2,opt,name=verified,proto3" json:"verified,omitempty"`
	Status   string `protobuf:"bytes,3,opt,name=status,proto3" json:"status,omitempty"`
}

func (m *MsgVerifyLCTChallengeResponse) Reset()         { *m = MsgVerifyLCTChallengeResponse{} }
func (m *MsgVerifyLCTChallengeResponse) String() string { return proto.CompactTextString(m) }
func (*MsgVerifyLCTChallengeResponse) ProtoMessage()    {}
func (*MsgVerifyLCTChallengeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2aab7cf165c3e8a2, []int{19}
}
func (m *MsgVerifyLCTChallengeResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgVerifyLCTChallengeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgVerifyLCTChallengeResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgVerifyLCTChallengeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgVerifyLCTChallengeResponse.Merge(m, src)
}
func (m *MsgVerifyLCTChallengeResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgVerifyLCTChallengeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgVerifyLCTChallengeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgVerifyLCTChallengeResponse proto.InternalMessageInfo

func (m *MsgVerifyLCTChallengeResponse) GetLctId() string {
	if m != nil {
		return m.LctId
	}
	return ""
}

func (m *MsgVerifyLCTChallengeResponse) GetVerified() bool {
	if m != nil {
		return m.Verified
	}
	return false
}

func (m *MsgVerifyLCTChallengeResponse) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

func init() {
	proto.RegisterType((*MsgUpdateParams)(nil), "racecarweb.lctmanager.v1.MsgUpdateParams")
	proto.RegisterType((*MsgUpdateParamsResponse)(nil), "racecarweb.lctmanager.v1.MsgUpdateParamsResponse")
	proto.RegisterType((*MsgMintLCT)(nil), "racecarweb.lctmanager.v1.MsgMintLCT")
	proto.RegisterMapType((map[string]string)(nil), "racecarweb.lctmanager.v1.MsgMintLCT.MetadataEntry")
	proto.RegisterType((*MsgMintLCTResponse)(nil), "racecarweb.lctmanager.v1.MsgMintLCTResponse")
	proto.RegisterType((*MsgCreateLctRelationship)(nil), "racecarweb.lctmanager.v1.MsgCreateLctRelationship")
	proto.RegisterType((*MsgCreateLctRelationshipResponse)(nil), "racecarweb.lctmanager.v1.MsgCreateLctRelationshipResponse")
	proto.RegisterType((*MsgUpdateLctStatus)(nil), "racecarweb.lctmanager.v1.MsgUpdateLctStatus")
	proto.RegisterType((*MsgUpdateLctStatusResponse)(nil), "racecarweb.lctmanager.v1.MsgUpdateLctStatusResponse")
	proto.RegisterType((*MsgTerminateLctRelationship)(nil), "racecarweb.lctmanager.v1.MsgTerminateLctRelationship")
	proto.RegisterType((*MsgTerminateLctRelationshipResponse)(nil), "racecarweb.lctmanager.v1.MsgTerminateLctRelationshipResponse")
	proto.RegisterType((*MsgInitiateLCTMediatedPairing)(nil), "racecarweb.lctmanager.v1.MsgInitiateLCTMediatedPairing")
	proto.RegisterType((*MsgInitiateLCTMediatedPairingResponse)(nil), "racecarweb.lctmanager.v1.MsgInitiateLCTMediatedPairingResponse")
	proto.RegisterType((*MsgCompleteLCTMediatedPairing)(nil), "racecarweb.lctmanager.v1.MsgCompleteLCTMediatedPairing")
	proto.RegisterType((*MsgCompleteLCTMediatedPairingResponse)(nil), "racecarweb.lctmanager.v1.MsgCompleteLCTMediatedPairingResponse")
	proto.RegisterType((*MsgEncryptLCTMessage)(nil), "racecarweb.lctmanager.v1.MsgEncryptLCTMessage")
	proto.RegisterType((*MsgEncryptLCTMessageResponse)(nil), "racecarweb.lctmanager.v1.MsgEncryptLCTMessageResponse")
	proto.RegisterType((*MsgGenerateLCTChallenge)(nil), "racecarweb.lctmanager.v1.MsgGenerateLCTChallenge")
	proto.RegisterType((*MsgGenerateLCTChallengeResponse)(nil), "racecarweb.lctmanager.v1.MsgGenerateLCTChallengeResponse")
	proto.RegisterType((*MsgVerifyLCTChallenge)(nil), "racecarweb.lctmanager.v1.MsgVerifyLCTChallenge")
	proto.RegisterType((*MsgVerifyLCTChallengeResponse)(nil), "racecarweb.lctmanager.v1.MsgVerifyLCTChallengeResponse")
}

func init() { proto.RegisterFile("racecarweb/lctmanager/v1/tx.proto", fileDescriptor_2aab7cf165c3e8a2) }

var fileDescriptor_2aab7cf165c3e8a2 = []byte{
	// 1471 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x58, 0x4d, 0x4f, 0x1c, 0x47,
	0x13, 0x66, 0x76, 0xcd, 0xc7, 0x16, 0xcb, 0xd7, 0xbc, 0xd8, 0x5e, 0xc6, 0x18, 0xf0, 0xbe, 0x2f,
	0x32, 0x2f, 0xb1, 0x17, 0x19, 0x27, 0xb6, 0x43, 0x64, 0x59, 0x40, 0x50, 0x84, 0xc2, 0x3a, 0xd6,
	0x40, 0x7c, 0x88, 0x14, 0x8d, 0x9a, 0x99, 0x66, 0x98, 0x78, 0xa7, 0x67, 0x34, 0xdd, 0x60, 0x36,
	0x91, 0xa2, 0xc8, 0x8a, 0x14, 0xc5, 0xb9, 0xf8, 0x94, 0x3f, 0xe0, 0x1c, 0xa2, 0x9c, 0x38, 0x24,
	0xff, 0xc1, 0xca, 0xc9, 0x4a, 0x2e, 0x3e, 0x45, 0x91, 0x7d, 0xe0, 0x1f, 0xe4, 0x1c, 0x4d, 0x77,
	0x4f, 0xcf, 0xee, 0xb2, 0xb3, 0x7c, 0x84, 0x5c, 0xd0, 0x76, 0xf5, 0x53, 0xd5, 0xf5, 0x3c, 0xd5,
	0xd5, 0xdd, 0x03, 0x5c, 0x89, 0x90, 0x8d, 0x6d, 0x14, 0x3d, 0xc6, 0x9b, 0x73, 0x35, 0x9b, 0xf9,
	0x88, 0x20, 0x17, 0x47, 0x73, 0xbb, 0x37, 0xe6, 0xd8, 0x5e, 0x25, 0x8c, 0x02, 0x16, 0xe8, 0xa5,
	0x14, 0x52, 0x49, 0x21, 0x95, 0xdd, 0x1b, 0xc6, 0x08, 0xf2, 0x3d, 0x12, 0xcc, 0xf1, 0xbf, 0x02,
	0x6c, 0x5c, 0xb4, 0x03, 0xea, 0x07, 0x74, 0xce, 0xa7, 0x6e, 0x1c, 0xc4, 0xa7, 0xae, 0x9c, 0x18,
	0x13, 0x13, 0x16, 0x1f, 0xcd, 0x89, 0x81, 0x9c, 0x1a, 0x75, 0x03, 0x37, 0x10, 0xf6, 0xf8, 0x97,
	0xb4, 0x4e, 0x67, 0x66, 0x16, 0xa2, 0x08, 0xf9, 0xd2, 0xb9, 0xfc, 0xab, 0x06, 0x43, 0x55, 0xea,
	0x7e, 0x1c, 0x3a, 0x88, 0xe1, 0x07, 0x7c, 0x46, 0xbf, 0x05, 0x05, 0xb4, 0xc3, 0xb6, 0x83, 0xc8,
	0x63, 0xf5, 0x92, 0x36, 0xa5, 0xcd, 0x14, 0x96, 0x4a, 0xbf, 0xfd, 0x7c, 0x7d, 0x54, 0xae, 0xba,
	0xe8, 0x38, 0x11, 0xa6, 0x74, 0x9d, 0x45, 0x1e, 0x71, 0xcd, 0x14, 0xaa, 0x2f, 0x43, 0x8f, 0x88,
	0x5d, 0xca, 0x4d, 0x69, 0x33, 0xfd, 0xf3, 0x53, 0x95, 0x2c, 0xea, 0x15, 0xb1, 0xd2, 0x52, 0xe1,
	0xc5, 0x1f, 0x93, 0x5d, 0x3f, 0x1e, 0xec, 0xcf, 0x6a, 0xa6, 0x74, 0x5d, 0x58, 0x78, 0x72, 0xb0,
	0x3f, 0x9b, 0x06, 0x7d, 0x7a, 0xb0, 0x3f, 0x7b, 0xb5, 0x81, 0xca, 0x5e, 0x23, 0x99, 0x96, 0xc4,
	0xcb, 0x63, 0x70, 0xb1, 0xc5, 0x64, 0x62, 0x1a, 0x06, 0x84, 0xe2, 0xf2, 0xf3, 0x3c, 0x40, 0x95,
	0xba, 0x55, 0x8f, 0xb0, 0xb5, 0xe5, 0x0d, 0x7d, 0x1e, 0x7a, 0xed, 0x08, 0x23, 0x16, 0x44, 0x47,
	0x12, 0x4c, 0x80, 0xfa, 0x24, 0xf4, 0x63, 0xc2, 0x3c, 0x56, 0xb7, 0x08, 0xf2, 0x31, 0xe7, 0x58,
	0x30, 0x41, 0x98, 0xee, 0x23, 0x1f, 0x37, 0x00, 0x58, 0x3d, 0xc4, 0xa5, 0x7c, 0x23, 0x60, 0xa3,
	0x1e, 0x62, 0xfd, 0x3e, 0xf4, 0xf9, 0x98, 0x21, 0x07, 0x31, 0x54, 0x3a, 0x37, 0x95, 0x9f, 0xe9,
	0x9f, 0x9f, 0xcf, 0x96, 0x28, 0xcd, 0xb6, 0x52, 0x95, 0x4e, 0x2b, 0x84, 0x45, 0x75, 0x53, 0xc5,
	0xd0, 0x67, 0x61, 0xc4, 0x23, 0x1e, 0xf3, 0x50, 0xcd, 0x62, 0x37, 0x2d, 0x86, 0x09, 0x0d, 0xa2,
	0x52, 0x37, 0x5f, 0x76, 0x48, 0x4e, 0x6c, 0xdc, 0xdc, 0xe0, 0xe6, 0x46, 0xec, 0xae, 0xc2, 0xf6,
	0x34, 0x61, 0x1f, 0x26, 0xd8, 0x6b, 0xa0, 0x27, 0x58, 0xe4, 0x84, 0x16, 0xf2, 0x83, 0x1d, 0xc2,
	0x4a, 0xbd, 0x1c, 0x3c, 0x2c, 0x67, 0x16, 0x9d, 0x70, 0x91, 0xdb, 0x8d, 0xf7, 0x60, 0xa0, 0x29,
	0x41, 0x7d, 0x18, 0xf2, 0x8f, 0xb0, 0xdc, 0x39, 0x66, 0xfc, 0x53, 0x1f, 0x85, 0xee, 0x5d, 0x54,
	0xdb, 0x49, 0x44, 0x13, 0x83, 0x85, 0xdc, 0x1d, 0x6d, 0xa1, 0x18, 0x97, 0x3b, 0x91, 0xb8, 0xfc,
	0x9d, 0x06, 0x7a, 0xca, 0x3b, 0x29, 0x9e, 0x7e, 0x1e, 0x7a, 0x6a, 0x36, 0xb3, 0x3c, 0x47, 0xc6,
	0xec, 0xae, 0xd9, 0x6c, 0xd5, 0xd1, 0xa7, 0x61, 0x50, 0xea, 0x8d, 0x44, 0xc5, 0x64, 0xf8, 0x01,
	0x61, 0x95, 0x65, 0x8c, 0xcb, 0x12, 0xb3, 0xd8, 0x44, 0x35, 0x44, 0x6c, 0x55, 0x16, 0xe4, 0x84,
	0x4b, 0xc2, 0xa2, 0x5f, 0x80, 0x1e, 0xca, 0x10, 0xdb, 0xa1, 0xa5, 0x73, 0x7c, 0x4e, 0x8e, 0xca,
	0xbf, 0x6b, 0x50, 0xaa, 0x52, 0x77, 0x39, 0x4e, 0x0e, 0xaf, 0xd9, 0xcc, 0xc4, 0x35, 0xc4, 0xbc,
	0x80, 0xd0, 0x6d, 0x2f, 0x3c, 0xed, 0x0e, 0xb2, 0x03, 0x3f, 0x0c, 0x08, 0x26, 0xcc, 0x42, 0xc9,
	0x0e, 0x52, 0xa6, 0xc5, 0x66, 0xc0, 0x66, 0x92, 0xaa, 0x32, 0x2d, 0xe9, 0x25, 0xe8, 0xb5, 0x03,
	0xc2, 0xf0, 0x1e, 0x93, 0xb9, 0x26, 0x43, 0x7d, 0x0c, 0xfa, 0xc2, 0x28, 0xd8, 0xab, 0xc7, 0x2a,
	0x89, 0x2d, 0xd0, 0xcb, 0xc7, 0xab, 0x4e, 0x8b, 0xc6, 0x0c, 0xa6, 0xb2, 0x48, 0x1d, 0x25, 0xf8,
	0x15, 0x28, 0x3e, 0xc2, 0x75, 0x0b, 0xef, 0xd9, 0xdb, 0x88, 0xb8, 0x49, 0x35, 0xfb, 0x1f, 0xe1,
	0xfa, 0x8a, 0x34, 0x35, 0x68, 0x99, 0x6f, 0xd2, 0xf2, 0x07, 0x51, 0x59, 0xd1, 0x9b, 0x6b, 0x36,
	0x5b, 0xe7, 0xe6, 0x53, 0xa9, 0x98, 0x26, 0x97, 0x6b, 0x4c, 0xee, 0x32, 0x00, 0xc1, 0x8f, 0xad,
	0xa6, 0xd5, 0x0b, 0x04, 0x3f, 0x96, 0x2b, 0x5d, 0x80, 0x9e, 0x08, 0x23, 0x1a, 0x90, 0xa4, 0xc8,
	0x62, 0xd4, 0x22, 0xce, 0x38, 0x18, 0x87, 0xb3, 0x54, 0x87, 0xc8, 0x2f, 0x1a, 0x5c, 0xaa, 0x52,
	0x77, 0x03, 0x47, 0xbe, 0x47, 0xce, 0x68, 0x4f, 0x64, 0xb0, 0x49, 0xd3, 0xcd, 0x37, 0xa6, 0x1b,
	0xef, 0x79, 0x12, 0x30, 0x6f, 0xab, 0x6e, 0x05, 0x5b, 0x5b, 0x35, 0x8f, 0x60, 0x4e, 0xa7, 0xcf,
	0x1c, 0x10, 0xd6, 0x8f, 0x84, 0xb1, 0x85, 0xd5, 0x34, 0xfc, 0xb7, 0x43, 0xda, 0x8a, 0xde, 0xd3,
	0x1c, 0x5c, 0xae, 0x52, 0x77, 0x95, 0x37, 0x38, 0xc3, 0x6b, 0xcb, 0x1b, 0x55, 0xec, 0xc4, 0xbf,
	0x9c, 0x07, 0xc8, 0x8b, 0xb3, 0x3e, 0x15, 0xc1, 0x19, 0x90, 0x47, 0x06, 0x0b, 0x22, 0xab, 0x89,
	0xea, 0xa0, 0xb2, 0xaf, 0x71, 0xce, 0x65, 0x18, 0x60, 0x28, 0x72, 0x31, 0x4b, 0x60, 0x82, 0x7a,
	0xbf, 0x30, 0x0a, 0x4c, 0x76, 0x03, 0x4c, 0x41, 0x51, 0x34, 0x80, 0x74, 0x16, 0x4d, 0x00, 0xdc,
	0xb6, 0x96, 0xec, 0x10, 0xbc, 0x17, 0x7a, 0x11, 0xa6, 0x16, 0x62, 0xfc, 0xec, 0xcb, 0x9b, 0x05,
	0x69, 0x59, 0x64, 0x2d, 0x9a, 0xbd, 0xd2, 0x60, 0xba, 0xa3, 0x18, 0xaa, 0x59, 0x2e, 0x03, 0x84,
	0xc2, 0x94, 0x36, 0x4c, 0x41, 0x5a, 0x44, 0x25, 0xe5, 0x9e, 0xcc, 0x35, 0x76, 0x44, 0xdc, 0x4c,
	0xf6, 0x36, 0xaa, 0xd5, 0x30, 0x71, 0x71, 0x03, 0x59, 0x65, 0x13, 0x07, 0x5c, 0x0a, 0x91, 0xb7,
	0x86, 0x36, 0x53, 0x34, 0x07, 0x94, 0xf5, 0xfd, 0xf8, 0x1a, 0xa8, 0xc0, 0x7f, 0x62, 0xce, 0x51,
	0x43, 0x4d, 0x53, 0x01, 0x46, 0x6a, 0xcd, 0xd5, 0x5e, 0x75, 0xca, 0x4f, 0x44, 0x9d, 0x97, 0x03,
	0x3f, 0xac, 0xe1, 0x33, 0xab, 0x73, 0xb3, 0x0c, 0xb9, 0x56, 0x19, 0xae, 0x27, 0x77, 0x4a, 0xbc,
	0x0d, 0x22, 0xa9, 0x9d, 0x24, 0x3d, 0xa2, 0x66, 0x94, 0xa8, 0x57, 0x61, 0x48, 0xee, 0x05, 0x85,
	0x15, 0xf5, 0x1e, 0x14, 0x66, 0x05, 0x9c, 0x81, 0x61, 0x8a, 0x29, 0xf5, 0x02, 0x62, 0xc5, 0x67,
	0x13, 0x57, 0xa9, 0x9b, 0xab, 0x34, 0x28, 0xed, 0x1f, 0xe2, 0x7a, 0x2c, 0x53, 0x4b, 0x7d, 0xff,
	0xca, 0xf1, 0xfa, 0x66, 0x8b, 0xf0, 0x4f, 0xeb, 0x9b, 0x51, 0x95, 0x7c, 0x46, 0x55, 0xf4, 0x15,
	0x98, 0xc4, 0xc4, 0x8e, 0xea, 0x21, 0xc3, 0x8e, 0xd5, 0x48, 0x49, 0x89, 0x23, 0xab, 0x3f, 0xae,
	0x60, 0xeb, 0x8a, 0xe0, 0x6a, 0x82, 0xd1, 0xef, 0xc1, 0x78, 0xfb, 0x30, 0x42, 0x37, 0xa9, 0xcd,
	0x58, 0x9b, 0x18, 0x1b, 0x1c, 0xa0, 0xdf, 0x85, 0x4b, 0xdb, 0x88, 0x6e, 0x63, 0xc7, 0xb2, 0x03,
	0x7f, 0xd3, 0x23, 0xcd, 0x61, 0x78, 0xdb, 0x14, 0xcd, 0x92, 0x80, 0x2c, 0x4b, 0x44, 0x1a, 0x24,
	0xbe, 0xc2, 0x58, 0xb4, 0x43, 0x99, 0x45, 0xed, 0x20, 0xc2, 0xf2, 0xd1, 0x00, 0xdc, 0xb4, 0x1e,
	0x5b, 0xca, 0xdf, 0x6a, 0x30, 0x5a, 0xa5, 0xee, 0x8a, 0x48, 0x80, 0xeb, 0x4e, 0x29, 0x72, 0xf1,
	0x59, 0x9e, 0x9e, 0x25, 0xe8, 0xf5, 0x45, 0x54, 0xae, 0x77, 0xd1, 0x4c, 0x86, 0x2d, 0x9b, 0xe0,
	0x73, 0x18, 0x6f, 0x97, 0xca, 0x51, 0xf7, 0xe0, 0x5b, 0x30, 0x92, 0x6a, 0x9c, 0x2c, 0x94, 0xe3,
	0x0b, 0x0d, 0xab, 0x89, 0x84, 0x56, 0xd6, 0x8d, 0x18, 0xf1, 0xc7, 0xea, 0x07, 0x98, 0xe0, 0x48,
	0x9c, 0x2f, 0xcb, 0x49, 0x53, 0x9f, 0xa1, 0x12, 0x2d, 0x7c, 0x09, 0x4c, 0x66, 0xac, 0x79, 0x14,
	0xe5, 0x71, 0x28, 0xa8, 0x43, 0x47, 0x52, 0x4d, 0x0d, 0x99, 0x1c, 0x7f, 0xd2, 0xe0, 0x7c, 0x95,
	0xba, 0x0f, 0x71, 0xe4, 0x6d, 0xd5, 0xff, 0x25, 0x8a, 0xcd, 0xa9, 0xe5, 0x5b, 0x53, 0x33, 0xa0,
	0xaf, 0xe9, 0x04, 0x29, 0x9a, 0x6a, 0xdc, 0x22, 0xce, 0x67, 0xfc, 0x54, 0x3c, 0x9c, 0xeb, 0x51,
	0xd2, 0x18, 0xd0, 0xb7, 0x1b, 0x3b, 0x79, 0x58, 0x24, 0xd6, 0x67, 0xaa, 0x71, 0x96, 0x30, 0xf3,
	0xcf, 0x01, 0xf2, 0x55, 0xea, 0xea, 0x35, 0x28, 0x36, 0x7d, 0x7a, 0xfd, 0xbf, 0xe3, 0xf7, 0x40,
	0x23, 0xd4, 0xb8, 0x71, 0x6c, 0xa8, 0x22, 0xf0, 0x29, 0xf4, 0x26, 0x1f, 0x40, 0xff, 0x3b, 0xce,
	0x87, 0x87, 0x71, 0xed, 0x38, 0x28, 0x15, 0xfe, 0x1b, 0x0d, 0xce, 0x67, 0x3c, 0x96, 0x3b, 0xc6,
	0x69, 0xeb, 0x63, 0x2c, 0x9c, 0xdc, 0x47, 0x65, 0xb2, 0x03, 0x43, 0xad, 0x2f, 0xcd, 0x6b, 0xc7,
	0x90, 0x4b, 0xa1, 0x8d, 0xb7, 0x4f, 0x82, 0x56, 0xcb, 0x3e, 0xd3, 0xa0, 0x94, 0xf9, 0x38, 0x7c,
	0xa7, 0x63, 0xc8, 0x2c, 0x37, 0xe3, 0xee, 0xa9, 0xdc, 0x54, 0x4a, 0xdf, 0x6b, 0x60, 0x74, 0x78,
	0xd0, 0xdd, 0xee, 0x18, 0x3d, 0xdb, 0xd1, 0xb8, 0x77, 0x4a, 0xc7, 0xa6, 0xc4, 0x3a, 0xbc, 0x40,
	0x3a, 0x27, 0x96, 0xed, 0x78, 0x44, 0x62, 0xc7, 0xb8, 0xee, 0xbf, 0x80, 0x91, 0xc3, 0x77, 0x53,
	0xa5, 0x63, 0xd4, 0x43, 0x78, 0xe3, 0xd6, 0xc9, 0xf0, 0x6a, 0xf1, 0xaf, 0x35, 0x18, 0x6d, 0x7b,
	0x25, 0x74, 0xee, 0xf6, 0x76, 0x2e, 0xc6, 0xbb, 0x27, 0x76, 0x51, 0x69, 0x7c, 0x09, 0x7a, 0x9b,
	0x33, 0x7b, 0xae, 0x63, 0xc0, 0xc3, 0x0e, 0xc6, 0xed, 0x13, 0x3a, 0x24, 0xeb, 0x1b, 0xdd, 0x5f,
	0x1d, 0xec, 0xcf, 0x6a, 0x4b, 0x77, 0x5e, 0xbc, 0x9e, 0xd0, 0x5e, 0xbe, 0x9e, 0xd0, 0xfe, 0x7c,
	0x3d, 0xa1, 0x3d, 0x7b, 0x33, 0xd1, 0xf5, 0xf2, 0xcd, 0x44, 0xd7, 0xab, 0x37, 0x13, 0x5d, 0x9f,
	0x4c, 0xc8, 0xc0, 0xd7, 0x0f, 0xfd, 0x4f, 0x88, 0xd5, 0x43, 0x4c, 0x37, 0x7b, 0xf8, 0x7f, 0xb7,
	0x6e, 0xfe, 0x1d, 0x00, 0x00, 0xff, 0xff, 0x9f, 0xd5, 0x77, 0xfe, 0xa0, 0x13, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MsgClient is the client API for Msg service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MsgClient interface {
	// UpdateParams defines a (governance) operation for updating the module
	// parameters. The authority defaults to the x/gov module account.
	UpdateParams(ctx context.Context, in *MsgUpdateParams, opts ...grpc.CallOption) (*MsgUpdateParamsResponse, error)
	// MintLCT defines the MintLCT RPC for creating new Linked Context Tokens.
	MintLCT(ctx context.Context, in *MsgMintLCT, opts ...grpc.CallOption) (*MsgMintLCTResponse, error)
	// CreateLctRelationship defines the CreateLctRelationship RPC.
	CreateLctRelationship(ctx context.Context, in *MsgCreateLctRelationship, opts ...grpc.CallOption) (*MsgCreateLctRelationshipResponse, error)
	// UpdateLctStatus defines the UpdateLctStatus RPC.
	UpdateLctStatus(ctx context.Context, in *MsgUpdateLctStatus, opts ...grpc.CallOption) (*MsgUpdateLctStatusResponse, error)
	// TerminateLctRelationship defines the TerminateLctRelationship RPC.
	TerminateLctRelationship(ctx context.Context, in *MsgTerminateLctRelationship, opts ...grpc.CallOption) (*MsgTerminateLctRelationshipResponse, error)
	// InitiateLCTMediatedPairing defines the InitiateLCTMediatedPairing RPC.
	InitiateLCTMediatedPairing(ctx context.Context, in *MsgInitiateLCTMediatedPairing, opts ...grpc.CallOption) (*MsgInitiateLCTMediatedPairingResponse, error)
	// CompleteLCTMediatedPairing defines the CompleteLCTMediatedPairing RPC.
	CompleteLCTMediatedPairing(ctx context.Context, in *MsgCompleteLCTMediatedPairing, opts ...grpc.CallOption) (*MsgCompleteLCTMediatedPairingResponse, error)
	// EncryptLCTMessage defines the EncryptLCTMessage RPC.
	EncryptLCTMessage(ctx context.Context, in *MsgEncryptLCTMessage, opts ...grpc.CallOption) (*MsgEncryptLCTMessageResponse, error)
	// GenerateLCTChallenge defines the GenerateLCTChallenge RPC.
	GenerateLCTChallenge(ctx context.Context, in *MsgGenerateLCTChallenge, opts ...grpc.CallOption) (*MsgGenerateLCTChallengeResponse, error)
	// VerifyLCTChallenge defines the VerifyLCTChallenge RPC.
	VerifyLCTChallenge(ctx context.Context, in *MsgVerifyLCTChallenge, opts ...grpc.CallOption) (*MsgVerifyLCTChallengeResponse, error)
}

type msgClient struct {
	cc grpc1.ClientConn
}

func NewMsgClient(cc grpc1.ClientConn) MsgClient {
	return &msgClient{cc}
}

func (c *msgClient) UpdateParams(ctx context.Context, in *MsgUpdateParams, opts ...grpc.CallOption) (*MsgUpdateParamsResponse, error) {
	out := new(MsgUpdateParamsResponse)
	err := c.cc.Invoke(ctx, "/racecarweb.lctmanager.v1.Msg/UpdateParams", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) MintLCT(ctx context.Context, in *MsgMintLCT, opts ...grpc.CallOption) (*MsgMintLCTResponse, error) {
	out := new(MsgMintLCTResponse)
	err := c.cc.Invoke(ctx, "/racecarweb.lctmanager.v1.Msg/MintLCT", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) CreateLctRelationship(ctx context.Context, in *MsgCreateLctRelationship, opts ...grpc.CallOption) (*MsgCreateLctRelationshipResponse, error) {
	out := new(MsgCreateLctRelationshipResponse)
	err := c.cc.Invoke(ctx, "/racecarweb.lctmanager.v1.Msg/CreateLctRelationship", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) UpdateLctStatus(ctx context.Context, in *MsgUpdateLctStatus, opts ...grpc.CallOption) (*MsgUpdateLctStatusResponse, error) {
	out := new(MsgUpdateLctStatusResponse)
	err := c.cc.Invoke(ctx, "/racecarweb.lctmanager.v1.Msg/UpdateLctStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) TerminateLctRelationship(ctx context.Context, in *MsgTerminateLctRelationship, opts ...grpc.CallOption) (*MsgTerminateLctRelationshipResponse, error) {
	out := new(MsgTerminateLctRelationshipResponse)
	err := c.cc.Invoke(ctx, "/racecarweb.lctmanager.v1.Msg/TerminateLctRelationship", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) InitiateLCTMediatedPairing(ctx context.Context, in *MsgInitiateLCTMediatedPairing, opts ...grpc.CallOption) (*MsgInitiateLCTMediatedPairingResponse, error) {
	out := new(MsgInitiateLCTMediatedPairingResponse)
	err := c.cc.Invoke(ctx, "/racecarweb.lctmanager.v1.Msg/InitiateLCTMediatedPairing", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) CompleteLCTMediatedPairing(ctx context.Context, in *MsgCompleteLCTMediatedPairing, opts ...grpc.CallOption) (*MsgCompleteLCTMediatedPairingResponse, error) {
	out := new(MsgCompleteLCTMediatedPairingResponse)
	err := c.cc.Invoke(ctx, "/racecarweb.lctmanager.v1.Msg/CompleteLCTMediatedPairing", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) EncryptLCTMessage(ctx context.Context, in *MsgEncryptLCTMessage, opts ...grpc.CallOption) (*MsgEncryptLCTMessageResponse, error) {
	out := new(MsgEncryptLCTMessageResponse)
	err := c.cc.Invoke(ctx, "/racecarweb.lctmanager.v1.Msg/EncryptLCTMessage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) GenerateLCTChallenge(ctx context.Context, in *MsgGenerateLCTChallenge, opts ...grpc.CallOption) (*MsgGenerateLCTChallengeResponse, error) {
	out := new(MsgGenerateLCTChallengeResponse)
	err := c.cc.Invoke(ctx, "/racecarweb.lctmanager.v1.Msg/GenerateLCTChallenge", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) VerifyLCTChallenge(ctx context.Context, in *MsgVerifyLCTChallenge, opts ...grpc.CallOption) (*MsgVerifyLCTChallengeResponse, error) {
	out := new(MsgVerifyLCTChallengeResponse)
	err := c.cc.Invoke(ctx, "/racecarweb.lctmanager.v1.Msg/VerifyLCTChallenge", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MsgServer is the server API for Msg service.
type MsgServer interface {
	// UpdateParams defines a (governance) operation for updating the module
	// parameters. The authority defaults to the x/gov module account.
	UpdateParams(context.Context, *MsgUpdateParams) (*MsgUpdateParamsResponse, error)
	// MintLCT defines the MintLCT RPC for creating new Linked Context Tokens.
	MintLCT(context.Context, *MsgMintLCT) (*MsgMintLCTResponse, error)
	// CreateLctRelationship defines the CreateLctRelationship RPC.
	CreateLctRelationship(context.Context, *MsgCreateLctRelationship) (*MsgCreateLctRelationshipResponse, error)
	// UpdateLctStatus defines the UpdateLctStatus RPC.
	UpdateLctStatus(context.Context, *MsgUpdateLctStatus) (*MsgUpdateLctStatusResponse, error)
	// TerminateLctRelationship defines the TerminateLctRelationship RPC.
	TerminateLctRelationship(context.Context, *MsgTerminateLctRelationship) (*MsgTerminateLctRelationshipResponse, error)
	// InitiateLCTMediatedPairing defines the InitiateLCTMediatedPairing RPC.
	InitiateLCTMediatedPairing(context.Context, *MsgInitiateLCTMediatedPairing) (*MsgInitiateLCTMediatedPairingResponse, error)
	// CompleteLCTMediatedPairing defines the CompleteLCTMediatedPairing RPC.
	CompleteLCTMediatedPairing(context.Context, *MsgCompleteLCTMediatedPairing) (*MsgCompleteLCTMediatedPairingResponse, error)
	// EncryptLCTMessage defines the EncryptLCTMessage RPC.
	EncryptLCTMessage(context.Context, *MsgEncryptLCTMessage) (*MsgEncryptLCTMessageResponse, error)
	// GenerateLCTChallenge defines the GenerateLCTChallenge RPC.
	GenerateLCTChallenge(context.Context, *MsgGenerateLCTChallenge) (*MsgGenerateLCTChallengeResponse, error)
	// VerifyLCTChallenge defines the VerifyLCTChallenge RPC.
	VerifyLCTChallenge(context.Context, *MsgVerifyLCTChallenge) (*MsgVerifyLCTChallengeResponse, error)
}

// UnimplementedMsgServer can be embedded to have forward compatible implementations.
type UnimplementedMsgServer struct {
}

func (*UnimplementedMsgServer) UpdateParams(ctx context.Context, req *MsgUpdateParams) (*MsgUpdateParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateParams not implemented")
}
func (*UnimplementedMsgServer) MintLCT(ctx context.Context, req *MsgMintLCT) (*MsgMintLCTResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MintLCT not implemented")
}
func (*UnimplementedMsgServer) CreateLctRelationship(ctx context.Context, req *MsgCreateLctRelationship) (*MsgCreateLctRelationshipResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateLctRelationship not implemented")
}
func (*UnimplementedMsgServer) UpdateLctStatus(ctx context.Context, req *MsgUpdateLctStatus) (*MsgUpdateLctStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateLctStatus not implemented")
}
func (*UnimplementedMsgServer) TerminateLctRelationship(ctx context.Context, req *MsgTerminateLctRelationship) (*MsgTerminateLctRelationshipResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TerminateLctRelationship not implemented")
}
func (*UnimplementedMsgServer) InitiateLCTMediatedPairing(ctx context.Context, req *MsgInitiateLCTMediatedPairing) (*MsgInitiateLCTMediatedPairingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InitiateLCTMediatedPairing not implemented")
}
func (*UnimplementedMsgServer) CompleteLCTMediatedPairing(ctx context.Context, req *MsgCompleteLCTMediatedPairing) (*MsgCompleteLCTMediatedPairingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CompleteLCTMediatedPairing not implemented")
}
func (*UnimplementedMsgServer) EncryptLCTMessage(ctx context.Context, req *MsgEncryptLCTMessage) (*MsgEncryptLCTMessageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EncryptLCTMessage not implemented")
}
func (*UnimplementedMsgServer) GenerateLCTChallenge(ctx context.Context, req *MsgGenerateLCTChallenge) (*MsgGenerateLCTChallengeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenerateLCTChallenge not implemented")
}
func (*UnimplementedMsgServer) VerifyLCTChallenge(ctx context.Context, req *MsgVerifyLCTChallenge) (*MsgVerifyLCTChallengeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VerifyLCTChallenge not implemented")
}

func RegisterMsgServer(s grpc1.Server, srv MsgServer) {
	s.RegisterService(&_Msg_serviceDesc, srv)
}

func _Msg_UpdateParams_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUpdateParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UpdateParams(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/racecarweb.lctmanager.v1.Msg/UpdateParams",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UpdateParams(ctx, req.(*MsgUpdateParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_MintLCT_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgMintLCT)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).MintLCT(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/racecarweb.lctmanager.v1.Msg/MintLCT",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).MintLCT(ctx, req.(*MsgMintLCT))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_CreateLctRelationship_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgCreateLctRelationship)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).CreateLctRelationship(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/racecarweb.lctmanager.v1.Msg/CreateLctRelationship",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).CreateLctRelationship(ctx, req.(*MsgCreateLctRelationship))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_UpdateLctStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUpdateLctStatus)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UpdateLctStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/racecarweb.lctmanager.v1.Msg/UpdateLctStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UpdateLctStatus(ctx, req.(*MsgUpdateLctStatus))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_TerminateLctRelationship_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgTerminateLctRelationship)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).TerminateLctRelationship(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/racecarweb.lctmanager.v1.Msg/TerminateLctRelationship",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).TerminateLctRelationship(ctx, req.(*MsgTerminateLctRelationship))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_InitiateLCTMediatedPairing_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgInitiateLCTMediatedPairing)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).InitiateLCTMediatedPairing(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/racecarweb.lctmanager.v1.Msg/InitiateLCTMediatedPairing",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).InitiateLCTMediatedPairing(ctx, req.(*MsgInitiateLCTMediatedPairing))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_CompleteLCTMediatedPairing_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgCompleteLCTMediatedPairing)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).CompleteLCTMediatedPairing(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/racecarweb.lctmanager.v1.Msg/CompleteLCTMediatedPairing",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).CompleteLCTMediatedPairing(ctx, req.(*MsgCompleteLCTMediatedPairing))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_EncryptLCTMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgEncryptLCTMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).EncryptLCTMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/racecarweb.lctmanager.v1.Msg/EncryptLCTMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).EncryptLCTMessage(ctx, req.(*MsgEncryptLCTMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_GenerateLCTChallenge_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgGenerateLCTChallenge)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).GenerateLCTChallenge(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/racecarweb.lctmanager.v1.Msg/GenerateLCTChallenge",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).GenerateLCTChallenge(ctx, req.(*MsgGenerateLCTChallenge))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_VerifyLCTChallenge_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgVerifyLCTChallenge)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).VerifyLCTChallenge(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/racecarweb.lctmanager.v1.Msg/VerifyLCTChallenge",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).VerifyLCTChallenge(ctx, req.(*MsgVerifyLCTChallenge))
	}
	return interceptor(ctx, in, info, handler)
}

var Msg_serviceDesc = _Msg_serviceDesc
var _Msg_serviceDesc = grpc.ServiceDesc{
	ServiceName: "racecarweb.lctmanager.v1.Msg",
	HandlerType: (*MsgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UpdateParams",
			Handler:    _Msg_UpdateParams_Handler,
		},
		{
			MethodName: "MintLCT",
			Handler:    _Msg_MintLCT_Handler,
		},
		{
			MethodName: "CreateLctRelationship",
			Handler:    _Msg_CreateLctRelationship_Handler,
		},
		{
			MethodName: "UpdateLctStatus",
			Handler:    _Msg_UpdateLctStatus_Handler,
		},
		{
			MethodName: "TerminateLctRelationship",
			Handler:    _Msg_TerminateLctRelationship_Handler,
		},
		{
			MethodName: "InitiateLCTMediatedPairing",
			Handler:    _Msg_InitiateLCTMediatedPairing_Handler,
		},
		{
			MethodName: "CompleteLCTMediatedPairing",
			Handler:    _Msg_CompleteLCTMediatedPairing_Handler,
		},
		{
			MethodName: "EncryptLCTMessage",
			Handler:    _Msg_EncryptLCTMessage_Handler,
		},
		{
			MethodName: "GenerateLCTChallenge",
			Handler:    _Msg_GenerateLCTChallenge_Handler,
		},
		{
			MethodName: "VerifyLCTChallenge",
			Handler:    _Msg_VerifyLCTChallenge_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "racecarweb/lctmanager/v1/tx.proto",
}

func (m *MsgUpdateParams) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateParams) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateParams) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.Authority) > 0 {
		i -= len(m.Authority)
		copy(dAtA[i:], m.Authority)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Authority)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgUpdateParamsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateParamsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateParamsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgMintLCT) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgMintLCT) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgMintLCT) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.InitialAdpAmount) > 0 {
		i -= len(m.InitialAdpAmount)
		copy(dAtA[i:], m.InitialAdpAmount)
		i = encodeVarintTx(dAtA, i, uint64(len(m.InitialAdpAmount)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.InitialV3Tensor) > 0 {
		i -= len(m.InitialV3Tensor)
		copy(dAtA[i:], m.InitialV3Tensor)
		i = encodeVarintTx(dAtA, i, uint64(len(m.InitialV3Tensor)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.InitialT3Tensor) > 0 {
		i -= len(m.InitialT3Tensor)
		copy(dAtA[i:], m.InitialT3Tensor)
		i = encodeVarintTx(dAtA, i, uint64(len(m.InitialT3Tensor)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Metadata) > 0 {
		for k := range m.Metadata {
			v := m.Metadata[k]
			baseI := i
			i -= len(v)
			copy(dAtA[i:], v)
			i = encodeVarintTx(dAtA, i, uint64(len(v)))
			i--
			dAtA[i] = 0x12
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintTx(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintTx(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.EntityType) > 0 {
		i -= len(m.EntityType)
		copy(dAtA[i:], m.EntityType)
		i = encodeVarintTx(dAtA, i, uint64(len(m.EntityType)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.EntityName) > 0 {
		i -= len(m.EntityName)
		copy(dAtA[i:], m.EntityName)
		i = encodeVarintTx(dAtA, i, uint64(len(m.EntityName)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgMintLCTResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgMintLCTResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgMintLCTResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Status) > 0 {
		i -= len(m.Status)
		copy(dAtA[i:], m.Status)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Status)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.AdpBalance) > 0 {
		i -= len(m.AdpBalance)
		copy(dAtA[i:], m.AdpBalance)
		i = encodeVarintTx(dAtA, i, uint64(len(m.AdpBalance)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.EntityAddress) > 0 {
		i -= len(m.EntityAddress)
		copy(dAtA[i:], m.EntityAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.EntityAddress)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.LctId) > 0 {
		i -= len(m.LctId)
		copy(dAtA[i:], m.LctId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.LctId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgCreateLctRelationship) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCreateLctRelationship) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCreateLctRelationship) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ProxyId) > 0 {
		i -= len(m.ProxyId)
		copy(dAtA[i:], m.ProxyId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ProxyId)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Context) > 0 {
		i -= len(m.Context)
		copy(dAtA[i:], m.Context)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Context)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.ComponentB) > 0 {
		i -= len(m.ComponentB)
		copy(dAtA[i:], m.ComponentB)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ComponentB)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ComponentA) > 0 {
		i -= len(m.ComponentA)
		copy(dAtA[i:], m.ComponentA)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ComponentA)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgCreateLctRelationshipResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCreateLctRelationshipResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCreateLctRelationshipResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Status) > 0 {
		i -= len(m.Status)
		copy(dAtA[i:], m.Status)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Status)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.KeyExchange) > 0 {
		i -= len(m.KeyExchange)
		copy(dAtA[i:], m.KeyExchange)
		i = encodeVarintTx(dAtA, i, uint64(len(m.KeyExchange)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.LctId) > 0 {
		i -= len(m.LctId)
		copy(dAtA[i:], m.LctId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.LctId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgUpdateLctStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateLctStatus) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateLctStatus) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Reason) > 0 {
		i -= len(m.Reason)
		copy(dAtA[i:], m.Reason)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Reason)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.NewStatus) > 0 {
		i -= len(m.NewStatus)
		copy(dAtA[i:], m.NewStatus)
		i = encodeVarintTx(dAtA, i, uint64(len(m.NewStatus)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.LctId) > 0 {
		i -= len(m.LctId)
		copy(dAtA[i:], m.LctId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.LctId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgUpdateLctStatusResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateLctStatusResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateLctStatusResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgTerminateLctRelationship) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgTerminateLctRelationship) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgTerminateLctRelationship) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.NotifyOffline {
		i--
		if m.NotifyOffline {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x20
	}
	if len(m.Reason) > 0 {
		i -= len(m.Reason)
		copy(dAtA[i:], m.Reason)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Reason)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.LctId) > 0 {
		i -= len(m.LctId)
		copy(dAtA[i:], m.LctId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.LctId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgTerminateLctRelationshipResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgTerminateLctRelationshipResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgTerminateLctRelationshipResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgInitiateLCTMediatedPairing) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgInitiateLCTMediatedPairing) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgInitiateLCTMediatedPairing) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ExpiresAt != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.ExpiresAt))
		i--
		dAtA[i] = 0x30
	}
	if len(m.ProxyLctId) > 0 {
		i -= len(m.ProxyLctId)
		copy(dAtA[i:], m.ProxyLctId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ProxyLctId)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Context) > 0 {
		i -= len(m.Context)
		copy(dAtA[i:], m.Context)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Context)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.TargetLctId) > 0 {
		i -= len(m.TargetLctId)
		copy(dAtA[i:], m.TargetLctId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.TargetLctId)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.InitiatorLctId) > 0 {
		i -= len(m.InitiatorLctId)
		copy(dAtA[i:], m.InitiatorLctId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.InitiatorLctId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgInitiateLCTMediatedPairingResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgInitiateLCTMediatedPairingResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgInitiateLCTMediatedPairingResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.LctRelationshipId) > 0 {
		i -= len(m.LctRelationshipId)
		copy(dAtA[i:], m.LctRelationshipId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.LctRelationshipId)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.ChallengeData) > 0 {
		i -= len(m.ChallengeData)
		copy(dAtA[i:], m.ChallengeData)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ChallengeData)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.ChallengeId) > 0 {
		i -= len(m.ChallengeId)
		copy(dAtA[i:], m.ChallengeId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ChallengeId)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Status) > 0 {
		i -= len(m.Status)
		copy(dAtA[i:], m.Status)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Status)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.PairingId) > 0 {
		i -= len(m.PairingId)
		copy(dAtA[i:], m.PairingId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.PairingId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgCompleteLCTMediatedPairing) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCompleteLCTMediatedPairing) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCompleteLCTMediatedPairing) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.SessionKeyData) > 0 {
		i -= len(m.SessionKeyData)
		copy(dAtA[i:], m.SessionKeyData)
		i = encodeVarintTx(dAtA, i, uint64(len(m.SessionKeyData)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.TargetResponse) > 0 {
		i -= len(m.TargetResponse)
		copy(dAtA[i:], m.TargetResponse)
		i = encodeVarintTx(dAtA, i, uint64(len(m.TargetResponse)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.InitiatorResponse) > 0 {
		i -= len(m.InitiatorResponse)
		copy(dAtA[i:], m.InitiatorResponse)
		i = encodeVarintTx(dAtA, i, uint64(len(m.InitiatorResponse)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.PairingId) > 0 {
		i -= len(m.PairingId)
		copy(dAtA[i:], m.PairingId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.PairingId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgCompleteLCTMediatedPairingResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCompleteLCTMediatedPairingResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCompleteLCTMediatedPairingResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.TrustScore) > 0 {
		i -= len(m.TrustScore)
		copy(dAtA[i:], m.TrustScore)
		i = encodeVarintTx(dAtA, i, uint64(len(m.TrustScore)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.HashedCombinedSessionKey) > 0 {
		i -= len(m.HashedCombinedSessionKey)
		copy(dAtA[i:], m.HashedCombinedSessionKey)
		i = encodeVarintTx(dAtA, i, uint64(len(m.HashedCombinedSessionKey)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.EncryptedSessionKeyTarget) > 0 {
		i -= len(m.EncryptedSessionKeyTarget)
		copy(dAtA[i:], m.EncryptedSessionKeyTarget)
		i = encodeVarintTx(dAtA, i, uint64(len(m.EncryptedSessionKeyTarget)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.EncryptedSessionKeyInitiator) > 0 {
		i -= len(m.EncryptedSessionKeyInitiator)
		copy(dAtA[i:], m.EncryptedSessionKeyInitiator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.EncryptedSessionKeyInitiator)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.LctRelationshipId) > 0 {
		i -= len(m.LctRelationshipId)
		copy(dAtA[i:], m.LctRelationshipId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.LctRelationshipId)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Status) > 0 {
		i -= len(m.Status)
		copy(dAtA[i:], m.Status)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Status)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.PairingId) > 0 {
		i -= len(m.PairingId)
		copy(dAtA[i:], m.PairingId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.PairingId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgEncryptLCTMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgEncryptLCTMessage) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgEncryptLCTMessage) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Message) > 0 {
		i -= len(m.Message)
		copy(dAtA[i:], m.Message)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Message)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.LctId) > 0 {
		i -= len(m.LctId)
		copy(dAtA[i:], m.LctId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.LctId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgEncryptLCTMessageResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgEncryptLCTMessageResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgEncryptLCTMessageResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Status) > 0 {
		i -= len(m.Status)
		copy(dAtA[i:], m.Status)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Status)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.EncryptedMessage) > 0 {
		i -= len(m.EncryptedMessage)
		copy(dAtA[i:], m.EncryptedMessage)
		i = encodeVarintTx(dAtA, i, uint64(len(m.EncryptedMessage)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.LctId) > 0 {
		i -= len(m.LctId)
		copy(dAtA[i:], m.LctId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.LctId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgGenerateLCTChallenge) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgGenerateLCTChallenge) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgGenerateLCTChallenge) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.LctId) > 0 {
		i -= len(m.LctId)
		copy(dAtA[i:], m.LctId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.LctId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgGenerateLCTChallengeResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgGenerateLCTChallengeResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgGenerateLCTChallengeResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Status) > 0 {
		i -= len(m.Status)
		copy(dAtA[i:], m.Status)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Status)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Challenge) > 0 {
		i -= len(m.Challenge)
		copy(dAtA[i:], m.Challenge)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Challenge)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.LctId) > 0 {
		i -= len(m.LctId)
		copy(dAtA[i:], m.LctId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.LctId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgVerifyLCTChallenge) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgVerifyLCTChallenge) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgVerifyLCTChallenge) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Response) > 0 {
		i -= len(m.Response)
		copy(dAtA[i:], m.Response)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Response)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Challenge) > 0 {
		i -= len(m.Challenge)
		copy(dAtA[i:], m.Challenge)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Challenge)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.LctId) > 0 {
		i -= len(m.LctId)
		copy(dAtA[i:], m.LctId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.LctId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgVerifyLCTChallengeResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgVerifyLCTChallengeResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgVerifyLCTChallengeResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Status) > 0 {
		i -= len(m.Status)
		copy(dAtA[i:], m.Status)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Status)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Verified {
		i--
		if m.Verified {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if len(m.LctId) > 0 {
		i -= len(m.LctId)
		copy(dAtA[i:], m.LctId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.LctId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintTx(dAtA []byte, offset int, v uint64) int {
	offset -= sovTx(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MsgUpdateParams) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Authority)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = m.Params.Size()
	n += 1 + l + sovTx(uint64(l))
	return n
}

func (m *MsgUpdateParamsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgMintLCT) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.EntityName)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.EntityType)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if len(m.Metadata) > 0 {
		for k, v := range m.Metadata {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovTx(uint64(len(k))) + 1 + len(v) + sovTx(uint64(len(v)))
			n += mapEntrySize + 1 + sovTx(uint64(mapEntrySize))
		}
	}
	l = len(m.InitialT3Tensor)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.InitialV3Tensor)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.InitialAdpAmount)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgMintLCTResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.LctId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.EntityAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.AdpBalance)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Status)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgCreateLctRelationship) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.ComponentA)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.ComponentB)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Context)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.ProxyId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgCreateLctRelationshipResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.LctId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.KeyExchange)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Status)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgUpdateLctStatus) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.LctId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.NewStatus)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Reason)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgUpdateLctStatusResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgTerminateLctRelationship) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.LctId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Reason)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.NotifyOffline {
		n += 2
	}
	return n
}

func (m *MsgTerminateLctRelationshipResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgInitiateLCTMediatedPairing) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.InitiatorLctId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.TargetLctId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Context)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.ProxyLctId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.ExpiresAt != 0 {
		n += 1 + sovTx(uint64(m.ExpiresAt))
	}
	return n
}

func (m *MsgInitiateLCTMediatedPairingResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.PairingId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Status)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.ChallengeId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.ChallengeData)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.LctRelationshipId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgCompleteLCTMediatedPairing) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.PairingId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.InitiatorResponse)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.TargetResponse)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.SessionKeyData)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgCompleteLCTMediatedPairingResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.PairingId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Status)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.LctRelationshipId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.EncryptedSessionKeyInitiator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.EncryptedSessionKeyTarget)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.HashedCombinedSessionKey)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.TrustScore)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgEncryptLCTMessage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.LctId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgEncryptLCTMessageResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.LctId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.EncryptedMessage)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Status)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgGenerateLCTChallenge) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.LctId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgGenerateLCTChallengeResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.LctId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Challenge)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Status)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgVerifyLCTChallenge) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.LctId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Challenge)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Response)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgVerifyLCTChallengeResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.LctId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.Verified {
		n += 2
	}
	l = len(m.Status)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func sovTx(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTx(x uint64) (n int) {
	return sovTx(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MsgUpdateParams) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateParams: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateParams: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Authority", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Authority = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateParamsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateParamsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateParamsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgMintLCT) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgMintLCT: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgMintLCT: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EntityName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EntityName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EntityType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EntityType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Metadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Metadata == nil {
				m.Metadata = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTx
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTx
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthTx
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthTx
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTx
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthTx
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue < 0 {
						return ErrInvalidLengthTx
					}
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipTx(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthTx
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Metadata[mapkey] = mapvalue
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InitialT3Tensor", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InitialT3Tensor = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InitialV3Tensor", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InitialV3Tensor = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InitialAdpAmount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InitialAdpAmount = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgMintLCTResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgMintLCTResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgMintLCTResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LctId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LctId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EntityAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EntityAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AdpBalance", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AdpBalance = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Status = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgCreateLctRelationship) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCreateLctRelationship: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCreateLctRelationship: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ComponentA", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ComponentA = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ComponentB", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ComponentB = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Context", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Context = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProxyId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProxyId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgCreateLctRelationshipResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCreateLctRelationshipResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCreateLctRelationshipResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LctId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LctId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyExchange", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.KeyExchange = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Status = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateLctStatus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateLctStatus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateLctStatus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LctId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LctId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NewStatus", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NewStatus = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reason", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Reason = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateLctStatusResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateLctStatusResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateLctStatusResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgTerminateLctRelationship) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgTerminateLctRelationship: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgTerminateLctRelationship: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LctId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LctId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reason", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Reason = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NotifyOffline", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.NotifyOffline = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgTerminateLctRelationshipResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgTerminateLctRelationshipResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgTerminateLctRelationshipResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgInitiateLCTMediatedPairing) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgInitiateLCTMediatedPairing: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgInitiateLCTMediatedPairing: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InitiatorLctId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InitiatorLctId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TargetLctId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TargetLctId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Context", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Context = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProxyLctId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProxyLctId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExpiresAt", wireType)
			}
			m.ExpiresAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ExpiresAt |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgInitiateLCTMediatedPairingResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgInitiateLCTMediatedPairingResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgInitiateLCTMediatedPairingResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PairingId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PairingId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Status = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChallengeId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChallengeId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChallengeData", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChallengeData = append(m.ChallengeData[:0], dAtA[iNdEx:postIndex]...)
			if m.ChallengeData == nil {
				m.ChallengeData = []byte{}
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LctRelationshipId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LctRelationshipId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgCompleteLCTMediatedPairing) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCompleteLCTMediatedPairing: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCompleteLCTMediatedPairing: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PairingId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PairingId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InitiatorResponse", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InitiatorResponse = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TargetResponse", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TargetResponse = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SessionKeyData", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SessionKeyData = append(m.SessionKeyData[:0], dAtA[iNdEx:postIndex]...)
			if m.SessionKeyData == nil {
				m.SessionKeyData = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgCompleteLCTMediatedPairingResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCompleteLCTMediatedPairingResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCompleteLCTMediatedPairingResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PairingId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PairingId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Status = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LctRelationshipId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LctRelationshipId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EncryptedSessionKeyInitiator", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EncryptedSessionKeyInitiator = append(m.EncryptedSessionKeyInitiator[:0], dAtA[iNdEx:postIndex]...)
			if m.EncryptedSessionKeyInitiator == nil {
				m.EncryptedSessionKeyInitiator = []byte{}
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EncryptedSessionKeyTarget", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EncryptedSessionKeyTarget = append(m.EncryptedSessionKeyTarget[:0], dAtA[iNdEx:postIndex]...)
			if m.EncryptedSessionKeyTarget == nil {
				m.EncryptedSessionKeyTarget = []byte{}
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HashedCombinedSessionKey", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HashedCombinedSessionKey = append(m.HashedCombinedSessionKey[:0], dAtA[iNdEx:postIndex]...)
			if m.HashedCombinedSessionKey == nil {
				m.HashedCombinedSessionKey = []byte{}
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TrustScore", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TrustScore = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgEncryptLCTMessage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgEncryptLCTMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgEncryptLCTMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LctId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LctId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = append(m.Message[:0], dAtA[iNdEx:postIndex]...)
			if m.Message == nil {
				m.Message = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgEncryptLCTMessageResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgEncryptLCTMessageResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgEncryptLCTMessageResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LctId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LctId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EncryptedMessage", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EncryptedMessage = append(m.EncryptedMessage[:0], dAtA[iNdEx:postIndex]...)
			if m.EncryptedMessage == nil {
				m.EncryptedMessage = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Status = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgGenerateLCTChallenge) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgGenerateLCTChallenge: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgGenerateLCTChallenge: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LctId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LctId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgGenerateLCTChallengeResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgGenerateLCTChallengeResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgGenerateLCTChallengeResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LctId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LctId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Challenge", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Challenge = append(m.Challenge[:0], dAtA[iNdEx:postIndex]...)
			if m.Challenge == nil {
				m.Challenge = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Status = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgVerifyLCTChallenge) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgVerifyLCTChallenge: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgVerifyLCTChallenge: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LctId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LctId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Challenge", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Challenge = append(m.Challenge[:0], dAtA[iNdEx:postIndex]...)
			if m.Challenge == nil {
				m.Challenge = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Response", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Response = append(m.Response[:0], dAtA[iNdEx:postIndex]...)
			if m.Response == nil {
				m.Response = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgVerifyLCTChallengeResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgVerifyLCTChallengeResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgVerifyLCTChallengeResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LctId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LctId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Verified", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Verified = bool(v != 0)
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Status = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTx(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTx
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTx
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTx
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTx
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTx        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTx          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTx = fmt.Errorf("proto: unexpected end of group")
)
