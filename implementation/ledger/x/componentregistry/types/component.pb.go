// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: racecarweb/componentregistry/v1/component.proto

package types

import (
	fmt "fmt"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	github_com_cosmos_gogoproto_types "github.com/cosmos/gogoproto/types"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	io "io"
	math "math"
	math_bits "math/bits"
	time "time"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Component status constants
type ComponentStatus int32

const (
	ComponentStatus_COMPONENT_STATUS_UNSPECIFIED ComponentStatus = 0
	ComponentStatus_COMPONENT_STATUS_PENDING     ComponentStatus = 1
	ComponentStatus_COMPONENT_STATUS_ACTIVE      ComponentStatus = 2
	ComponentStatus_COMPONENT_STATUS_INACTIVE    ComponentStatus = 3
	ComponentStatus_COMPONENT_STATUS_MAINTENANCE ComponentStatus = 4
	ComponentStatus_COMPONENT_STATUS_RETIRED     ComponentStatus = 5
	ComponentStatus_COMPONENT_STATUS_REVOKED     ComponentStatus = 6
	ComponentStatus_COMPONENT_STATUS_SUSPENDED   ComponentStatus = 7
)

var ComponentStatus_name = map[int32]string{
	0: "COMPONENT_STATUS_UNSPECIFIED",
	1: "COMPONENT_STATUS_PENDING",
	2: "COMPONENT_STATUS_ACTIVE",
	3: "COMPONENT_STATUS_INACTIVE",
	4: "COMPONENT_STATUS_MAINTENANCE",
	5: "COMPONENT_STATUS_RETIRED",
	6: "COMPONENT_STATUS_REVOKED",
	7: "COMPONENT_STATUS_SUSPENDED",
}

var ComponentStatus_value = map[string]int32{
	"COMPONENT_STATUS_UNSPECIFIED": 0,
	"COMPONENT_STATUS_PENDING":     1,
	"COMPONENT_STATUS_ACTIVE":      2,
	"COMPONENT_STATUS_INACTIVE":    3,
	"COMPONENT_STATUS_MAINTENANCE": 4,
	"COMPONENT_STATUS_RETIRED":     5,
	"COMPONENT_STATUS_REVOKED":     6,
	"COMPONENT_STATUS_SUSPENDED":   7,
}

func (x ComponentStatus) String() string {
	return proto.EnumName(ComponentStatus_name, int32(x))
}

func (ComponentStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_01b52f0b939e3a16, []int{0}
}

// Verification status constants
type VerificationStatus int32

const (
	VerificationStatus_VERIFICATION_STATUS_UNSPECIFIED VerificationStatus = 0
	VerificationStatus_VERIFICATION_STATUS_PENDING     VerificationStatus = 1
	VerificationStatus_VERIFICATION_STATUS_VERIFIED    VerificationStatus = 2
	VerificationStatus_VERIFICATION_STATUS_REJECTED    VerificationStatus = 3
	VerificationStatus_VERIFICATION_STATUS_EXPIRED     VerificationStatus = 4
)

var VerificationStatus_name = map[int32]string{
	0: "VERIFICATION_STATUS_UNSPECIFIED",
	1: "VERIFICATION_STATUS_PENDING",
	2: "VERIFICATION_STATUS_VERIFIED",
	3: "VERIFICATION_STATUS_REJECTED",
	4: "VERIFICATION_STATUS_EXPIRED",
}

var VerificationStatus_value = map[string]int32{
	"VERIFICATION_STATUS_UNSPECIFIED": 0,
	"VERIFICATION_STATUS_PENDING":     1,
	"VERIFICATION_STATUS_VERIFIED":    2,
	"VERIFICATION_STATUS_REJECTED":    3,
	"VERIFICATION_STATUS_EXPIRED":     4,
}

func (x VerificationStatus) String() string {
	return proto.EnumName(VerificationStatus_name, int32(x))
}

func (VerificationStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_01b52f0b939e3a16, []int{1}
}

// Component represents a physical or virtual component in the system
// Privacy-focused: Only stores anonymous hashes and minimal verification data on-chain
type Component struct {
	// Anonymous component identifier (SHA-256 hash of real component ID)
	ComponentId string `protobuf:"bytes,1,opt,name=component_id,json=componentId,proto3" json:"component_id,omitempty"`
	// Anonymous manufacturer identifier (SHA-256 hash of manufacturer ID)
	ManufacturerHash string `protobuf:"bytes,2,opt,name=manufacturer_hash,json=manufacturerHash,proto3" json:"manufacturer_hash,omitempty"`
	// Anonymous component category (SHA-256 hash of component category)
	CategoryHash string `protobuf:"bytes,3,opt,name=category_hash,json=categoryHash,proto3" json:"category_hash,omitempty"`
	// Anonymous authorization rules hash (SHA-256 hash of off-chain rules)
	AuthorizationRulesHash string `protobuf:"bytes,4,opt,name=authorization_rules_hash,json=authorizationRulesHash,proto3" json:"authorization_rules_hash,omitempty"`
	// Component status (active, revoked, suspended)
	Status string `protobuf:"bytes,5,opt,name=status,proto3" json:"status,omitempty"`
	// Registration timestamp
	RegisteredAt time.Time `protobuf:"bytes,6,opt,name=registered_at,json=registeredAt,proto3,stdtime" json:"registered_at"`
	// Cryptographic trust anchor (no commercial data)
	TrustAnchor string `protobuf:"bytes,7,opt,name=trust_anchor,json=trustAnchor,proto3" json:"trust_anchor,omitempty"`
	// Last verification timestamp
	LastVerifiedAt time.Time `protobuf:"bytes,8,opt,name=last_verified_at,json=lastVerifiedAt,proto3,stdtime" json:"last_verified_at"`
	// Verification metadata (off-chain storage reference)
	VerificationMetadata string `protobuf:"bytes,9,opt,name=verification_metadata,json=verificationMetadata,proto3" json:"verification_metadata,omitempty"`
	// Component relationships (LCT IDs) - also hashed
	RelationshipHashes []string `protobuf:"bytes,10,rep,name=relationship_hashes,json=relationshipHashes,proto3" json:"relationship_hashes,omitempty"`
	// LCT ID for this component (LCT-mediated trust) - hashed
	LctHash string `protobuf:"bytes,11,opt,name=lct_hash,json=lctHash,proto3" json:"lct_hash,omitempty"`
	// Device key half (encrypted, stored by LCT)
	EncryptedDeviceKeyHalf []byte `protobuf:"bytes,12,opt,name=encrypted_device_key_half,json=encryptedDeviceKeyHalf,proto3" json:"encrypted_device_key_half,omitempty"`
	// Legacy fields for backward compatibility (deprecated)
	ManufacturerId     string    `protobuf:"bytes,13,opt,name=manufacturer_id,json=manufacturerId,proto3" json:"manufacturer_id,omitempty"`
	ComponentType      string    `protobuf:"bytes,14,opt,name=component_type,json=componentType,proto3" json:"component_type,omitempty"`
	HardwareSpecs      string    `protobuf:"bytes,15,opt,name=hardware_specs,json=hardwareSpecs,proto3" json:"hardware_specs,omitempty"`
	QualityScore       string    `protobuf:"bytes,16,opt,name=quality_score,json=qualityScore,proto3" json:"quality_score,omitempty"`
	Capabilities       string    `protobuf:"bytes,17,opt,name=capabilities,proto3" json:"capabilities,omitempty"`
	RelationshipIds    []string  `protobuf:"bytes,18,rep,name=relationship_ids,json=relationshipIds,proto3" json:"relationship_ids,omitempty"`
	LctId              string    `protobuf:"bytes,19,opt,name=lct_id,json=lctId,proto3" json:"lct_id,omitempty"`
	AuthorizationRules string    `protobuf:"bytes,20,opt,name=authorization_rules,json=authorizationRules,proto3" json:"authorization_rules,omitempty"`
	CreatedAt          time.Time `protobuf:"bytes,21,opt,name=created_at,json=createdAt,proto3,stdtime" json:"created_at"`
}

func (m *Component) Reset()         { *m = Component{} }
func (m *Component) String() string { return proto.CompactTextString(m) }
func (*Component) ProtoMessage()    {}
func (*Component) Descriptor() ([]byte, []int) {
	return fileDescriptor_01b52f0b939e3a16, []int{0}
}
func (m *Component) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Component) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Component.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Component) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Component.Merge(m, src)
}
func (m *Component) XXX_Size() int {
	return m.Size()
}
func (m *Component) XXX_DiscardUnknown() {
	xxx_messageInfo_Component.DiscardUnknown(m)
}

var xxx_messageInfo_Component proto.InternalMessageInfo

func (m *Component) GetComponentId() string {
	if m != nil {
		return m.ComponentId
	}
	return ""
}

func (m *Component) GetManufacturerHash() string {
	if m != nil {
		return m.ManufacturerHash
	}
	return ""
}

func (m *Component) GetCategoryHash() string {
	if m != nil {
		return m.CategoryHash
	}
	return ""
}

func (m *Component) GetAuthorizationRulesHash() string {
	if m != nil {
		return m.AuthorizationRulesHash
	}
	return ""
}

func (m *Component) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

func (m *Component) GetRegisteredAt() time.Time {
	if m != nil {
		return m.RegisteredAt
	}
	return time.Time{}
}

func (m *Component) GetTrustAnchor() string {
	if m != nil {
		return m.TrustAnchor
	}
	return ""
}

func (m *Component) GetLastVerifiedAt() time.Time {
	if m != nil {
		return m.LastVerifiedAt
	}
	return time.Time{}
}

func (m *Component) GetVerificationMetadata() string {
	if m != nil {
		return m.VerificationMetadata
	}
	return ""
}

func (m *Component) GetRelationshipHashes() []string {
	if m != nil {
		return m.RelationshipHashes
	}
	return nil
}

func (m *Component) GetLctHash() string {
	if m != nil {
		return m.LctHash
	}
	return ""
}

func (m *Component) GetEncryptedDeviceKeyHalf() []byte {
	if m != nil {
		return m.EncryptedDeviceKeyHalf
	}
	return nil
}

func (m *Component) GetManufacturerId() string {
	if m != nil {
		return m.ManufacturerId
	}
	return ""
}

func (m *Component) GetComponentType() string {
	if m != nil {
		return m.ComponentType
	}
	return ""
}

func (m *Component) GetHardwareSpecs() string {
	if m != nil {
		return m.HardwareSpecs
	}
	return ""
}

func (m *Component) GetQualityScore() string {
	if m != nil {
		return m.QualityScore
	}
	return ""
}

func (m *Component) GetCapabilities() string {
	if m != nil {
		return m.Capabilities
	}
	return ""
}

func (m *Component) GetRelationshipIds() []string {
	if m != nil {
		return m.RelationshipIds
	}
	return nil
}

func (m *Component) GetLctId() string {
	if m != nil {
		return m.LctId
	}
	return ""
}

func (m *Component) GetAuthorizationRules() string {
	if m != nil {
		return m.AuthorizationRules
	}
	return ""
}

func (m *Component) GetCreatedAt() time.Time {
	if m != nil {
		return m.CreatedAt
	}
	return time.Time{}
}

// ComponentVerification represents the verification status of a component
type ComponentVerification struct {
	// Component ID being verified (hash)
	ComponentId string `protobuf:"bytes,1,opt,name=component_id,json=componentId,proto3" json:"component_id,omitempty"`
	// Verification status (verified, pending, rejected)
	Status string `protobuf:"bytes,2,opt,name=status,proto3" json:"status,omitempty"`
	// Verification timestamp
	VerifiedAt time.Time `protobuf:"bytes,3,opt,name=verified_at,json=verifiedAt,proto3,stdtime" json:"verified_at"`
	// Verification method (manual, automated, etc)
	VerificationMethod string `protobuf:"bytes,4,opt,name=verification_method,json=verificationMethod,proto3" json:"verification_method,omitempty"`
	// Verification evidence (hash of off-chain data)
	VerificationEvidence string `protobuf:"bytes,5,opt,name=verification_evidence,json=verificationEvidence,proto3" json:"verification_evidence,omitempty"`
	// Verification notes
	Notes string `protobuf:"bytes,6,opt,name=notes,proto3" json:"notes,omitempty"`
}

func (m *ComponentVerification) Reset()         { *m = ComponentVerification{} }
func (m *ComponentVerification) String() string { return proto.CompactTextString(m) }
func (*ComponentVerification) ProtoMessage()    {}
func (*ComponentVerification) Descriptor() ([]byte, []int) {
	return fileDescriptor_01b52f0b939e3a16, []int{1}
}
func (m *ComponentVerification) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ComponentVerification) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ComponentVerification.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ComponentVerification) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ComponentVerification.Merge(m, src)
}
func (m *ComponentVerification) XXX_Size() int {
	return m.Size()
}
func (m *ComponentVerification) XXX_DiscardUnknown() {
	xxx_messageInfo_ComponentVerification.DiscardUnknown(m)
}

var xxx_messageInfo_ComponentVerification proto.InternalMessageInfo

func (m *ComponentVerification) GetComponentId() string {
	if m != nil {
		return m.ComponentId
	}
	return ""
}

func (m *ComponentVerification) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

func (m *ComponentVerification) GetVerifiedAt() time.Time {
	if m != nil {
		return m.VerifiedAt
	}
	return time.Time{}
}

func (m *ComponentVerification) GetVerificationMethod() string {
	if m != nil {
		return m.VerificationMethod
	}
	return ""
}

func (m *ComponentVerification) GetVerificationEvidence() string {
	if m != nil {
		return m.VerificationEvidence
	}
	return ""
}

func (m *ComponentVerification) GetNotes() string {
	if m != nil {
		return m.Notes
	}
	return ""
}

// ComponentPairingRule defines rules for component pairing
type ComponentPairingRule struct {
	// Source component type (hashed)
	SourceTypeHash string `protobuf:"bytes,1,opt,name=source_type_hash,json=sourceTypeHash,proto3" json:"source_type_hash,omitempty"`
	// Target component type (hashed)
	TargetTypeHash string `protobuf:"bytes,2,opt,name=target_type_hash,json=targetTypeHash,proto3" json:"target_type_hash,omitempty"`
	// Minimum quality score required
	MinQualityScore string `protobuf:"bytes,3,opt,name=min_quality_score,json=minQualityScore,proto3" json:"min_quality_score,omitempty"`
	// Required capabilities (JSON array) - hashed
	RequiredCapabilitiesHash string `protobuf:"bytes,4,opt,name=required_capabilities_hash,json=requiredCapabilitiesHash,proto3" json:"required_capabilities_hash,omitempty"`
	// Maximum relationships allowed
	MaxRelationships uint32 `protobuf:"varint,5,opt,name=max_relationships,json=maxRelationships,proto3" json:"max_relationships,omitempty"`
	// Whether bidirectional pairing is required
	BidirectionalRequired bool `protobuf:"varint,6,opt,name=bidirectional_required,json=bidirectionalRequired,proto3" json:"bidirectional_required,omitempty"`
	// Additional validation rules (JSON) - hashed
	ValidationRulesHash string `protobuf:"bytes,7,opt,name=validation_rules_hash,json=validationRulesHash,proto3" json:"validation_rules_hash,omitempty"`
}

func (m *ComponentPairingRule) Reset()         { *m = ComponentPairingRule{} }
func (m *ComponentPairingRule) String() string { return proto.CompactTextString(m) }
func (*ComponentPairingRule) ProtoMessage()    {}
func (*ComponentPairingRule) Descriptor() ([]byte, []int) {
	return fileDescriptor_01b52f0b939e3a16, []int{2}
}
func (m *ComponentPairingRule) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ComponentPairingRule) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ComponentPairingRule.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ComponentPairingRule) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ComponentPairingRule.Merge(m, src)
}
func (m *ComponentPairingRule) XXX_Size() int {
	return m.Size()
}
func (m *ComponentPairingRule) XXX_DiscardUnknown() {
	xxx_messageInfo_ComponentPairingRule.DiscardUnknown(m)
}

var xxx_messageInfo_ComponentPairingRule proto.InternalMessageInfo

func (m *ComponentPairingRule) GetSourceTypeHash() string {
	if m != nil {
		return m.SourceTypeHash
	}
	return ""
}

func (m *ComponentPairingRule) GetTargetTypeHash() string {
	if m != nil {
		return m.TargetTypeHash
	}
	return ""
}

func (m *ComponentPairingRule) GetMinQualityScore() string {
	if m != nil {
		return m.MinQualityScore
	}
	return ""
}

func (m *ComponentPairingRule) GetRequiredCapabilitiesHash() string {
	if m != nil {
		return m.RequiredCapabilitiesHash
	}
	return ""
}

func (m *ComponentPairingRule) GetMaxRelationships() uint32 {
	if m != nil {
		return m.MaxRelationships
	}
	return 0
}

func (m *ComponentPairingRule) GetBidirectionalRequired() bool {
	if m != nil {
		return m.BidirectionalRequired
	}
	return false
}

func (m *ComponentPairingRule) GetValidationRulesHash() string {
	if m != nil {
		return m.ValidationRulesHash
	}
	return ""
}

// AnonymousPairingAuthorization represents anonymous pairing authorization
type AnonymousPairingAuthorization struct {
	// Anonymous authorization ID
	AuthId string `protobuf:"bytes,1,opt,name=auth_id,json=authId,proto3" json:"auth_id,omitempty"`
	// Hash of component A
	ComponentHashA string `protobuf:"bytes,2,opt,name=component_hash_a,json=componentHashA,proto3" json:"component_hash_a,omitempty"`
	// Hash of component B
	ComponentHashB string `protobuf:"bytes,3,opt,name=component_hash_b,json=componentHashB,proto3" json:"component_hash_b,omitempty"`
	// Hash of actual authorization rules
	RuleHash string `protobuf:"bytes,4,opt,name=rule_hash,json=ruleHash,proto3" json:"rule_hash,omitempty"`
	// Authorization status
	Status string `protobuf:"bytes,5,opt,name=status,proto3" json:"status,omitempty"`
	// Expiration timestamp
	ExpiresAt time.Time `protobuf:"bytes,6,opt,name=expires_at,json=expiresAt,proto3,stdtime" json:"expires_at"`
	// Minimum trust score requirement (no commercial context)
	TrustScoreRequirement string `protobuf:"bytes,7,opt,name=trust_score_requirement,json=trustScoreRequirement,proto3" json:"trust_score_requirement,omitempty"`
	// Authorization level (basic, enhanced, critical)
	AuthorizationLevel string `protobuf:"bytes,8,opt,name=authorization_level,json=authorizationLevel,proto3" json:"authorization_level,omitempty"`
}

func (m *AnonymousPairingAuthorization) Reset()         { *m = AnonymousPairingAuthorization{} }
func (m *AnonymousPairingAuthorization) String() string { return proto.CompactTextString(m) }
func (*AnonymousPairingAuthorization) ProtoMessage()    {}
func (*AnonymousPairingAuthorization) Descriptor() ([]byte, []int) {
	return fileDescriptor_01b52f0b939e3a16, []int{3}
}
func (m *AnonymousPairingAuthorization) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AnonymousPairingAuthorization) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AnonymousPairingAuthorization.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AnonymousPairingAuthorization) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AnonymousPairingAuthorization.Merge(m, src)
}
func (m *AnonymousPairingAuthorization) XXX_Size() int {
	return m.Size()
}
func (m *AnonymousPairingAuthorization) XXX_DiscardUnknown() {
	xxx_messageInfo_AnonymousPairingAuthorization.DiscardUnknown(m)
}

var xxx_messageInfo_AnonymousPairingAuthorization proto.InternalMessageInfo

func (m *AnonymousPairingAuthorization) GetAuthId() string {
	if m != nil {
		return m.AuthId
	}
	return ""
}

func (m *AnonymousPairingAuthorization) GetComponentHashA() string {
	if m != nil {
		return m.ComponentHashA
	}
	return ""
}

func (m *AnonymousPairingAuthorization) GetComponentHashB() string {
	if m != nil {
		return m.ComponentHashB
	}
	return ""
}

func (m *AnonymousPairingAuthorization) GetRuleHash() string {
	if m != nil {
		return m.RuleHash
	}
	return ""
}

func (m *AnonymousPairingAuthorization) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

func (m *AnonymousPairingAuthorization) GetExpiresAt() time.Time {
	if m != nil {
		return m.ExpiresAt
	}
	return time.Time{}
}

func (m *AnonymousPairingAuthorization) GetTrustScoreRequirement() string {
	if m != nil {
		return m.TrustScoreRequirement
	}
	return ""
}

func (m *AnonymousPairingAuthorization) GetAuthorizationLevel() string {
	if m != nil {
		return m.AuthorizationLevel
	}
	return ""
}

// AnonymousRevocationEvent represents anonymous revocation events
type AnonymousRevocationEvent struct {
	// Anonymous revocation ID
	RevocationId string `protobuf:"bytes,1,opt,name=revocation_id,json=revocationId,proto3" json:"revocation_id,omitempty"`
	// Hash of revoked target (component/rule)
	TargetHash string `protobuf:"bytes,2,opt,name=target_hash,json=targetHash,proto3" json:"target_hash,omitempty"`
	// Revocation type (INDIVIDUAL, PATTERN, BLANKET)
	RevocationType string `protobuf:"bytes,3,opt,name=revocation_type,json=revocationType,proto3" json:"revocation_type,omitempty"`
	// Urgency level (IMMEDIATE, URGENT, STANDARD)
	UrgencyLevel string `protobuf:"bytes,4,opt,name=urgency_level,json=urgencyLevel,proto3" json:"urgency_level,omitempty"`
	// When revocation takes effect
	EffectiveAt time.Time `protobuf:"bytes,5,opt,name=effective_at,json=effectiveAt,proto3,stdtime" json:"effective_at"`
	// Reason category (SAFETY, SECURITY, OTHER) - no details
	ReasonCategory string `protobuf:"bytes,6,opt,name=reason_category,json=reasonCategory,proto3" json:"reason_category,omitempty"`
	// Hash of who initiated (no manufacturer names)
	InitiatorHash string `protobuf:"bytes,7,opt,name=initiator_hash,json=initiatorHash,proto3" json:"initiator_hash,omitempty"`
}

func (m *AnonymousRevocationEvent) Reset()         { *m = AnonymousRevocationEvent{} }
func (m *AnonymousRevocationEvent) String() string { return proto.CompactTextString(m) }
func (*AnonymousRevocationEvent) ProtoMessage()    {}
func (*AnonymousRevocationEvent) Descriptor() ([]byte, []int) {
	return fileDescriptor_01b52f0b939e3a16, []int{4}
}
func (m *AnonymousRevocationEvent) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AnonymousRevocationEvent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AnonymousRevocationEvent.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AnonymousRevocationEvent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AnonymousRevocationEvent.Merge(m, src)
}
func (m *AnonymousRevocationEvent) XXX_Size() int {
	return m.Size()
}
func (m *AnonymousRevocationEvent) XXX_DiscardUnknown() {
	xxx_messageInfo_AnonymousRevocationEvent.DiscardUnknown(m)
}

var xxx_messageInfo_AnonymousRevocationEvent proto.InternalMessageInfo

func (m *AnonymousRevocationEvent) GetRevocationId() string {
	if m != nil {
		return m.RevocationId
	}
	return ""
}

func (m *AnonymousRevocationEvent) GetTargetHash() string {
	if m != nil {
		return m.TargetHash
	}
	return ""
}

func (m *AnonymousRevocationEvent) GetRevocationType() string {
	if m != nil {
		return m.RevocationType
	}
	return ""
}

func (m *AnonymousRevocationEvent) GetUrgencyLevel() string {
	if m != nil {
		return m.UrgencyLevel
	}
	return ""
}

func (m *AnonymousRevocationEvent) GetEffectiveAt() time.Time {
	if m != nil {
		return m.EffectiveAt
	}
	return time.Time{}
}

func (m *AnonymousRevocationEvent) GetReasonCategory() string {
	if m != nil {
		return m.ReasonCategory
	}
	return ""
}

func (m *AnonymousRevocationEvent) GetInitiatorHash() string {
	if m != nil {
		return m.InitiatorHash
	}
	return ""
}

func init() {
	proto.RegisterEnum("racecarweb.componentregistry.v1.ComponentStatus", ComponentStatus_name, ComponentStatus_value)
	proto.RegisterEnum("racecarweb.componentregistry.v1.VerificationStatus", VerificationStatus_name, VerificationStatus_value)
	proto.RegisterType((*Component)(nil), "racecarweb.componentregistry.v1.Component")
	proto.RegisterType((*ComponentVerification)(nil), "racecarweb.componentregistry.v1.ComponentVerification")
	proto.RegisterType((*ComponentPairingRule)(nil), "racecarweb.componentregistry.v1.ComponentPairingRule")
	proto.RegisterType((*AnonymousPairingAuthorization)(nil), "racecarweb.componentregistry.v1.AnonymousPairingAuthorization")
	proto.RegisterType((*AnonymousRevocationEvent)(nil), "racecarweb.componentregistry.v1.AnonymousRevocationEvent")
}

func init() {
	proto.RegisterFile("racecarweb/componentregistry/v1/component.proto", fileDescriptor_01b52f0b939e3a16)
}

var fileDescriptor_01b52f0b939e3a16 = []byte{
	// 1277 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x56, 0xcd, 0x6e, 0xdb, 0x46,
	0x17, 0xb5, 0xe4, 0xf8, 0x47, 0xd7, 0xb2, 0xcc, 0x8c, 0x2d, 0x87, 0x71, 0x12, 0xc9, 0x9f, 0x8d,
	0x20, 0xfe, 0x52, 0xd4, 0x42, 0x12, 0xb4, 0x68, 0x81, 0x02, 0x05, 0x23, 0x31, 0x09, 0x9b, 0x46,
	0x76, 0x29, 0xc5, 0x28, 0xba, 0x21, 0xc6, 0xe4, 0x48, 0x1a, 0x94, 0x22, 0x95, 0xe1, 0x48, 0xb1,
	0xfa, 0x0a, 0xdd, 0x64, 0xd3, 0xe7, 0xe9, 0xa6, 0x40, 0xb3, 0xcc, 0xb2, 0xab, 0xb6, 0x48, 0xb6,
	0x05, 0xfa, 0x0a, 0xc5, 0xcc, 0xf0, 0x4f, 0x91, 0x52, 0xd4, 0x3b, 0xf3, 0x9c, 0x73, 0x67, 0x46,
	0xc7, 0xe7, 0xde, 0x19, 0x68, 0x30, 0xec, 0x12, 0x17, 0xb3, 0x97, 0xe4, 0xbc, 0xe1, 0x86, 0xc3,
	0x51, 0x18, 0x90, 0x80, 0x33, 0xd2, 0xa7, 0x11, 0x67, 0xd3, 0xc6, 0xe4, 0x5e, 0x06, 0x1e, 0x8f,
	0x58, 0xc8, 0x43, 0x54, 0xcf, 0x0a, 0x8e, 0xe7, 0x0a, 0x8e, 0x27, 0xf7, 0xf6, 0x76, 0xfa, 0x61,
	0x3f, 0x94, 0xda, 0x86, 0xf8, 0x4b, 0x95, 0xed, 0xd5, 0xfb, 0x61, 0xd8, 0xf7, 0x49, 0x43, 0x7e,
	0x9d, 0x8f, 0x7b, 0x0d, 0x4e, 0x87, 0x24, 0xe2, 0x78, 0x38, 0x52, 0x82, 0x83, 0x5f, 0xd6, 0xa0,
	0xd4, 0x4c, 0xd6, 0x43, 0xff, 0x83, 0x72, 0xba, 0xb8, 0x43, 0x3d, 0xbd, 0xb0, 0x5f, 0x38, 0x2a,
	0xd9, 0x1b, 0x29, 0x66, 0x79, 0xe8, 0x23, 0xb8, 0x3a, 0xc4, 0xc1, 0xb8, 0x87, 0x5d, 0x3e, 0x66,
	0x84, 0x39, 0x03, 0x1c, 0x0d, 0xf4, 0xa2, 0xd4, 0x69, 0x79, 0xe2, 0x09, 0x8e, 0x06, 0xe8, 0x10,
	0x36, 0x5d, 0xcc, 0x49, 0x3f, 0x64, 0x53, 0x25, 0x5c, 0x96, 0xc2, 0x72, 0x02, 0x4a, 0xd1, 0x67,
	0xa0, 0xe3, 0x31, 0x1f, 0x84, 0x8c, 0xfe, 0x80, 0x39, 0x0d, 0x03, 0x87, 0x8d, 0x7d, 0x12, 0x29,
	0xfd, 0x15, 0xa9, 0xdf, 0x9d, 0xe1, 0x6d, 0x41, 0xcb, 0xca, 0x5d, 0x58, 0x8d, 0x38, 0xe6, 0xe3,
	0x48, 0x5f, 0x91, 0xba, 0xf8, 0x0b, 0x59, 0xb0, 0xa9, 0xac, 0x21, 0x8c, 0x78, 0x0e, 0xe6, 0xfa,
	0xea, 0x7e, 0xe1, 0x68, 0xe3, 0xfe, 0xde, 0xb1, 0x72, 0xe3, 0x38, 0x71, 0xe3, 0xb8, 0x9b, 0xb8,
	0xf1, 0x70, 0xfd, 0xf5, 0xef, 0xf5, 0xa5, 0x57, 0x7f, 0xd4, 0x0b, 0x76, 0x39, 0x2b, 0x35, 0xa4,
	0x23, 0x9c, 0x8d, 0x23, 0xee, 0xe0, 0xc0, 0x1d, 0x84, 0x4c, 0x5f, 0x53, 0x8e, 0x48, 0xcc, 0x90,
	0x10, 0x6a, 0x83, 0xe6, 0xe3, 0x88, 0x3b, 0x13, 0xc2, 0x68, 0x8f, 0xaa, 0x0d, 0xd7, 0x2f, 0xb1,
	0x61, 0x45, 0x54, 0x9f, 0xc5, 0xc5, 0x06, 0x47, 0x0f, 0xa0, 0xaa, 0x96, 0x72, 0x95, 0x1d, 0x43,
	0xc2, 0xb1, 0x87, 0x39, 0xd6, 0x4b, 0x72, 0xef, 0x9d, 0x3c, 0xf9, 0x2c, 0xe6, 0x50, 0x03, 0xb6,
	0x19, 0xf1, 0x25, 0x16, 0x0d, 0xe8, 0x48, 0xba, 0x47, 0x22, 0x1d, 0xf6, 0x97, 0x8f, 0x4a, 0x36,
	0xca, 0x53, 0x4f, 0x24, 0x83, 0xae, 0xc3, 0xba, 0xef, 0x72, 0xe5, 0xf2, 0x86, 0x5c, 0x78, 0xcd,
	0x77, 0xb9, 0xb4, 0xf5, 0x73, 0xb8, 0x4e, 0x02, 0x97, 0x4d, 0x47, 0x9c, 0x78, 0x8e, 0x47, 0x26,
	0xd4, 0x25, 0xce, 0xf7, 0x44, 0xfc, 0x07, 0xfd, 0x9e, 0x5e, 0xde, 0x2f, 0x1c, 0x95, 0xed, 0xdd,
	0x54, 0xd0, 0x92, 0xfc, 0x53, 0x32, 0x7d, 0x82, 0xfd, 0x1e, 0xba, 0x03, 0x5b, 0x33, 0xe9, 0xa0,
	0x9e, 0xbe, 0x29, 0x17, 0xaf, 0xe4, 0x61, 0xcb, 0x43, 0xb7, 0xa1, 0x92, 0x25, 0x8d, 0x4f, 0x47,
	0x44, 0xaf, 0x48, 0xdd, 0x66, 0x8a, 0x76, 0xa7, 0x23, 0x22, 0x64, 0x03, 0xcc, 0xbc, 0x97, 0x98,
	0x11, 0x27, 0x1a, 0x11, 0x37, 0xd2, 0xb7, 0x94, 0x2c, 0x41, 0x3b, 0x02, 0x14, 0x39, 0x7b, 0x31,
	0xc6, 0x3e, 0xe5, 0x53, 0x27, 0x72, 0x43, 0x46, 0x74, 0x4d, 0xe5, 0x2c, 0x06, 0x3b, 0x02, 0x43,
	0x07, 0x50, 0x76, 0xf1, 0x08, 0x9f, 0x53, 0x9f, 0x72, 0x4a, 0x22, 0xfd, 0x6a, 0x92, 0xc5, 0x0c,
	0x43, 0xff, 0x07, 0x6d, 0xc6, 0x46, 0xea, 0x45, 0x3a, 0x92, 0x1e, 0x6e, 0xe5, 0x71, 0xcb, 0x8b,
	0x50, 0x15, 0x56, 0x85, 0x81, 0xd4, 0xd3, 0xb7, 0xe5, 0x42, 0x2b, 0xbe, 0x2b, 0xfa, 0xa3, 0x01,
	0xdb, 0x0b, 0xd2, 0xac, 0xef, 0x48, 0x0d, 0x9a, 0x0f, 0x32, 0x6a, 0x02, 0xb8, 0x8c, 0x60, 0xae,
	0x82, 0x53, 0xbd, 0x44, 0x70, 0x4a, 0x71, 0x9d, 0xc1, 0x0f, 0x7e, 0x2a, 0x42, 0x35, 0x6d, 0xe3,
	0xb3, 0x5c, 0x40, 0xfe, 0x4b, 0x4b, 0x67, 0x6d, 0x54, 0x9c, 0x69, 0x23, 0x13, 0x36, 0xf2, 0x99,
	0x5e, 0xbe, 0xc4, 0xd1, 0x60, 0x92, 0xe5, 0xb9, 0x01, 0xdb, 0xef, 0xe7, 0x79, 0x10, 0x7a, 0x71,
	0x6b, 0xa3, 0xf7, 0xd2, 0x3c, 0x08, 0xbd, 0xb9, 0x06, 0x20, 0x13, 0xea, 0x91, 0xc0, 0x25, 0x71,
	0x97, 0xcf, 0x34, 0x80, 0x19, 0x73, 0x68, 0x07, 0x56, 0x82, 0x90, 0x93, 0x48, 0xf6, 0x7a, 0xc9,
	0x56, 0x1f, 0x07, 0x7f, 0x15, 0x61, 0x27, 0xf5, 0xe5, 0x14, 0x53, 0x46, 0x83, 0xbe, 0xb0, 0x1d,
	0x1d, 0x81, 0x16, 0x85, 0x63, 0xe6, 0x12, 0x19, 0x3e, 0xd5, 0x06, 0xca, 0x9a, 0x8a, 0xc2, 0x45,
	0xfc, 0x64, 0x37, 0x1c, 0x81, 0xc6, 0x31, 0xeb, 0x13, 0x9e, 0x53, 0x2a, 0x9f, 0x2a, 0x0a, 0x4f,
	0x95, 0x77, 0xe1, 0xea, 0x90, 0x06, 0xce, 0x6c, 0x12, 0xd5, 0xc4, 0xdb, 0x1a, 0xd2, 0xe0, 0x9b,
	0x7c, 0x18, 0xbf, 0x80, 0x3d, 0x46, 0x5e, 0x8c, 0xa9, 0x18, 0x50, 0xf9, 0x04, 0xe6, 0xc7, 0x9e,
	0x9e, 0x28, 0x9a, 0x39, 0x81, 0xdc, 0x49, 0x0e, 0xe1, 0x0b, 0x27, 0x1f, 0x49, 0x35, 0x03, 0x37,
	0xc5, 0x10, 0xbe, 0xb0, 0xf3, 0x38, 0xfa, 0x04, 0x76, 0xcf, 0xa9, 0x47, 0x19, 0x71, 0x05, 0x86,
	0x7d, 0x27, 0x59, 0x56, 0x5a, 0xb5, 0x6e, 0x57, 0x67, 0x58, 0x3b, 0x26, 0xd1, 0x7d, 0xa8, 0x4e,
	0xb0, 0x4f, 0xbd, 0xb9, 0x99, 0xac, 0x46, 0xe0, 0x76, 0x46, 0xa6, 0x03, 0xf9, 0xe0, 0xef, 0x22,
	0xdc, 0x32, 0x82, 0x30, 0x98, 0x0e, 0xc3, 0x71, 0x14, 0xdb, 0x6d, 0xe4, 0x23, 0x8f, 0xae, 0xc1,
	0x9a, 0xe8, 0x81, 0x2c, 0x89, 0xab, 0xe2, 0xd3, 0xf2, 0x84, 0xcd, 0x59, 0x4e, 0xc5, 0x3e, 0x0e,
	0x4e, 0x6c, 0x4e, 0x71, 0xb1, 0x87, 0xb1, 0x40, 0x79, 0x1e, 0xbb, 0x3c, 0xab, 0x7c, 0x88, 0x6e,
	0x40, 0x49, 0x9c, 0x3b, 0xef, 0xe9, 0xba, 0x00, 0xfe, 0xf5, 0xf2, 0x68, 0x02, 0x90, 0x8b, 0x11,
	0x65, 0x24, 0xba, 0xec, 0xcd, 0x51, 0x8a, 0xeb, 0x0c, 0x8e, 0x3e, 0x85, 0x6b, 0xea, 0xda, 0x90,
	0x21, 0x48, 0x1c, 0x1f, 0x92, 0x80, 0xc7, 0xf6, 0x55, 0x25, 0x2d, 0xb3, 0x60, 0x67, 0xe4, 0xfc,
	0xf4, 0xf0, 0xc9, 0x84, 0xf8, 0xf2, 0x3a, 0x79, 0x7f, 0x7a, 0x7c, 0x2d, 0x98, 0x83, 0x5f, 0x8b,
	0xa0, 0xa7, 0x8e, 0xdb, 0x64, 0x12, 0x26, 0x6d, 0x21, 0x56, 0x3b, 0x14, 0xf7, 0x60, 0x02, 0x65,
	0x96, 0x97, 0x33, 0xd0, 0xf2, 0x50, 0x1d, 0x36, 0xe2, 0x7c, 0xe7, 0xa2, 0x0d, 0x0a, 0x92, 0x46,
	0xdd, 0x81, 0xad, 0xdc, 0x2a, 0x72, 0x56, 0xc7, 0x76, 0x67, 0xb0, 0x1c, 0xd6, 0x87, 0xb0, 0x39,
	0x66, 0x7d, 0x12, 0xb8, 0xd3, 0xf8, 0xd8, 0xca, 0xf2, 0x72, 0x0c, 0xca, 0x03, 0xa3, 0xc7, 0x50,
	0x26, 0xbd, 0x9e, 0x48, 0xdb, 0x84, 0x08, 0x83, 0x57, 0x2e, 0x61, 0xf0, 0x46, 0x5a, 0x69, 0x70,
	0x75, 0x2c, 0x1c, 0x85, 0x81, 0x93, 0xbc, 0x26, 0xe2, 0xd6, 0xaf, 0x28, 0xb8, 0x19, 0xa3, 0xe2,
	0x0e, 0xa1, 0x01, 0xe5, 0x14, 0xf3, 0x90, 0xe5, 0x13, 0xbc, 0x99, 0xa2, 0xe2, 0x67, 0xde, 0xfd,
	0xb1, 0x08, 0x5b, 0xe9, 0xa8, 0xe8, 0xa8, 0x2c, 0xec, 0xc3, 0xcd, 0xe6, 0xc9, 0xb3, 0xd3, 0x93,
	0xb6, 0xd9, 0xee, 0x3a, 0x9d, 0xae, 0xd1, 0x7d, 0xde, 0x71, 0x9e, 0xb7, 0x3b, 0xa7, 0x66, 0xd3,
	0x7a, 0x64, 0x99, 0x2d, 0x6d, 0x09, 0xdd, 0x04, 0x7d, 0x4e, 0x71, 0x6a, 0xb6, 0x5b, 0x56, 0xfb,
	0xb1, 0x56, 0x40, 0x37, 0xe0, 0xda, 0x1c, 0x6b, 0x34, 0xbb, 0xd6, 0x99, 0xa9, 0x15, 0xd1, 0x2d,
	0xb8, 0x3e, 0x47, 0x5a, 0xed, 0x98, 0x5e, 0x5e, 0xb8, 0xf7, 0x33, 0xc3, 0x6a, 0x77, 0xcd, 0xb6,
	0xd1, 0x6e, 0x9a, 0xda, 0x95, 0x85, 0x7b, 0xdb, 0x66, 0xd7, 0xb2, 0xcd, 0x96, 0xb6, 0xf2, 0x01,
	0xf6, 0xec, 0xe4, 0xa9, 0xd9, 0xd2, 0x56, 0x51, 0x0d, 0xf6, 0xe6, 0xd8, 0xce, 0xf3, 0x8e, 0x38,
	0xba, 0xd9, 0xd2, 0xd6, 0xee, 0xfe, 0x5c, 0x00, 0x94, 0xbf, 0x47, 0x62, 0x43, 0x0e, 0xa1, 0x7e,
	0x66, 0xda, 0xd6, 0x23, 0xab, 0x69, 0x74, 0xad, 0x93, 0xf6, 0x62, 0x4f, 0xea, 0x70, 0x63, 0x91,
	0x28, 0xb3, 0x65, 0x1f, 0x6e, 0x2e, 0x12, 0x28, 0xcc, 0x6c, 0x69, 0xc5, 0x0f, 0x29, 0x6c, 0xf3,
	0x2b, 0xb3, 0xd9, 0x35, 0x5b, 0xda, 0xf2, 0x87, 0x36, 0x31, 0xbf, 0x3d, 0x95, 0xbf, 0xff, 0xca,
	0xc3, 0x2f, 0x5f, 0xbf, 0xad, 0x15, 0xde, 0xbc, 0xad, 0x15, 0xfe, 0x7c, 0x5b, 0x2b, 0xbc, 0x7a,
	0x57, 0x5b, 0x7a, 0xf3, 0xae, 0xb6, 0xf4, 0xdb, 0xbb, 0xda, 0xd2, 0x77, 0xb7, 0xe3, 0xb7, 0xf4,
	0xc7, 0xe2, 0xf5, 0x7d, 0xb1, 0xe0, 0xfd, 0x2d, 0x32, 0x1e, 0x9d, 0xaf, 0xca, 0x2c, 0x3e, 0xf8,
	0x27, 0x00, 0x00, 0xff, 0xff, 0x6a, 0x97, 0x7c, 0x59, 0xac, 0x0b, 0x00, 0x00,
}

func (m *Component) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Component) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Component) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	n1, err1 := github_com_cosmos_gogoproto_types.StdTimeMarshalTo(m.CreatedAt, dAtA[i-github_com_cosmos_gogoproto_types.SizeOfStdTime(m.CreatedAt):])
	if err1 != nil {
		return 0, err1
	}
	i -= n1
	i = encodeVarintComponent(dAtA, i, uint64(n1))
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0xaa
	if len(m.AuthorizationRules) > 0 {
		i -= len(m.AuthorizationRules)
		copy(dAtA[i:], m.AuthorizationRules)
		i = encodeVarintComponent(dAtA, i, uint64(len(m.AuthorizationRules)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xa2
	}
	if len(m.LctId) > 0 {
		i -= len(m.LctId)
		copy(dAtA[i:], m.LctId)
		i = encodeVarintComponent(dAtA, i, uint64(len(m.LctId)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x9a
	}
	if len(m.RelationshipIds) > 0 {
		for iNdEx := len(m.RelationshipIds) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.RelationshipIds[iNdEx])
			copy(dAtA[i:], m.RelationshipIds[iNdEx])
			i = encodeVarintComponent(dAtA, i, uint64(len(m.RelationshipIds[iNdEx])))
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0x92
		}
	}
	if len(m.Capabilities) > 0 {
		i -= len(m.Capabilities)
		copy(dAtA[i:], m.Capabilities)
		i = encodeVarintComponent(dAtA, i, uint64(len(m.Capabilities)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x8a
	}
	if len(m.QualityScore) > 0 {
		i -= len(m.QualityScore)
		copy(dAtA[i:], m.QualityScore)
		i = encodeVarintComponent(dAtA, i, uint64(len(m.QualityScore)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x82
	}
	if len(m.HardwareSpecs) > 0 {
		i -= len(m.HardwareSpecs)
		copy(dAtA[i:], m.HardwareSpecs)
		i = encodeVarintComponent(dAtA, i, uint64(len(m.HardwareSpecs)))
		i--
		dAtA[i] = 0x7a
	}
	if len(m.ComponentType) > 0 {
		i -= len(m.ComponentType)
		copy(dAtA[i:], m.ComponentType)
		i = encodeVarintComponent(dAtA, i, uint64(len(m.ComponentType)))
		i--
		dAtA[i] = 0x72
	}
	if len(m.ManufacturerId) > 0 {
		i -= len(m.ManufacturerId)
		copy(dAtA[i:], m.ManufacturerId)
		i = encodeVarintComponent(dAtA, i, uint64(len(m.ManufacturerId)))
		i--
		dAtA[i] = 0x6a
	}
	if len(m.EncryptedDeviceKeyHalf) > 0 {
		i -= len(m.EncryptedDeviceKeyHalf)
		copy(dAtA[i:], m.EncryptedDeviceKeyHalf)
		i = encodeVarintComponent(dAtA, i, uint64(len(m.EncryptedDeviceKeyHalf)))
		i--
		dAtA[i] = 0x62
	}
	if len(m.LctHash) > 0 {
		i -= len(m.LctHash)
		copy(dAtA[i:], m.LctHash)
		i = encodeVarintComponent(dAtA, i, uint64(len(m.LctHash)))
		i--
		dAtA[i] = 0x5a
	}
	if len(m.RelationshipHashes) > 0 {
		for iNdEx := len(m.RelationshipHashes) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.RelationshipHashes[iNdEx])
			copy(dAtA[i:], m.RelationshipHashes[iNdEx])
			i = encodeVarintComponent(dAtA, i, uint64(len(m.RelationshipHashes[iNdEx])))
			i--
			dAtA[i] = 0x52
		}
	}
	if len(m.VerificationMetadata) > 0 {
		i -= len(m.VerificationMetadata)
		copy(dAtA[i:], m.VerificationMetadata)
		i = encodeVarintComponent(dAtA, i, uint64(len(m.VerificationMetadata)))
		i--
		dAtA[i] = 0x4a
	}
	n2, err2 := github_com_cosmos_gogoproto_types.StdTimeMarshalTo(m.LastVerifiedAt, dAtA[i-github_com_cosmos_gogoproto_types.SizeOfStdTime(m.LastVerifiedAt):])
	if err2 != nil {
		return 0, err2
	}
	i -= n2
	i = encodeVarintComponent(dAtA, i, uint64(n2))
	i--
	dAtA[i] = 0x42
	if len(m.TrustAnchor) > 0 {
		i -= len(m.TrustAnchor)
		copy(dAtA[i:], m.TrustAnchor)
		i = encodeVarintComponent(dAtA, i, uint64(len(m.TrustAnchor)))
		i--
		dAtA[i] = 0x3a
	}
	n3, err3 := github_com_cosmos_gogoproto_types.StdTimeMarshalTo(m.RegisteredAt, dAtA[i-github_com_cosmos_gogoproto_types.SizeOfStdTime(m.RegisteredAt):])
	if err3 != nil {
		return 0, err3
	}
	i -= n3
	i = encodeVarintComponent(dAtA, i, uint64(n3))
	i--
	dAtA[i] = 0x32
	if len(m.Status) > 0 {
		i -= len(m.Status)
		copy(dAtA[i:], m.Status)
		i = encodeVarintComponent(dAtA, i, uint64(len(m.Status)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.AuthorizationRulesHash) > 0 {
		i -= len(m.AuthorizationRulesHash)
		copy(dAtA[i:], m.AuthorizationRulesHash)
		i = encodeVarintComponent(dAtA, i, uint64(len(m.AuthorizationRulesHash)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.CategoryHash) > 0 {
		i -= len(m.CategoryHash)
		copy(dAtA[i:], m.CategoryHash)
		i = encodeVarintComponent(dAtA, i, uint64(len(m.CategoryHash)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ManufacturerHash) > 0 {
		i -= len(m.ManufacturerHash)
		copy(dAtA[i:], m.ManufacturerHash)
		i = encodeVarintComponent(dAtA, i, uint64(len(m.ManufacturerHash)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ComponentId) > 0 {
		i -= len(m.ComponentId)
		copy(dAtA[i:], m.ComponentId)
		i = encodeVarintComponent(dAtA, i, uint64(len(m.ComponentId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ComponentVerification) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ComponentVerification) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ComponentVerification) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Notes) > 0 {
		i -= len(m.Notes)
		copy(dAtA[i:], m.Notes)
		i = encodeVarintComponent(dAtA, i, uint64(len(m.Notes)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.VerificationEvidence) > 0 {
		i -= len(m.VerificationEvidence)
		copy(dAtA[i:], m.VerificationEvidence)
		i = encodeVarintComponent(dAtA, i, uint64(len(m.VerificationEvidence)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.VerificationMethod) > 0 {
		i -= len(m.VerificationMethod)
		copy(dAtA[i:], m.VerificationMethod)
		i = encodeVarintComponent(dAtA, i, uint64(len(m.VerificationMethod)))
		i--
		dAtA[i] = 0x22
	}
	n4, err4 := github_com_cosmos_gogoproto_types.StdTimeMarshalTo(m.VerifiedAt, dAtA[i-github_com_cosmos_gogoproto_types.SizeOfStdTime(m.VerifiedAt):])
	if err4 != nil {
		return 0, err4
	}
	i -= n4
	i = encodeVarintComponent(dAtA, i, uint64(n4))
	i--
	dAtA[i] = 0x1a
	if len(m.Status) > 0 {
		i -= len(m.Status)
		copy(dAtA[i:], m.Status)
		i = encodeVarintComponent(dAtA, i, uint64(len(m.Status)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ComponentId) > 0 {
		i -= len(m.ComponentId)
		copy(dAtA[i:], m.ComponentId)
		i = encodeVarintComponent(dAtA, i, uint64(len(m.ComponentId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ComponentPairingRule) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ComponentPairingRule) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ComponentPairingRule) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ValidationRulesHash) > 0 {
		i -= len(m.ValidationRulesHash)
		copy(dAtA[i:], m.ValidationRulesHash)
		i = encodeVarintComponent(dAtA, i, uint64(len(m.ValidationRulesHash)))
		i--
		dAtA[i] = 0x3a
	}
	if m.BidirectionalRequired {
		i--
		if m.BidirectionalRequired {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x30
	}
	if m.MaxRelationships != 0 {
		i = encodeVarintComponent(dAtA, i, uint64(m.MaxRelationships))
		i--
		dAtA[i] = 0x28
	}
	if len(m.RequiredCapabilitiesHash) > 0 {
		i -= len(m.RequiredCapabilitiesHash)
		copy(dAtA[i:], m.RequiredCapabilitiesHash)
		i = encodeVarintComponent(dAtA, i, uint64(len(m.RequiredCapabilitiesHash)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.MinQualityScore) > 0 {
		i -= len(m.MinQualityScore)
		copy(dAtA[i:], m.MinQualityScore)
		i = encodeVarintComponent(dAtA, i, uint64(len(m.MinQualityScore)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.TargetTypeHash) > 0 {
		i -= len(m.TargetTypeHash)
		copy(dAtA[i:], m.TargetTypeHash)
		i = encodeVarintComponent(dAtA, i, uint64(len(m.TargetTypeHash)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.SourceTypeHash) > 0 {
		i -= len(m.SourceTypeHash)
		copy(dAtA[i:], m.SourceTypeHash)
		i = encodeVarintComponent(dAtA, i, uint64(len(m.SourceTypeHash)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *AnonymousPairingAuthorization) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AnonymousPairingAuthorization) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AnonymousPairingAuthorization) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.AuthorizationLevel) > 0 {
		i -= len(m.AuthorizationLevel)
		copy(dAtA[i:], m.AuthorizationLevel)
		i = encodeVarintComponent(dAtA, i, uint64(len(m.AuthorizationLevel)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.TrustScoreRequirement) > 0 {
		i -= len(m.TrustScoreRequirement)
		copy(dAtA[i:], m.TrustScoreRequirement)
		i = encodeVarintComponent(dAtA, i, uint64(len(m.TrustScoreRequirement)))
		i--
		dAtA[i] = 0x3a
	}
	n5, err5 := github_com_cosmos_gogoproto_types.StdTimeMarshalTo(m.ExpiresAt, dAtA[i-github_com_cosmos_gogoproto_types.SizeOfStdTime(m.ExpiresAt):])
	if err5 != nil {
		return 0, err5
	}
	i -= n5
	i = encodeVarintComponent(dAtA, i, uint64(n5))
	i--
	dAtA[i] = 0x32
	if len(m.Status) > 0 {
		i -= len(m.Status)
		copy(dAtA[i:], m.Status)
		i = encodeVarintComponent(dAtA, i, uint64(len(m.Status)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.RuleHash) > 0 {
		i -= len(m.RuleHash)
		copy(dAtA[i:], m.RuleHash)
		i = encodeVarintComponent(dAtA, i, uint64(len(m.RuleHash)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.ComponentHashB) > 0 {
		i -= len(m.ComponentHashB)
		copy(dAtA[i:], m.ComponentHashB)
		i = encodeVarintComponent(dAtA, i, uint64(len(m.ComponentHashB)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ComponentHashA) > 0 {
		i -= len(m.ComponentHashA)
		copy(dAtA[i:], m.ComponentHashA)
		i = encodeVarintComponent(dAtA, i, uint64(len(m.ComponentHashA)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.AuthId) > 0 {
		i -= len(m.AuthId)
		copy(dAtA[i:], m.AuthId)
		i = encodeVarintComponent(dAtA, i, uint64(len(m.AuthId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *AnonymousRevocationEvent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AnonymousRevocationEvent) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AnonymousRevocationEvent) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.InitiatorHash) > 0 {
		i -= len(m.InitiatorHash)
		copy(dAtA[i:], m.InitiatorHash)
		i = encodeVarintComponent(dAtA, i, uint64(len(m.InitiatorHash)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.ReasonCategory) > 0 {
		i -= len(m.ReasonCategory)
		copy(dAtA[i:], m.ReasonCategory)
		i = encodeVarintComponent(dAtA, i, uint64(len(m.ReasonCategory)))
		i--
		dAtA[i] = 0x32
	}
	n6, err6 := github_com_cosmos_gogoproto_types.StdTimeMarshalTo(m.EffectiveAt, dAtA[i-github_com_cosmos_gogoproto_types.SizeOfStdTime(m.EffectiveAt):])
	if err6 != nil {
		return 0, err6
	}
	i -= n6
	i = encodeVarintComponent(dAtA, i, uint64(n6))
	i--
	dAtA[i] = 0x2a
	if len(m.UrgencyLevel) > 0 {
		i -= len(m.UrgencyLevel)
		copy(dAtA[i:], m.UrgencyLevel)
		i = encodeVarintComponent(dAtA, i, uint64(len(m.UrgencyLevel)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.RevocationType) > 0 {
		i -= len(m.RevocationType)
		copy(dAtA[i:], m.RevocationType)
		i = encodeVarintComponent(dAtA, i, uint64(len(m.RevocationType)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.TargetHash) > 0 {
		i -= len(m.TargetHash)
		copy(dAtA[i:], m.TargetHash)
		i = encodeVarintComponent(dAtA, i, uint64(len(m.TargetHash)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.RevocationId) > 0 {
		i -= len(m.RevocationId)
		copy(dAtA[i:], m.RevocationId)
		i = encodeVarintComponent(dAtA, i, uint64(len(m.RevocationId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintComponent(dAtA []byte, offset int, v uint64) int {
	offset -= sovComponent(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Component) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ComponentId)
	if l > 0 {
		n += 1 + l + sovComponent(uint64(l))
	}
	l = len(m.ManufacturerHash)
	if l > 0 {
		n += 1 + l + sovComponent(uint64(l))
	}
	l = len(m.CategoryHash)
	if l > 0 {
		n += 1 + l + sovComponent(uint64(l))
	}
	l = len(m.AuthorizationRulesHash)
	if l > 0 {
		n += 1 + l + sovComponent(uint64(l))
	}
	l = len(m.Status)
	if l > 0 {
		n += 1 + l + sovComponent(uint64(l))
	}
	l = github_com_cosmos_gogoproto_types.SizeOfStdTime(m.RegisteredAt)
	n += 1 + l + sovComponent(uint64(l))
	l = len(m.TrustAnchor)
	if l > 0 {
		n += 1 + l + sovComponent(uint64(l))
	}
	l = github_com_cosmos_gogoproto_types.SizeOfStdTime(m.LastVerifiedAt)
	n += 1 + l + sovComponent(uint64(l))
	l = len(m.VerificationMetadata)
	if l > 0 {
		n += 1 + l + sovComponent(uint64(l))
	}
	if len(m.RelationshipHashes) > 0 {
		for _, s := range m.RelationshipHashes {
			l = len(s)
			n += 1 + l + sovComponent(uint64(l))
		}
	}
	l = len(m.LctHash)
	if l > 0 {
		n += 1 + l + sovComponent(uint64(l))
	}
	l = len(m.EncryptedDeviceKeyHalf)
	if l > 0 {
		n += 1 + l + sovComponent(uint64(l))
	}
	l = len(m.ManufacturerId)
	if l > 0 {
		n += 1 + l + sovComponent(uint64(l))
	}
	l = len(m.ComponentType)
	if l > 0 {
		n += 1 + l + sovComponent(uint64(l))
	}
	l = len(m.HardwareSpecs)
	if l > 0 {
		n += 1 + l + sovComponent(uint64(l))
	}
	l = len(m.QualityScore)
	if l > 0 {
		n += 2 + l + sovComponent(uint64(l))
	}
	l = len(m.Capabilities)
	if l > 0 {
		n += 2 + l + sovComponent(uint64(l))
	}
	if len(m.RelationshipIds) > 0 {
		for _, s := range m.RelationshipIds {
			l = len(s)
			n += 2 + l + sovComponent(uint64(l))
		}
	}
	l = len(m.LctId)
	if l > 0 {
		n += 2 + l + sovComponent(uint64(l))
	}
	l = len(m.AuthorizationRules)
	if l > 0 {
		n += 2 + l + sovComponent(uint64(l))
	}
	l = github_com_cosmos_gogoproto_types.SizeOfStdTime(m.CreatedAt)
	n += 2 + l + sovComponent(uint64(l))
	return n
}

func (m *ComponentVerification) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ComponentId)
	if l > 0 {
		n += 1 + l + sovComponent(uint64(l))
	}
	l = len(m.Status)
	if l > 0 {
		n += 1 + l + sovComponent(uint64(l))
	}
	l = github_com_cosmos_gogoproto_types.SizeOfStdTime(m.VerifiedAt)
	n += 1 + l + sovComponent(uint64(l))
	l = len(m.VerificationMethod)
	if l > 0 {
		n += 1 + l + sovComponent(uint64(l))
	}
	l = len(m.VerificationEvidence)
	if l > 0 {
		n += 1 + l + sovComponent(uint64(l))
	}
	l = len(m.Notes)
	if l > 0 {
		n += 1 + l + sovComponent(uint64(l))
	}
	return n
}

func (m *ComponentPairingRule) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.SourceTypeHash)
	if l > 0 {
		n += 1 + l + sovComponent(uint64(l))
	}
	l = len(m.TargetTypeHash)
	if l > 0 {
		n += 1 + l + sovComponent(uint64(l))
	}
	l = len(m.MinQualityScore)
	if l > 0 {
		n += 1 + l + sovComponent(uint64(l))
	}
	l = len(m.RequiredCapabilitiesHash)
	if l > 0 {
		n += 1 + l + sovComponent(uint64(l))
	}
	if m.MaxRelationships != 0 {
		n += 1 + sovComponent(uint64(m.MaxRelationships))
	}
	if m.BidirectionalRequired {
		n += 2
	}
	l = len(m.ValidationRulesHash)
	if l > 0 {
		n += 1 + l + sovComponent(uint64(l))
	}
	return n
}

func (m *AnonymousPairingAuthorization) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.AuthId)
	if l > 0 {
		n += 1 + l + sovComponent(uint64(l))
	}
	l = len(m.ComponentHashA)
	if l > 0 {
		n += 1 + l + sovComponent(uint64(l))
	}
	l = len(m.ComponentHashB)
	if l > 0 {
		n += 1 + l + sovComponent(uint64(l))
	}
	l = len(m.RuleHash)
	if l > 0 {
		n += 1 + l + sovComponent(uint64(l))
	}
	l = len(m.Status)
	if l > 0 {
		n += 1 + l + sovComponent(uint64(l))
	}
	l = github_com_cosmos_gogoproto_types.SizeOfStdTime(m.ExpiresAt)
	n += 1 + l + sovComponent(uint64(l))
	l = len(m.TrustScoreRequirement)
	if l > 0 {
		n += 1 + l + sovComponent(uint64(l))
	}
	l = len(m.AuthorizationLevel)
	if l > 0 {
		n += 1 + l + sovComponent(uint64(l))
	}
	return n
}

func (m *AnonymousRevocationEvent) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.RevocationId)
	if l > 0 {
		n += 1 + l + sovComponent(uint64(l))
	}
	l = len(m.TargetHash)
	if l > 0 {
		n += 1 + l + sovComponent(uint64(l))
	}
	l = len(m.RevocationType)
	if l > 0 {
		n += 1 + l + sovComponent(uint64(l))
	}
	l = len(m.UrgencyLevel)
	if l > 0 {
		n += 1 + l + sovComponent(uint64(l))
	}
	l = github_com_cosmos_gogoproto_types.SizeOfStdTime(m.EffectiveAt)
	n += 1 + l + sovComponent(uint64(l))
	l = len(m.ReasonCategory)
	if l > 0 {
		n += 1 + l + sovComponent(uint64(l))
	}
	l = len(m.InitiatorHash)
	if l > 0 {
		n += 1 + l + sovComponent(uint64(l))
	}
	return n
}

func sovComponent(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozComponent(x uint64) (n int) {
	return sovComponent(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Component) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowComponent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Component: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Component: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ComponentId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComponent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthComponent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthComponent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ComponentId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ManufacturerHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComponent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthComponent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthComponent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ManufacturerHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CategoryHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComponent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthComponent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthComponent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CategoryHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AuthorizationRulesHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComponent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthComponent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthComponent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AuthorizationRulesHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComponent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthComponent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthComponent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Status = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RegisteredAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComponent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthComponent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthComponent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_cosmos_gogoproto_types.StdTimeUnmarshal(&m.RegisteredAt, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TrustAnchor", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComponent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthComponent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthComponent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TrustAnchor = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastVerifiedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComponent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthComponent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthComponent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_cosmos_gogoproto_types.StdTimeUnmarshal(&m.LastVerifiedAt, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VerificationMetadata", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComponent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthComponent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthComponent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VerificationMetadata = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RelationshipHashes", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComponent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthComponent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthComponent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RelationshipHashes = append(m.RelationshipHashes, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LctHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComponent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthComponent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthComponent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LctHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EncryptedDeviceKeyHalf", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComponent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthComponent
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthComponent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EncryptedDeviceKeyHalf = append(m.EncryptedDeviceKeyHalf[:0], dAtA[iNdEx:postIndex]...)
			if m.EncryptedDeviceKeyHalf == nil {
				m.EncryptedDeviceKeyHalf = []byte{}
			}
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ManufacturerId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComponent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthComponent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthComponent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ManufacturerId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ComponentType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComponent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthComponent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthComponent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ComponentType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HardwareSpecs", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComponent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthComponent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthComponent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HardwareSpecs = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field QualityScore", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComponent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthComponent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthComponent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.QualityScore = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 17:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Capabilities", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComponent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthComponent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthComponent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Capabilities = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 18:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RelationshipIds", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComponent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthComponent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthComponent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RelationshipIds = append(m.RelationshipIds, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 19:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LctId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComponent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthComponent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthComponent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LctId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 20:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AuthorizationRules", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComponent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthComponent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthComponent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AuthorizationRules = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 21:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComponent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthComponent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthComponent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_cosmos_gogoproto_types.StdTimeUnmarshal(&m.CreatedAt, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipComponent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthComponent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ComponentVerification) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowComponent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ComponentVerification: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ComponentVerification: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ComponentId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComponent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthComponent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthComponent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ComponentId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComponent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthComponent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthComponent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Status = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VerifiedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComponent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthComponent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthComponent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_cosmos_gogoproto_types.StdTimeUnmarshal(&m.VerifiedAt, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VerificationMethod", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComponent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthComponent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthComponent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VerificationMethod = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VerificationEvidence", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComponent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthComponent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthComponent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VerificationEvidence = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Notes", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComponent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthComponent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthComponent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Notes = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipComponent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthComponent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ComponentPairingRule) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowComponent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ComponentPairingRule: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ComponentPairingRule: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SourceTypeHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComponent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthComponent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthComponent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SourceTypeHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TargetTypeHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComponent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthComponent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthComponent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TargetTypeHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinQualityScore", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComponent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthComponent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthComponent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MinQualityScore = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequiredCapabilitiesHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComponent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthComponent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthComponent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RequiredCapabilitiesHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxRelationships", wireType)
			}
			m.MaxRelationships = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComponent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxRelationships |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BidirectionalRequired", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComponent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.BidirectionalRequired = bool(v != 0)
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValidationRulesHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComponent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthComponent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthComponent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ValidationRulesHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipComponent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthComponent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AnonymousPairingAuthorization) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowComponent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AnonymousPairingAuthorization: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AnonymousPairingAuthorization: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AuthId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComponent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthComponent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthComponent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AuthId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ComponentHashA", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComponent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthComponent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthComponent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ComponentHashA = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ComponentHashB", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComponent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthComponent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthComponent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ComponentHashB = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RuleHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComponent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthComponent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthComponent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RuleHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComponent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthComponent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthComponent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Status = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExpiresAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComponent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthComponent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthComponent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_cosmos_gogoproto_types.StdTimeUnmarshal(&m.ExpiresAt, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TrustScoreRequirement", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComponent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthComponent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthComponent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TrustScoreRequirement = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AuthorizationLevel", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComponent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthComponent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthComponent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AuthorizationLevel = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipComponent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthComponent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AnonymousRevocationEvent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowComponent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AnonymousRevocationEvent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AnonymousRevocationEvent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RevocationId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComponent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthComponent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthComponent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RevocationId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TargetHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComponent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthComponent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthComponent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TargetHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RevocationType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComponent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthComponent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthComponent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RevocationType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UrgencyLevel", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComponent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthComponent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthComponent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UrgencyLevel = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EffectiveAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComponent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthComponent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthComponent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_cosmos_gogoproto_types.StdTimeUnmarshal(&m.EffectiveAt, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReasonCategory", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComponent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthComponent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthComponent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ReasonCategory = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InitiatorHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComponent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthComponent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthComponent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InitiatorHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipComponent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthComponent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipComponent(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowComponent
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowComponent
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowComponent
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthComponent
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupComponent
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthComponent
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthComponent        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowComponent          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupComponent = fmt.Errorf("proto: unexpected end of group")
)
