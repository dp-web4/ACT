// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: racecarweb/componentregistry/v1/component_identity.proto

package types

import (
	fmt "fmt"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// ComponentIdentity defines the ComponentIdentity message.
type ComponentIdentity struct {
	ComponentId      string `protobuf:"bytes,1,opt,name=component_id,json=componentId,proto3" json:"component_id,omitempty"`
	ComponentType    string `protobuf:"bytes,2,opt,name=component_type,json=componentType,proto3" json:"component_type,omitempty"`
	ManufacturerData string `protobuf:"bytes,3,opt,name=manufacturer_data,json=manufacturerData,proto3" json:"manufacturer_data,omitempty"`
	Status           string `protobuf:"bytes,4,opt,name=status,proto3" json:"status,omitempty"`
	LastSeen         int64  `protobuf:"varint,5,opt,name=last_seen,json=lastSeen,proto3" json:"last_seen,omitempty"`
}

func (m *ComponentIdentity) Reset()         { *m = ComponentIdentity{} }
func (m *ComponentIdentity) String() string { return proto.CompactTextString(m) }
func (*ComponentIdentity) ProtoMessage()    {}
func (*ComponentIdentity) Descriptor() ([]byte, []int) {
	return fileDescriptor_556fa071767842ae, []int{0}
}
func (m *ComponentIdentity) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ComponentIdentity) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ComponentIdentity.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ComponentIdentity) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ComponentIdentity.Merge(m, src)
}
func (m *ComponentIdentity) XXX_Size() int {
	return m.Size()
}
func (m *ComponentIdentity) XXX_DiscardUnknown() {
	xxx_messageInfo_ComponentIdentity.DiscardUnknown(m)
}

var xxx_messageInfo_ComponentIdentity proto.InternalMessageInfo

func (m *ComponentIdentity) GetComponentId() string {
	if m != nil {
		return m.ComponentId
	}
	return ""
}

func (m *ComponentIdentity) GetComponentType() string {
	if m != nil {
		return m.ComponentType
	}
	return ""
}

func (m *ComponentIdentity) GetManufacturerData() string {
	if m != nil {
		return m.ManufacturerData
	}
	return ""
}

func (m *ComponentIdentity) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

func (m *ComponentIdentity) GetLastSeen() int64 {
	if m != nil {
		return m.LastSeen
	}
	return 0
}

func init() {
	proto.RegisterType((*ComponentIdentity)(nil), "racecarweb.componentregistry.v1.ComponentIdentity")
}

func init() {
	proto.RegisterFile("racecarweb/componentregistry/v1/component_identity.proto", fileDescriptor_556fa071767842ae)
}

var fileDescriptor_556fa071767842ae = []byte{
	// 255 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xb2, 0x28, 0x4a, 0x4c, 0x4e,
	0x4d, 0x4e, 0x2c, 0x2a, 0x4f, 0x4d, 0xd2, 0x4f, 0xce, 0xcf, 0x2d, 0xc8, 0xcf, 0x4b, 0xcd, 0x2b,
	0x29, 0x4a, 0x4d, 0xcf, 0x2c, 0x2e, 0x29, 0xaa, 0xd4, 0x2f, 0x33, 0x44, 0x08, 0xc6, 0x67, 0xa6,
	0xa4, 0xe6, 0x95, 0x64, 0x96, 0x54, 0xea, 0x15, 0x14, 0xe5, 0x97, 0xe4, 0x0b, 0xc9, 0x23, 0x74,
	0xea, 0x61, 0xe8, 0xd4, 0x2b, 0x33, 0x54, 0xda, 0xcf, 0xc8, 0x25, 0xe8, 0x0c, 0x93, 0xf0, 0x84,
	0x6a, 0x16, 0x52, 0xe4, 0xe2, 0x41, 0x36, 0x52, 0x82, 0x51, 0x81, 0x51, 0x83, 0x33, 0x88, 0x3b,
	0x19, 0xa1, 0x50, 0x48, 0x95, 0x8b, 0x0f, 0xa1, 0xa4, 0xa4, 0xb2, 0x20, 0x55, 0x82, 0x09, 0xac,
	0x88, 0x17, 0x2e, 0x1a, 0x52, 0x59, 0x90, 0x2a, 0xa4, 0xcd, 0x25, 0x98, 0x9b, 0x98, 0x57, 0x9a,
	0x96, 0x98, 0x5c, 0x52, 0x5a, 0x94, 0x5a, 0x14, 0x9f, 0x92, 0x58, 0x92, 0x28, 0xc1, 0x0c, 0x56,
	0x29, 0x80, 0x2c, 0xe1, 0x92, 0x58, 0x92, 0x28, 0x24, 0xc6, 0xc5, 0x56, 0x5c, 0x92, 0x58, 0x52,
	0x5a, 0x2c, 0xc1, 0x02, 0x56, 0x01, 0xe5, 0x09, 0x49, 0x73, 0x71, 0xe6, 0x24, 0x16, 0x97, 0xc4,
	0x17, 0xa7, 0xa6, 0xe6, 0x49, 0xb0, 0x2a, 0x30, 0x6a, 0x30, 0x07, 0x71, 0x80, 0x04, 0x82, 0x53,
	0x53, 0xf3, 0x9c, 0xec, 0x4f, 0x3c, 0x92, 0x63, 0xbc, 0xf0, 0x48, 0x8e, 0xf1, 0xc1, 0x23, 0x39,
	0xc6, 0x09, 0x8f, 0xe5, 0x18, 0x2e, 0x3c, 0x96, 0x63, 0xb8, 0xf1, 0x58, 0x8e, 0x21, 0x4a, 0x15,
	0xea, 0x79, 0x5d, 0x50, 0xb8, 0x55, 0x60, 0x09, 0x39, 0x90, 0xb3, 0x8b, 0x93, 0xd8, 0xc0, 0x41,
	0x65, 0x0c, 0x08, 0x00, 0x00, 0xff, 0xff, 0x4a, 0x8d, 0x4d, 0x1c, 0x66, 0x01, 0x00, 0x00,
}

func (m *ComponentIdentity) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ComponentIdentity) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ComponentIdentity) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.LastSeen != 0 {
		i = encodeVarintComponentIdentity(dAtA, i, uint64(m.LastSeen))
		i--
		dAtA[i] = 0x28
	}
	if len(m.Status) > 0 {
		i -= len(m.Status)
		copy(dAtA[i:], m.Status)
		i = encodeVarintComponentIdentity(dAtA, i, uint64(len(m.Status)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.ManufacturerData) > 0 {
		i -= len(m.ManufacturerData)
		copy(dAtA[i:], m.ManufacturerData)
		i = encodeVarintComponentIdentity(dAtA, i, uint64(len(m.ManufacturerData)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ComponentType) > 0 {
		i -= len(m.ComponentType)
		copy(dAtA[i:], m.ComponentType)
		i = encodeVarintComponentIdentity(dAtA, i, uint64(len(m.ComponentType)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ComponentId) > 0 {
		i -= len(m.ComponentId)
		copy(dAtA[i:], m.ComponentId)
		i = encodeVarintComponentIdentity(dAtA, i, uint64(len(m.ComponentId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintComponentIdentity(dAtA []byte, offset int, v uint64) int {
	offset -= sovComponentIdentity(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *ComponentIdentity) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ComponentId)
	if l > 0 {
		n += 1 + l + sovComponentIdentity(uint64(l))
	}
	l = len(m.ComponentType)
	if l > 0 {
		n += 1 + l + sovComponentIdentity(uint64(l))
	}
	l = len(m.ManufacturerData)
	if l > 0 {
		n += 1 + l + sovComponentIdentity(uint64(l))
	}
	l = len(m.Status)
	if l > 0 {
		n += 1 + l + sovComponentIdentity(uint64(l))
	}
	if m.LastSeen != 0 {
		n += 1 + sovComponentIdentity(uint64(m.LastSeen))
	}
	return n
}

func sovComponentIdentity(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozComponentIdentity(x uint64) (n int) {
	return sovComponentIdentity(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ComponentIdentity) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowComponentIdentity
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ComponentIdentity: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ComponentIdentity: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ComponentId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComponentIdentity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthComponentIdentity
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthComponentIdentity
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ComponentId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ComponentType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComponentIdentity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthComponentIdentity
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthComponentIdentity
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ComponentType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ManufacturerData", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComponentIdentity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthComponentIdentity
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthComponentIdentity
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ManufacturerData = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComponentIdentity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthComponentIdentity
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthComponentIdentity
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Status = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastSeen", wireType)
			}
			m.LastSeen = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComponentIdentity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LastSeen |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipComponentIdentity(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthComponentIdentity
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipComponentIdentity(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowComponentIdentity
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowComponentIdentity
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowComponentIdentity
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthComponentIdentity
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupComponentIdentity
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthComponentIdentity
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthComponentIdentity        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowComponentIdentity          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupComponentIdentity = fmt.Errorf("proto: unexpected end of group")
)
