// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: racecarweb/energycycle/v1/relationship_adp_token.proto

package types

import (
	fmt "fmt"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// RelationshipAdpToken defines the RelationshipAdpToken message.
type RelationshipAdpToken struct {
	TokenId          string `protobuf:"bytes,1,opt,name=token_id,json=tokenId,proto3" json:"token_id,omitempty"`
	OriginalAtpId    string `protobuf:"bytes,2,opt,name=original_atp_id,json=originalAtpId,proto3" json:"original_atp_id,omitempty"`
	LctId            string `protobuf:"bytes,3,opt,name=lct_id,json=lctId,proto3" json:"lct_id,omitempty"`
	DischargedAt     int64  `protobuf:"varint,4,opt,name=discharged_at,json=dischargedAt,proto3" json:"discharged_at,omitempty"`
	ValueScore       string `protobuf:"bytes,5,opt,name=value_score,json=valueScore,proto3" json:"value_score,omitempty"`
	ConfirmationData string `protobuf:"bytes,6,opt,name=confirmation_data,json=confirmationData,proto3" json:"confirmation_data,omitempty"`
	EnergyEfficiency string `protobuf:"bytes,7,opt,name=energy_efficiency,json=energyEfficiency,proto3" json:"energy_efficiency,omitempty"`
	TrustValidation  string `protobuf:"bytes,8,opt,name=trust_validation,json=trustValidation,proto3" json:"trust_validation,omitempty"`
	ValidationBlock  int64  `protobuf:"varint,9,opt,name=validation_block,json=validationBlock,proto3" json:"validation_block,omitempty"`
	OperationContext string `protobuf:"bytes,10,opt,name=operation_context,json=operationContext,proto3" json:"operation_context,omitempty"`
	Version          int64  `protobuf:"varint,11,opt,name=version,proto3" json:"version,omitempty"`
}

func (m *RelationshipAdpToken) Reset()         { *m = RelationshipAdpToken{} }
func (m *RelationshipAdpToken) String() string { return proto.CompactTextString(m) }
func (*RelationshipAdpToken) ProtoMessage()    {}
func (*RelationshipAdpToken) Descriptor() ([]byte, []int) {
	return fileDescriptor_7d86293c115d37c4, []int{0}
}
func (m *RelationshipAdpToken) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RelationshipAdpToken) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RelationshipAdpToken.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RelationshipAdpToken) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RelationshipAdpToken.Merge(m, src)
}
func (m *RelationshipAdpToken) XXX_Size() int {
	return m.Size()
}
func (m *RelationshipAdpToken) XXX_DiscardUnknown() {
	xxx_messageInfo_RelationshipAdpToken.DiscardUnknown(m)
}

var xxx_messageInfo_RelationshipAdpToken proto.InternalMessageInfo

func (m *RelationshipAdpToken) GetTokenId() string {
	if m != nil {
		return m.TokenId
	}
	return ""
}

func (m *RelationshipAdpToken) GetOriginalAtpId() string {
	if m != nil {
		return m.OriginalAtpId
	}
	return ""
}

func (m *RelationshipAdpToken) GetLctId() string {
	if m != nil {
		return m.LctId
	}
	return ""
}

func (m *RelationshipAdpToken) GetDischargedAt() int64 {
	if m != nil {
		return m.DischargedAt
	}
	return 0
}

func (m *RelationshipAdpToken) GetValueScore() string {
	if m != nil {
		return m.ValueScore
	}
	return ""
}

func (m *RelationshipAdpToken) GetConfirmationData() string {
	if m != nil {
		return m.ConfirmationData
	}
	return ""
}

func (m *RelationshipAdpToken) GetEnergyEfficiency() string {
	if m != nil {
		return m.EnergyEfficiency
	}
	return ""
}

func (m *RelationshipAdpToken) GetTrustValidation() string {
	if m != nil {
		return m.TrustValidation
	}
	return ""
}

func (m *RelationshipAdpToken) GetValidationBlock() int64 {
	if m != nil {
		return m.ValidationBlock
	}
	return 0
}

func (m *RelationshipAdpToken) GetOperationContext() string {
	if m != nil {
		return m.OperationContext
	}
	return ""
}

func (m *RelationshipAdpToken) GetVersion() int64 {
	if m != nil {
		return m.Version
	}
	return 0
}

func init() {
	proto.RegisterType((*RelationshipAdpToken)(nil), "racecarweb.energycycle.v1.RelationshipAdpToken")
}

func init() {
	proto.RegisterFile("racecarweb/energycycle/v1/relationship_adp_token.proto", fileDescriptor_7d86293c115d37c4)
}

var fileDescriptor_7d86293c115d37c4 = []byte{
	// 388 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x54, 0x92, 0x41, 0xaf, 0x12, 0x31,
	0x10, 0xc7, 0x59, 0xf1, 0xc1, 0x7b, 0x7d, 0xbe, 0xf0, 0x6c, 0x34, 0x29, 0x97, 0x85, 0x68, 0x62,
	0x30, 0x46, 0x08, 0x31, 0x31, 0xf1, 0x08, 0xea, 0x81, 0x2b, 0x1a, 0x0f, 0x5e, 0x9a, 0xd2, 0x0e,
	0xd0, 0x50, 0xb7, 0x4d, 0x77, 0x58, 0xd9, 0x6f, 0xe1, 0x17, 0xf1, 0x7b, 0x78, 0xe4, 0xe8, 0xd1,
	0xc0, 0x17, 0x31, 0xed, 0x0a, 0x8b, 0xc7, 0xfe, 0xfe, 0xbf, 0x99, 0x9d, 0xc9, 0x0e, 0x79, 0xeb,
	0x85, 0x04, 0x29, 0xfc, 0x77, 0x58, 0x8c, 0x20, 0x03, 0xbf, 0x2a, 0x65, 0x29, 0x0d, 0x8c, 0x8a,
	0xf1, 0xc8, 0x83, 0x11, 0xa8, 0x6d, 0x96, 0xaf, 0xb5, 0xe3, 0x42, 0x39, 0x8e, 0x76, 0x03, 0xd9,
	0xd0, 0x79, 0x8b, 0x96, 0x76, 0xeb, 0xba, 0xe1, 0x45, 0xdd, 0xb0, 0x18, 0x3f, 0xfb, 0xd9, 0x24,
	0x4f, 0xe6, 0x17, 0xb5, 0x13, 0xe5, 0x3e, 0x87, 0x4a, 0xda, 0x25, 0xd7, 0xb1, 0x05, 0xd7, 0x8a,
	0x25, 0xfd, 0x64, 0x70, 0x33, 0x6f, 0xc7, 0xf7, 0x4c, 0xd1, 0x17, 0xa4, 0x63, 0xbd, 0x5e, 0xe9,
	0x4c, 0x18, 0x2e, 0xd0, 0x05, 0xe3, 0x41, 0x34, 0xee, 0x4e, 0x78, 0x82, 0x6e, 0xa6, 0xe8, 0x53,
	0xd2, 0x32, 0x12, 0x43, 0xdc, 0x8c, 0xf1, 0x95, 0x91, 0x38, 0x53, 0xf4, 0x39, 0xb9, 0x53, 0x3a,
	0x97, 0x6b, 0xe1, 0x57, 0xa0, 0xb8, 0x40, 0xf6, 0xb0, 0x9f, 0x0c, 0x9a, 0xf3, 0x47, 0x35, 0x9c,
	0x20, 0xed, 0x91, 0xdb, 0x42, 0x98, 0x2d, 0xf0, 0x5c, 0x5a, 0x0f, 0xec, 0x2a, 0x36, 0x20, 0x11,
	0x7d, 0x0a, 0x84, 0xbe, 0x22, 0x8f, 0xa5, 0xcd, 0x96, 0xda, 0x7f, 0x8b, 0xb3, 0x73, 0x25, 0x50,
	0xb0, 0x56, 0xd4, 0xee, 0x2f, 0x83, 0x0f, 0x02, 0x45, 0x90, 0xab, 0xbd, 0x39, 0x2c, 0x97, 0x5a,
	0x6a, 0xc8, 0x64, 0xc9, 0xda, 0x95, 0x5c, 0x05, 0x1f, 0xcf, 0x9c, 0xbe, 0x24, 0xf7, 0xe8, 0xb7,
	0x39, 0xf2, 0x42, 0x18, 0xad, 0x62, 0x13, 0x76, 0x1d, 0xdd, 0x4e, 0xe4, 0x5f, 0xce, 0x38, 0xa8,
	0xb5, 0xc4, 0x17, 0xc6, 0xca, 0x0d, 0xbb, 0x89, 0xdb, 0x74, 0x6a, 0x3e, 0x0d, 0x38, 0x8c, 0x60,
	0x1d, 0xf8, 0xca, 0x94, 0x36, 0x43, 0xd8, 0x21, 0x23, 0xd5, 0x08, 0xe7, 0xe0, 0x7d, 0xc5, 0x29,
	0x23, 0xed, 0x02, 0x7c, 0x1e, 0xbe, 0x7c, 0x1b, 0xdb, 0x9d, 0x9e, 0xd3, 0x77, 0xbf, 0x0e, 0x69,
	0xb2, 0x3f, 0xa4, 0xc9, 0x9f, 0x43, 0x9a, 0xfc, 0x38, 0xa6, 0x8d, 0xfd, 0x31, 0x6d, 0xfc, 0x3e,
	0xa6, 0x8d, 0xaf, 0xbd, 0x7f, 0x3f, 0xf9, 0x75, 0xb8, 0x8e, 0xdd, 0x7f, 0xf7, 0x81, 0xa5, 0x83,
	0x7c, 0xd1, 0x8a, 0xc7, 0xf0, 0xe6, 0x6f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x3a, 0xff, 0xa2, 0x58,
	0x46, 0x02, 0x00, 0x00,
}

func (m *RelationshipAdpToken) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RelationshipAdpToken) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RelationshipAdpToken) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Version != 0 {
		i = encodeVarintRelationshipAdpToken(dAtA, i, uint64(m.Version))
		i--
		dAtA[i] = 0x58
	}
	if len(m.OperationContext) > 0 {
		i -= len(m.OperationContext)
		copy(dAtA[i:], m.OperationContext)
		i = encodeVarintRelationshipAdpToken(dAtA, i, uint64(len(m.OperationContext)))
		i--
		dAtA[i] = 0x52
	}
	if m.ValidationBlock != 0 {
		i = encodeVarintRelationshipAdpToken(dAtA, i, uint64(m.ValidationBlock))
		i--
		dAtA[i] = 0x48
	}
	if len(m.TrustValidation) > 0 {
		i -= len(m.TrustValidation)
		copy(dAtA[i:], m.TrustValidation)
		i = encodeVarintRelationshipAdpToken(dAtA, i, uint64(len(m.TrustValidation)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.EnergyEfficiency) > 0 {
		i -= len(m.EnergyEfficiency)
		copy(dAtA[i:], m.EnergyEfficiency)
		i = encodeVarintRelationshipAdpToken(dAtA, i, uint64(len(m.EnergyEfficiency)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.ConfirmationData) > 0 {
		i -= len(m.ConfirmationData)
		copy(dAtA[i:], m.ConfirmationData)
		i = encodeVarintRelationshipAdpToken(dAtA, i, uint64(len(m.ConfirmationData)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.ValueScore) > 0 {
		i -= len(m.ValueScore)
		copy(dAtA[i:], m.ValueScore)
		i = encodeVarintRelationshipAdpToken(dAtA, i, uint64(len(m.ValueScore)))
		i--
		dAtA[i] = 0x2a
	}
	if m.DischargedAt != 0 {
		i = encodeVarintRelationshipAdpToken(dAtA, i, uint64(m.DischargedAt))
		i--
		dAtA[i] = 0x20
	}
	if len(m.LctId) > 0 {
		i -= len(m.LctId)
		copy(dAtA[i:], m.LctId)
		i = encodeVarintRelationshipAdpToken(dAtA, i, uint64(len(m.LctId)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.OriginalAtpId) > 0 {
		i -= len(m.OriginalAtpId)
		copy(dAtA[i:], m.OriginalAtpId)
		i = encodeVarintRelationshipAdpToken(dAtA, i, uint64(len(m.OriginalAtpId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.TokenId) > 0 {
		i -= len(m.TokenId)
		copy(dAtA[i:], m.TokenId)
		i = encodeVarintRelationshipAdpToken(dAtA, i, uint64(len(m.TokenId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintRelationshipAdpToken(dAtA []byte, offset int, v uint64) int {
	offset -= sovRelationshipAdpToken(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *RelationshipAdpToken) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.TokenId)
	if l > 0 {
		n += 1 + l + sovRelationshipAdpToken(uint64(l))
	}
	l = len(m.OriginalAtpId)
	if l > 0 {
		n += 1 + l + sovRelationshipAdpToken(uint64(l))
	}
	l = len(m.LctId)
	if l > 0 {
		n += 1 + l + sovRelationshipAdpToken(uint64(l))
	}
	if m.DischargedAt != 0 {
		n += 1 + sovRelationshipAdpToken(uint64(m.DischargedAt))
	}
	l = len(m.ValueScore)
	if l > 0 {
		n += 1 + l + sovRelationshipAdpToken(uint64(l))
	}
	l = len(m.ConfirmationData)
	if l > 0 {
		n += 1 + l + sovRelationshipAdpToken(uint64(l))
	}
	l = len(m.EnergyEfficiency)
	if l > 0 {
		n += 1 + l + sovRelationshipAdpToken(uint64(l))
	}
	l = len(m.TrustValidation)
	if l > 0 {
		n += 1 + l + sovRelationshipAdpToken(uint64(l))
	}
	if m.ValidationBlock != 0 {
		n += 1 + sovRelationshipAdpToken(uint64(m.ValidationBlock))
	}
	l = len(m.OperationContext)
	if l > 0 {
		n += 1 + l + sovRelationshipAdpToken(uint64(l))
	}
	if m.Version != 0 {
		n += 1 + sovRelationshipAdpToken(uint64(m.Version))
	}
	return n
}

func sovRelationshipAdpToken(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozRelationshipAdpToken(x uint64) (n int) {
	return sovRelationshipAdpToken(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *RelationshipAdpToken) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRelationshipAdpToken
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RelationshipAdpToken: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RelationshipAdpToken: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TokenId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRelationshipAdpToken
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRelationshipAdpToken
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRelationshipAdpToken
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TokenId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OriginalAtpId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRelationshipAdpToken
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRelationshipAdpToken
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRelationshipAdpToken
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OriginalAtpId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LctId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRelationshipAdpToken
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRelationshipAdpToken
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRelationshipAdpToken
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LctId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DischargedAt", wireType)
			}
			m.DischargedAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRelationshipAdpToken
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DischargedAt |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValueScore", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRelationshipAdpToken
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRelationshipAdpToken
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRelationshipAdpToken
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ValueScore = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConfirmationData", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRelationshipAdpToken
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRelationshipAdpToken
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRelationshipAdpToken
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ConfirmationData = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EnergyEfficiency", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRelationshipAdpToken
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRelationshipAdpToken
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRelationshipAdpToken
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EnergyEfficiency = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TrustValidation", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRelationshipAdpToken
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRelationshipAdpToken
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRelationshipAdpToken
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TrustValidation = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValidationBlock", wireType)
			}
			m.ValidationBlock = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRelationshipAdpToken
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ValidationBlock |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OperationContext", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRelationshipAdpToken
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRelationshipAdpToken
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRelationshipAdpToken
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OperationContext = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			m.Version = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRelationshipAdpToken
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Version |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRelationshipAdpToken(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRelationshipAdpToken
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipRelationshipAdpToken(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowRelationshipAdpToken
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRelationshipAdpToken
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRelationshipAdpToken
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthRelationshipAdpToken
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupRelationshipAdpToken
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthRelationshipAdpToken
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthRelationshipAdpToken        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowRelationshipAdpToken          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupRelationshipAdpToken = fmt.Errorf("proto: unexpected end of group")
)
