// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: racecarweb/energycycle/v1/query.proto

package types

import (
	context "context"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-sdk/types/query"
	_ "github.com/cosmos/cosmos-sdk/types/tx/amino"
	_ "github.com/cosmos/gogoproto/gogoproto"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// QueryParamsRequest is request type for the Query/Params RPC method.
type QueryParamsRequest struct {
}

func (m *QueryParamsRequest) Reset()         { *m = QueryParamsRequest{} }
func (m *QueryParamsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryParamsRequest) ProtoMessage()    {}
func (*QueryParamsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_4315675bdd99eddb, []int{0}
}
func (m *QueryParamsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsRequest.Merge(m, src)
}
func (m *QueryParamsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsRequest proto.InternalMessageInfo

// QueryParamsResponse is response type for the Query/Params RPC method.
type QueryParamsResponse struct {
	// params holds all the parameters of this module.
	Params Params `protobuf:"bytes,1,opt,name=params,proto3" json:"params"`
}

func (m *QueryParamsResponse) Reset()         { *m = QueryParamsResponse{} }
func (m *QueryParamsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryParamsResponse) ProtoMessage()    {}
func (*QueryParamsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_4315675bdd99eddb, []int{1}
}
func (m *QueryParamsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsResponse.Merge(m, src)
}
func (m *QueryParamsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsResponse proto.InternalMessageInfo

func (m *QueryParamsResponse) GetParams() Params {
	if m != nil {
		return m.Params
	}
	return Params{}
}

// QueryGetRelationshipEnergyBalanceRequest defines the QueryGetRelationshipEnergyBalanceRequest message.
type QueryGetRelationshipEnergyBalanceRequest struct {
	LctId string `protobuf:"bytes,1,opt,name=lct_id,json=lctId,proto3" json:"lct_id,omitempty"`
}

func (m *QueryGetRelationshipEnergyBalanceRequest) Reset() {
	*m = QueryGetRelationshipEnergyBalanceRequest{}
}
func (m *QueryGetRelationshipEnergyBalanceRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetRelationshipEnergyBalanceRequest) ProtoMessage()    {}
func (*QueryGetRelationshipEnergyBalanceRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_4315675bdd99eddb, []int{2}
}
func (m *QueryGetRelationshipEnergyBalanceRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetRelationshipEnergyBalanceRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetRelationshipEnergyBalanceRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetRelationshipEnergyBalanceRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetRelationshipEnergyBalanceRequest.Merge(m, src)
}
func (m *QueryGetRelationshipEnergyBalanceRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetRelationshipEnergyBalanceRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetRelationshipEnergyBalanceRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetRelationshipEnergyBalanceRequest proto.InternalMessageInfo

func (m *QueryGetRelationshipEnergyBalanceRequest) GetLctId() string {
	if m != nil {
		return m.LctId
	}
	return ""
}

// QueryGetRelationshipEnergyBalanceResponse defines the QueryGetRelationshipEnergyBalanceResponse message.
type QueryGetRelationshipEnergyBalanceResponse struct {
	AtpBalance           string `protobuf:"bytes,1,opt,name=atp_balance,json=atpBalance,proto3" json:"atp_balance,omitempty"`
	AdpBalance           string `protobuf:"bytes,2,opt,name=adp_balance,json=adpBalance,proto3" json:"adp_balance,omitempty"`
	TotalEnergy          string `protobuf:"bytes,3,opt,name=total_energy,json=totalEnergy,proto3" json:"total_energy,omitempty"`
	TrustWeightedBalance string `protobuf:"bytes,4,opt,name=trust_weighted_balance,json=trustWeightedBalance,proto3" json:"trust_weighted_balance,omitempty"`
}

func (m *QueryGetRelationshipEnergyBalanceResponse) Reset() {
	*m = QueryGetRelationshipEnergyBalanceResponse{}
}
func (m *QueryGetRelationshipEnergyBalanceResponse) String() string {
	return proto.CompactTextString(m)
}
func (*QueryGetRelationshipEnergyBalanceResponse) ProtoMessage() {}
func (*QueryGetRelationshipEnergyBalanceResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_4315675bdd99eddb, []int{3}
}
func (m *QueryGetRelationshipEnergyBalanceResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetRelationshipEnergyBalanceResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetRelationshipEnergyBalanceResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetRelationshipEnergyBalanceResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetRelationshipEnergyBalanceResponse.Merge(m, src)
}
func (m *QueryGetRelationshipEnergyBalanceResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetRelationshipEnergyBalanceResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetRelationshipEnergyBalanceResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetRelationshipEnergyBalanceResponse proto.InternalMessageInfo

func (m *QueryGetRelationshipEnergyBalanceResponse) GetAtpBalance() string {
	if m != nil {
		return m.AtpBalance
	}
	return ""
}

func (m *QueryGetRelationshipEnergyBalanceResponse) GetAdpBalance() string {
	if m != nil {
		return m.AdpBalance
	}
	return ""
}

func (m *QueryGetRelationshipEnergyBalanceResponse) GetTotalEnergy() string {
	if m != nil {
		return m.TotalEnergy
	}
	return ""
}

func (m *QueryGetRelationshipEnergyBalanceResponse) GetTrustWeightedBalance() string {
	if m != nil {
		return m.TrustWeightedBalance
	}
	return ""
}

// QueryCalculateRelationshipV3Request defines the QueryCalculateRelationshipV3Request message.
type QueryCalculateRelationshipV3Request struct {
	OperationId string `protobuf:"bytes,1,opt,name=operation_id,json=operationId,proto3" json:"operation_id,omitempty"`
}

func (m *QueryCalculateRelationshipV3Request) Reset()         { *m = QueryCalculateRelationshipV3Request{} }
func (m *QueryCalculateRelationshipV3Request) String() string { return proto.CompactTextString(m) }
func (*QueryCalculateRelationshipV3Request) ProtoMessage()    {}
func (*QueryCalculateRelationshipV3Request) Descriptor() ([]byte, []int) {
	return fileDescriptor_4315675bdd99eddb, []int{4}
}
func (m *QueryCalculateRelationshipV3Request) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryCalculateRelationshipV3Request) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryCalculateRelationshipV3Request.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryCalculateRelationshipV3Request) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryCalculateRelationshipV3Request.Merge(m, src)
}
func (m *QueryCalculateRelationshipV3Request) XXX_Size() int {
	return m.Size()
}
func (m *QueryCalculateRelationshipV3Request) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryCalculateRelationshipV3Request.DiscardUnknown(m)
}

var xxx_messageInfo_QueryCalculateRelationshipV3Request proto.InternalMessageInfo

func (m *QueryCalculateRelationshipV3Request) GetOperationId() string {
	if m != nil {
		return m.OperationId
	}
	return ""
}

// QueryCalculateRelationshipV3Response defines the QueryCalculateRelationshipV3Response message.
type QueryCalculateRelationshipV3Response struct {
	V_3Tensor string `protobuf:"bytes,1,opt,name=v_3_tensor,json=v3Tensor,proto3" json:"v_3_tensor,omitempty"`
}

func (m *QueryCalculateRelationshipV3Response) Reset()         { *m = QueryCalculateRelationshipV3Response{} }
func (m *QueryCalculateRelationshipV3Response) String() string { return proto.CompactTextString(m) }
func (*QueryCalculateRelationshipV3Response) ProtoMessage()    {}
func (*QueryCalculateRelationshipV3Response) Descriptor() ([]byte, []int) {
	return fileDescriptor_4315675bdd99eddb, []int{5}
}
func (m *QueryCalculateRelationshipV3Response) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryCalculateRelationshipV3Response) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryCalculateRelationshipV3Response.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryCalculateRelationshipV3Response) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryCalculateRelationshipV3Response.Merge(m, src)
}
func (m *QueryCalculateRelationshipV3Response) XXX_Size() int {
	return m.Size()
}
func (m *QueryCalculateRelationshipV3Response) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryCalculateRelationshipV3Response.DiscardUnknown(m)
}

var xxx_messageInfo_QueryCalculateRelationshipV3Response proto.InternalMessageInfo

func (m *QueryCalculateRelationshipV3Response) GetV_3Tensor() string {
	if m != nil {
		return m.V_3Tensor
	}
	return ""
}

// QueryGetEnergyFlowHistoryRequest defines the QueryGetEnergyFlowHistoryRequest message.
type QueryGetEnergyFlowHistoryRequest struct {
	LctId string `protobuf:"bytes,1,opt,name=lct_id,json=lctId,proto3" json:"lct_id,omitempty"`
}

func (m *QueryGetEnergyFlowHistoryRequest) Reset()         { *m = QueryGetEnergyFlowHistoryRequest{} }
func (m *QueryGetEnergyFlowHistoryRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetEnergyFlowHistoryRequest) ProtoMessage()    {}
func (*QueryGetEnergyFlowHistoryRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_4315675bdd99eddb, []int{6}
}
func (m *QueryGetEnergyFlowHistoryRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetEnergyFlowHistoryRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetEnergyFlowHistoryRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetEnergyFlowHistoryRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetEnergyFlowHistoryRequest.Merge(m, src)
}
func (m *QueryGetEnergyFlowHistoryRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetEnergyFlowHistoryRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetEnergyFlowHistoryRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetEnergyFlowHistoryRequest proto.InternalMessageInfo

func (m *QueryGetEnergyFlowHistoryRequest) GetLctId() string {
	if m != nil {
		return m.LctId
	}
	return ""
}

// QueryGetEnergyFlowHistoryResponse defines the QueryGetEnergyFlowHistoryResponse message.
type QueryGetEnergyFlowHistoryResponse struct {
	EnergyOperations string `protobuf:"bytes,1,opt,name=energy_operations,json=energyOperations,proto3" json:"energy_operations,omitempty"`
}

func (m *QueryGetEnergyFlowHistoryResponse) Reset()         { *m = QueryGetEnergyFlowHistoryResponse{} }
func (m *QueryGetEnergyFlowHistoryResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetEnergyFlowHistoryResponse) ProtoMessage()    {}
func (*QueryGetEnergyFlowHistoryResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_4315675bdd99eddb, []int{7}
}
func (m *QueryGetEnergyFlowHistoryResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetEnergyFlowHistoryResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetEnergyFlowHistoryResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetEnergyFlowHistoryResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetEnergyFlowHistoryResponse.Merge(m, src)
}
func (m *QueryGetEnergyFlowHistoryResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetEnergyFlowHistoryResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetEnergyFlowHistoryResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetEnergyFlowHistoryResponse proto.InternalMessageInfo

func (m *QueryGetEnergyFlowHistoryResponse) GetEnergyOperations() string {
	if m != nil {
		return m.EnergyOperations
	}
	return ""
}

func init() {
	proto.RegisterType((*QueryParamsRequest)(nil), "racecarweb.energycycle.v1.QueryParamsRequest")
	proto.RegisterType((*QueryParamsResponse)(nil), "racecarweb.energycycle.v1.QueryParamsResponse")
	proto.RegisterType((*QueryGetRelationshipEnergyBalanceRequest)(nil), "racecarweb.energycycle.v1.QueryGetRelationshipEnergyBalanceRequest")
	proto.RegisterType((*QueryGetRelationshipEnergyBalanceResponse)(nil), "racecarweb.energycycle.v1.QueryGetRelationshipEnergyBalanceResponse")
	proto.RegisterType((*QueryCalculateRelationshipV3Request)(nil), "racecarweb.energycycle.v1.QueryCalculateRelationshipV3Request")
	proto.RegisterType((*QueryCalculateRelationshipV3Response)(nil), "racecarweb.energycycle.v1.QueryCalculateRelationshipV3Response")
	proto.RegisterType((*QueryGetEnergyFlowHistoryRequest)(nil), "racecarweb.energycycle.v1.QueryGetEnergyFlowHistoryRequest")
	proto.RegisterType((*QueryGetEnergyFlowHistoryResponse)(nil), "racecarweb.energycycle.v1.QueryGetEnergyFlowHistoryResponse")
}

func init() {
	proto.RegisterFile("racecarweb/energycycle/v1/query.proto", fileDescriptor_4315675bdd99eddb)
}

var fileDescriptor_4315675bdd99eddb = []byte{
	// 678 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x55, 0x4f, 0x4f, 0x13, 0x41,
	0x14, 0xef, 0xa2, 0x34, 0xf2, 0xca, 0x41, 0xc6, 0xaa, 0xd8, 0x90, 0x42, 0x57, 0x34, 0x88, 0xa1,
	0x93, 0x52, 0x2f, 0x44, 0x82, 0x11, 0xca, 0xbf, 0x44, 0x23, 0x36, 0x46, 0x13, 0x3d, 0x6c, 0xa6,
	0xdb, 0x71, 0xd9, 0x64, 0xd9, 0x59, 0x76, 0xa6, 0x5b, 0x1b, 0xc2, 0xc5, 0x4f, 0x60, 0xc2, 0x97,
	0xf0, 0xe8, 0xa7, 0x30, 0x1c, 0x49, 0x3c, 0xe8, 0x45, 0x63, 0xc0, 0xc4, 0xf8, 0x09, 0xbc, 0x1a,
	0x66, 0xa6, 0x4b, 0x1b, 0xed, 0xb6, 0xc1, 0x0b, 0x59, 0xde, 0xfb, 0xbd, 0xdf, 0x7b, 0xbf, 0xf7,
	0x7e, 0x93, 0xc2, 0xad, 0x90, 0xd8, 0xd4, 0x26, 0x61, 0x93, 0xd6, 0x30, 0xf5, 0x69, 0xe8, 0xb4,
	0xec, 0x96, 0xed, 0x51, 0x1c, 0x95, 0xf0, 0x6e, 0x83, 0x86, 0xad, 0x62, 0x10, 0x32, 0xc1, 0xd0,
	0x8d, 0x33, 0x58, 0xb1, 0x03, 0x56, 0x8c, 0x4a, 0xb9, 0x31, 0xb2, 0xe3, 0xfa, 0x0c, 0xcb, 0xbf,
	0x0a, 0x9d, 0x9b, 0xb5, 0x19, 0xdf, 0x61, 0x1c, 0xd7, 0x08, 0xa7, 0x8a, 0x06, 0x47, 0xa5, 0x1a,
	0x15, 0xa4, 0x84, 0x03, 0xe2, 0xb8, 0x3e, 0x11, 0x2e, 0xf3, 0x35, 0x36, 0xeb, 0x30, 0x87, 0xc9,
	0x4f, 0x7c, 0xfa, 0xa5, 0xa3, 0x13, 0x0e, 0x63, 0x8e, 0x47, 0x31, 0x09, 0x5c, 0x4c, 0x7c, 0x9f,
	0x09, 0x59, 0xc2, 0x75, 0xf6, 0x76, 0xef, 0xa1, 0x03, 0x12, 0x92, 0x1d, 0x8d, 0x33, 0xb3, 0x80,
	0x9e, 0x9e, 0x76, 0xdf, 0x92, 0xc1, 0x2a, 0xdd, 0x6d, 0x50, 0x2e, 0xcc, 0x57, 0x70, 0xa5, 0x2b,
	0xca, 0x03, 0xe6, 0x73, 0x8a, 0x2a, 0x90, 0x56, 0xc5, 0xe3, 0xc6, 0x94, 0x31, 0x93, 0x99, 0x2f,
	0x14, 0x7b, 0x6a, 0x2e, 0xaa, 0xd2, 0xe5, 0x91, 0xc3, 0x6f, 0x93, 0xa9, 0xf7, 0x3f, 0x3f, 0xcc,
	0x1a, 0x55, 0x5d, 0x6b, 0x3e, 0x84, 0x19, 0x49, 0xbe, 0x4e, 0x45, 0x95, 0x7a, 0x6a, 0xea, 0x6d,
	0x37, 0x58, 0x95, 0xf5, 0xcb, 0xc4, 0x23, 0xbe, 0x4d, 0xf5, 0x20, 0xe8, 0x2a, 0xa4, 0x3d, 0x5b,
	0x58, 0x6e, 0x5d, 0x76, 0x1c, 0xa9, 0x0e, 0x7b, 0xb6, 0xd8, 0xac, 0x9b, 0x1f, 0x0d, 0xb8, 0x33,
	0x00, 0x87, 0x1e, 0x7b, 0x12, 0x32, 0x44, 0x04, 0x56, 0x4d, 0x85, 0x35, 0x13, 0x10, 0x11, 0x68,
	0xa0, 0x04, 0xd4, 0xcf, 0x00, 0x43, 0x1a, 0x50, 0x8f, 0x01, 0x05, 0x18, 0x15, 0x4c, 0x10, 0xcf,
	0x52, 0x22, 0xc7, 0x2f, 0x48, 0x44, 0x46, 0xc6, 0x54, 0x4f, 0x74, 0x0f, 0xae, 0x89, 0xb0, 0xc1,
	0x85, 0xd5, 0xa4, 0xae, 0xb3, 0x2d, 0x68, 0x3d, 0xa6, 0xbb, 0x28, 0xc1, 0x59, 0x99, 0x7d, 0xa1,
	0x93, 0x9a, 0xd8, 0xdc, 0x80, 0x9b, 0x52, 0xc7, 0x0a, 0xf1, 0xec, 0x86, 0x47, 0x04, 0xed, 0x54,
	0xf3, 0xbc, 0xdc, 0x5e, 0x43, 0x01, 0x46, 0x59, 0x40, 0x43, 0x99, 0x39, 0x5b, 0x46, 0x26, 0x8e,
	0x6d, 0xd6, 0xcd, 0x0a, 0x4c, 0x27, 0x33, 0xe9, 0x65, 0x4c, 0x00, 0x44, 0x56, 0xd9, 0x12, 0xd4,
	0xe7, 0x2c, 0xd4, 0x44, 0x97, 0xa2, 0xf2, 0x33, 0xf9, 0xbf, 0xb9, 0x00, 0x53, 0xed, 0xbd, 0x2a,
	0x5d, 0x6b, 0x1e, 0x6b, 0x6e, 0xb8, 0x5c, 0xb0, 0xb0, 0xd5, 0xe7, 0x26, 0x5b, 0x50, 0x48, 0x28,
	0xd5, 0xdd, 0xef, 0xc2, 0x98, 0x5a, 0xa1, 0x15, 0xcf, 0xce, 0x35, 0xcd, 0x65, 0x95, 0x78, 0x12,
	0xc7, 0xe7, 0xbf, 0xa6, 0x61, 0x58, 0x52, 0xa2, 0x03, 0x03, 0xd2, 0xca, 0x50, 0x68, 0x2e, 0xc1,
	0x73, 0x7f, 0x3b, 0x39, 0x57, 0x1c, 0x14, 0xae, 0x06, 0x34, 0x67, 0xdf, 0x7e, 0xfa, 0x71, 0x30,
	0x34, 0x8d, 0x4c, 0xac, 0xeb, 0xe6, 0x7a, 0xbe, 0x20, 0xf4, 0xdb, 0x80, 0x89, 0x24, 0x03, 0xa2,
	0x95, 0x7e, 0xcd, 0x07, 0x78, 0x02, 0xb9, 0xca, 0xff, 0x91, 0x68, 0x5d, 0x8f, 0xa4, 0xae, 0x35,
	0x54, 0x49, 0xd2, 0xe5, 0x50, 0x61, 0x85, 0x1d, 0x54, 0xda, 0xee, 0x6d, 0x27, 0xe3, 0x3d, 0x75,
	0xf7, 0x7d, 0xf4, 0xcb, 0x80, 0xeb, 0x3d, 0x8c, 0x86, 0x96, 0xfa, 0xcd, 0x9b, 0xec, 0xf5, 0xdc,
	0x83, 0x73, 0xd7, 0x6b, 0xa9, 0x8f, 0xa5, 0xd4, 0x75, 0xb4, 0x9a, 0x24, 0xd5, 0x6e, 0x93, 0x74,
	0x0b, 0x8e, 0xac, 0x32, 0xde, 0xeb, 0x7c, 0x6a, 0xfb, 0xe8, 0xb3, 0x01, 0xd9, 0x7f, 0x79, 0x1a,
	0xdd, 0x1f, 0xe0, 0x30, 0xbd, 0x1e, 0x51, 0x6e, 0xf1, 0x7c, 0xc5, 0x5a, 0x62, 0x45, 0x4a, 0x5c,
	0x42, 0x8b, 0xfd, 0xae, 0xa9, 0x0f, 0xf8, 0xda, 0x63, 0x4d, 0x6b, 0x5b, 0x91, 0xc4, 0x57, 0x5c,
	0x5e, 0x38, 0x3c, 0xce, 0x1b, 0x47, 0xc7, 0x79, 0xe3, 0xfb, 0x71, 0xde, 0x78, 0x77, 0x92, 0x4f,
	0x1d, 0x9d, 0xe4, 0x53, 0x5f, 0x4e, 0xf2, 0xa9, 0x97, 0x93, 0x9d, 0xb4, 0x6f, 0xba, 0x88, 0x45,
	0x2b, 0xa0, 0xbc, 0x96, 0x96, 0xbf, 0x1e, 0xe5, 0x3f, 0x01, 0x00, 0x00, 0xff, 0xff, 0xef, 0xa3,
	0x21, 0xbc, 0x1c, 0x07, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	// Parameters queries the parameters of the module.
	Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error)
	// GetRelationshipEnergyBalance Queries a list of GetRelationshipEnergyBalance items.
	GetRelationshipEnergyBalance(ctx context.Context, in *QueryGetRelationshipEnergyBalanceRequest, opts ...grpc.CallOption) (*QueryGetRelationshipEnergyBalanceResponse, error)
	// CalculateRelationshipV3 Queries a list of CalculateRelationshipV3 items.
	CalculateRelationshipV3(ctx context.Context, in *QueryCalculateRelationshipV3Request, opts ...grpc.CallOption) (*QueryCalculateRelationshipV3Response, error)
	// GetEnergyFlowHistory Queries a list of GetEnergyFlowHistory items.
	GetEnergyFlowHistory(ctx context.Context, in *QueryGetEnergyFlowHistoryRequest, opts ...grpc.CallOption) (*QueryGetEnergyFlowHistoryResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error) {
	out := new(QueryParamsResponse)
	err := c.cc.Invoke(ctx, "/racecarweb.energycycle.v1.Query/Params", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetRelationshipEnergyBalance(ctx context.Context, in *QueryGetRelationshipEnergyBalanceRequest, opts ...grpc.CallOption) (*QueryGetRelationshipEnergyBalanceResponse, error) {
	out := new(QueryGetRelationshipEnergyBalanceResponse)
	err := c.cc.Invoke(ctx, "/racecarweb.energycycle.v1.Query/GetRelationshipEnergyBalance", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) CalculateRelationshipV3(ctx context.Context, in *QueryCalculateRelationshipV3Request, opts ...grpc.CallOption) (*QueryCalculateRelationshipV3Response, error) {
	out := new(QueryCalculateRelationshipV3Response)
	err := c.cc.Invoke(ctx, "/racecarweb.energycycle.v1.Query/CalculateRelationshipV3", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetEnergyFlowHistory(ctx context.Context, in *QueryGetEnergyFlowHistoryRequest, opts ...grpc.CallOption) (*QueryGetEnergyFlowHistoryResponse, error) {
	out := new(QueryGetEnergyFlowHistoryResponse)
	err := c.cc.Invoke(ctx, "/racecarweb.energycycle.v1.Query/GetEnergyFlowHistory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	// Parameters queries the parameters of the module.
	Params(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error)
	// GetRelationshipEnergyBalance Queries a list of GetRelationshipEnergyBalance items.
	GetRelationshipEnergyBalance(context.Context, *QueryGetRelationshipEnergyBalanceRequest) (*QueryGetRelationshipEnergyBalanceResponse, error)
	// CalculateRelationshipV3 Queries a list of CalculateRelationshipV3 items.
	CalculateRelationshipV3(context.Context, *QueryCalculateRelationshipV3Request) (*QueryCalculateRelationshipV3Response, error)
	// GetEnergyFlowHistory Queries a list of GetEnergyFlowHistory items.
	GetEnergyFlowHistory(context.Context, *QueryGetEnergyFlowHistoryRequest) (*QueryGetEnergyFlowHistoryResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) Params(ctx context.Context, req *QueryParamsRequest) (*QueryParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Params not implemented")
}
func (*UnimplementedQueryServer) GetRelationshipEnergyBalance(ctx context.Context, req *QueryGetRelationshipEnergyBalanceRequest) (*QueryGetRelationshipEnergyBalanceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRelationshipEnergyBalance not implemented")
}
func (*UnimplementedQueryServer) CalculateRelationshipV3(ctx context.Context, req *QueryCalculateRelationshipV3Request) (*QueryCalculateRelationshipV3Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CalculateRelationshipV3 not implemented")
}
func (*UnimplementedQueryServer) GetEnergyFlowHistory(ctx context.Context, req *QueryGetEnergyFlowHistoryRequest) (*QueryGetEnergyFlowHistoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEnergyFlowHistory not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_Params_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Params(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/racecarweb.energycycle.v1.Query/Params",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Params(ctx, req.(*QueryParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetRelationshipEnergyBalance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetRelationshipEnergyBalanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetRelationshipEnergyBalance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/racecarweb.energycycle.v1.Query/GetRelationshipEnergyBalance",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetRelationshipEnergyBalance(ctx, req.(*QueryGetRelationshipEnergyBalanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_CalculateRelationshipV3_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryCalculateRelationshipV3Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).CalculateRelationshipV3(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/racecarweb.energycycle.v1.Query/CalculateRelationshipV3",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).CalculateRelationshipV3(ctx, req.(*QueryCalculateRelationshipV3Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetEnergyFlowHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetEnergyFlowHistoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetEnergyFlowHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/racecarweb.energycycle.v1.Query/GetEnergyFlowHistory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetEnergyFlowHistory(ctx, req.(*QueryGetEnergyFlowHistoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var Query_serviceDesc = _Query_serviceDesc
var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "racecarweb.energycycle.v1.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Params",
			Handler:    _Query_Params_Handler,
		},
		{
			MethodName: "GetRelationshipEnergyBalance",
			Handler:    _Query_GetRelationshipEnergyBalance_Handler,
		},
		{
			MethodName: "CalculateRelationshipV3",
			Handler:    _Query_CalculateRelationshipV3_Handler,
		},
		{
			MethodName: "GetEnergyFlowHistory",
			Handler:    _Query_GetEnergyFlowHistory_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "racecarweb/energycycle/v1/query.proto",
}

func (m *QueryParamsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryParamsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryGetRelationshipEnergyBalanceRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetRelationshipEnergyBalanceRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetRelationshipEnergyBalanceRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.LctId) > 0 {
		i -= len(m.LctId)
		copy(dAtA[i:], m.LctId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.LctId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetRelationshipEnergyBalanceResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetRelationshipEnergyBalanceResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetRelationshipEnergyBalanceResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.TrustWeightedBalance) > 0 {
		i -= len(m.TrustWeightedBalance)
		copy(dAtA[i:], m.TrustWeightedBalance)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.TrustWeightedBalance)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.TotalEnergy) > 0 {
		i -= len(m.TotalEnergy)
		copy(dAtA[i:], m.TotalEnergy)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.TotalEnergy)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.AdpBalance) > 0 {
		i -= len(m.AdpBalance)
		copy(dAtA[i:], m.AdpBalance)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.AdpBalance)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.AtpBalance) > 0 {
		i -= len(m.AtpBalance)
		copy(dAtA[i:], m.AtpBalance)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.AtpBalance)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryCalculateRelationshipV3Request) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryCalculateRelationshipV3Request) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryCalculateRelationshipV3Request) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.OperationId) > 0 {
		i -= len(m.OperationId)
		copy(dAtA[i:], m.OperationId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.OperationId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryCalculateRelationshipV3Response) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryCalculateRelationshipV3Response) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryCalculateRelationshipV3Response) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.V_3Tensor) > 0 {
		i -= len(m.V_3Tensor)
		copy(dAtA[i:], m.V_3Tensor)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.V_3Tensor)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetEnergyFlowHistoryRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetEnergyFlowHistoryRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetEnergyFlowHistoryRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.LctId) > 0 {
		i -= len(m.LctId)
		copy(dAtA[i:], m.LctId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.LctId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetEnergyFlowHistoryResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetEnergyFlowHistoryResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetEnergyFlowHistoryResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.EnergyOperations) > 0 {
		i -= len(m.EnergyOperations)
		copy(dAtA[i:], m.EnergyOperations)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.EnergyOperations)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryParamsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryParamsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Params.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryGetRelationshipEnergyBalanceRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.LctId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetRelationshipEnergyBalanceResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.AtpBalance)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.AdpBalance)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.TotalEnergy)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.TrustWeightedBalance)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryCalculateRelationshipV3Request) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.OperationId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryCalculateRelationshipV3Response) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.V_3Tensor)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetEnergyFlowHistoryRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.LctId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetEnergyFlowHistoryResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.EnergyOperations)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryParamsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryParamsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetRelationshipEnergyBalanceRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetRelationshipEnergyBalanceRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetRelationshipEnergyBalanceRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LctId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LctId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetRelationshipEnergyBalanceResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetRelationshipEnergyBalanceResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetRelationshipEnergyBalanceResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AtpBalance", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AtpBalance = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AdpBalance", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AdpBalance = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalEnergy", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TotalEnergy = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TrustWeightedBalance", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TrustWeightedBalance = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryCalculateRelationshipV3Request) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryCalculateRelationshipV3Request: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryCalculateRelationshipV3Request: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OperationId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OperationId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryCalculateRelationshipV3Response) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryCalculateRelationshipV3Response: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryCalculateRelationshipV3Response: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field V_3Tensor", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.V_3Tensor = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetEnergyFlowHistoryRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetEnergyFlowHistoryRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetEnergyFlowHistoryRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LctId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LctId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetEnergyFlowHistoryResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetEnergyFlowHistoryResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetEnergyFlowHistoryResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EnergyOperations", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EnergyOperations = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
