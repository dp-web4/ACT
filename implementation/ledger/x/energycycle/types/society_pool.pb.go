// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: racecarweb/energycycle/v1/society_pool.proto

package types

import (
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// SocietyPool represents a society's ATP/ADP token pool
type SocietyPool struct {
	// Society LCT identifier
	SocietyLct string `protobuf:"bytes,1,opt,name=society_lct,json=societyLct,proto3" json:"society_lct,omitempty"`
	// ATP balance (charged energy tokens)
	AtpBalance types.Coin `protobuf:"bytes,2,opt,name=atp_balance,json=atpBalance,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coin" json:"atp_balance"`
	// ADP balance (discharged energy tokens)
	AdpBalance types.Coin `protobuf:"bytes,3,opt,name=adp_balance,json=adpBalance,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coin" json:"adp_balance"`
	// Last update timestamp
	LastUpdate int64 `protobuf:"varint,4,opt,name=last_update,json=lastUpdate,proto3" json:"last_update,omitempty"`
	// Total minted (historical)
	TotalMinted string `protobuf:"bytes,5,opt,name=total_minted,json=totalMinted,proto3" json:"total_minted,omitempty"`
	// Total discharged (work performed)
	TotalDischarged string `protobuf:"bytes,6,opt,name=total_discharged,json=totalDischarged,proto3" json:"total_discharged,omitempty"`
	// Total recharged (energy added)
	TotalRecharged string `protobuf:"bytes,7,opt,name=total_recharged,json=totalRecharged,proto3" json:"total_recharged,omitempty"`
	// Metadata for additional properties
	Metadata map[string]string `protobuf:"bytes,8,rep,name=metadata,proto3" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Society status (active, dormant, hibernating, etc.)
	MetabolicState string `protobuf:"bytes,9,opt,name=metabolic_state,json=metabolicState,proto3" json:"metabolic_state,omitempty"`
	// Treasury role LCT that can mint
	TreasuryRole string `protobuf:"bytes,10,opt,name=treasury_role,json=treasuryRole,proto3" json:"treasury_role,omitempty"`
}

func (m *SocietyPool) Reset()         { *m = SocietyPool{} }
func (m *SocietyPool) String() string { return proto.CompactTextString(m) }
func (*SocietyPool) ProtoMessage()    {}
func (*SocietyPool) Descriptor() ([]byte, []int) {
	return fileDescriptor_b3d6c0f1931b4457, []int{0}
}
func (m *SocietyPool) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SocietyPool) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SocietyPool.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SocietyPool) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SocietyPool.Merge(m, src)
}
func (m *SocietyPool) XXX_Size() int {
	return m.Size()
}
func (m *SocietyPool) XXX_DiscardUnknown() {
	xxx_messageInfo_SocietyPool.DiscardUnknown(m)
}

var xxx_messageInfo_SocietyPool proto.InternalMessageInfo

func (m *SocietyPool) GetSocietyLct() string {
	if m != nil {
		return m.SocietyLct
	}
	return ""
}

func (m *SocietyPool) GetAtpBalance() types.Coin {
	if m != nil {
		return m.AtpBalance
	}
	return types.Coin{}
}

func (m *SocietyPool) GetAdpBalance() types.Coin {
	if m != nil {
		return m.AdpBalance
	}
	return types.Coin{}
}

func (m *SocietyPool) GetLastUpdate() int64 {
	if m != nil {
		return m.LastUpdate
	}
	return 0
}

func (m *SocietyPool) GetTotalMinted() string {
	if m != nil {
		return m.TotalMinted
	}
	return ""
}

func (m *SocietyPool) GetTotalDischarged() string {
	if m != nil {
		return m.TotalDischarged
	}
	return ""
}

func (m *SocietyPool) GetTotalRecharged() string {
	if m != nil {
		return m.TotalRecharged
	}
	return ""
}

func (m *SocietyPool) GetMetadata() map[string]string {
	if m != nil {
		return m.Metadata
	}
	return nil
}

func (m *SocietyPool) GetMetabolicState() string {
	if m != nil {
		return m.MetabolicState
	}
	return ""
}

func (m *SocietyPool) GetTreasuryRole() string {
	if m != nil {
		return m.TreasuryRole
	}
	return ""
}

// QueryGetSocietyPoolRequest is the request for querying a society pool
type QueryGetSocietyPoolRequest struct {
	SocietyLct string `protobuf:"bytes,1,opt,name=society_lct,json=societyLct,proto3" json:"society_lct,omitempty"`
}

func (m *QueryGetSocietyPoolRequest) Reset()         { *m = QueryGetSocietyPoolRequest{} }
func (m *QueryGetSocietyPoolRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetSocietyPoolRequest) ProtoMessage()    {}
func (*QueryGetSocietyPoolRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_b3d6c0f1931b4457, []int{1}
}
func (m *QueryGetSocietyPoolRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetSocietyPoolRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetSocietyPoolRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetSocietyPoolRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetSocietyPoolRequest.Merge(m, src)
}
func (m *QueryGetSocietyPoolRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetSocietyPoolRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetSocietyPoolRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetSocietyPoolRequest proto.InternalMessageInfo

func (m *QueryGetSocietyPoolRequest) GetSocietyLct() string {
	if m != nil {
		return m.SocietyLct
	}
	return ""
}

// QueryGetSocietyPoolResponse is the response for querying a society pool
type QueryGetSocietyPoolResponse struct {
	Pool *SocietyPool `protobuf:"bytes,1,opt,name=pool,proto3" json:"pool,omitempty"`
}

func (m *QueryGetSocietyPoolResponse) Reset()         { *m = QueryGetSocietyPoolResponse{} }
func (m *QueryGetSocietyPoolResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetSocietyPoolResponse) ProtoMessage()    {}
func (*QueryGetSocietyPoolResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_b3d6c0f1931b4457, []int{2}
}
func (m *QueryGetSocietyPoolResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetSocietyPoolResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetSocietyPoolResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetSocietyPoolResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetSocietyPoolResponse.Merge(m, src)
}
func (m *QueryGetSocietyPoolResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetSocietyPoolResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetSocietyPoolResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetSocietyPoolResponse proto.InternalMessageInfo

func (m *QueryGetSocietyPoolResponse) GetPool() *SocietyPool {
	if m != nil {
		return m.Pool
	}
	return nil
}

func init() {
	proto.RegisterType((*SocietyPool)(nil), "racecarweb.energycycle.v1.SocietyPool")
	proto.RegisterMapType((map[string]string)(nil), "racecarweb.energycycle.v1.SocietyPool.MetadataEntry")
	proto.RegisterType((*QueryGetSocietyPoolRequest)(nil), "racecarweb.energycycle.v1.QueryGetSocietyPoolRequest")
	proto.RegisterType((*QueryGetSocietyPoolResponse)(nil), "racecarweb.energycycle.v1.QueryGetSocietyPoolResponse")
}

func init() {
	proto.RegisterFile("racecarweb/energycycle/v1/society_pool.proto", fileDescriptor_b3d6c0f1931b4457)
}

var fileDescriptor_b3d6c0f1931b4457 = []byte{
	// 539 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x93, 0xc1, 0x6e, 0xd3, 0x30,
	0x18, 0xc7, 0x9b, 0x75, 0x1b, 0x9b, 0xb3, 0xc1, 0x64, 0xed, 0x90, 0x15, 0x29, 0x2d, 0x45, 0x62,
	0x45, 0x62, 0x89, 0x5a, 0x38, 0xc0, 0x10, 0x97, 0x02, 0xe2, 0xc2, 0xa4, 0x91, 0x89, 0x03, 0x5c,
	0x22, 0xc7, 0xf9, 0xd4, 0x45, 0x75, 0xe3, 0x60, 0x3b, 0x85, 0xbc, 0x05, 0xcf, 0xc1, 0x93, 0xec,
	0xb8, 0x23, 0x27, 0x40, 0xed, 0x73, 0x20, 0x21, 0xdb, 0x69, 0xd7, 0x49, 0x20, 0xb8, 0x70, 0xaa,
	0xfd, 0xf3, 0xff, 0xef, 0xff, 0x57, 0xe7, 0xfb, 0xd0, 0x03, 0x41, 0x28, 0x50, 0x22, 0x3e, 0x42,
	0x12, 0x42, 0x0e, 0x62, 0x54, 0xd1, 0x8a, 0x32, 0x08, 0xa7, 0xfd, 0x50, 0x72, 0x9a, 0x81, 0xaa,
	0xe2, 0x82, 0x73, 0x16, 0x14, 0x82, 0x2b, 0x8e, 0x0f, 0xae, 0xd4, 0xc1, 0x8a, 0x3a, 0x98, 0xf6,
	0x5b, 0xfb, 0x23, 0x3e, 0xe2, 0x46, 0x15, 0xea, 0x95, 0x35, 0xb4, 0x0e, 0x28, 0x97, 0x13, 0x2e,
	0x63, 0x7b, 0x60, 0x37, 0xf5, 0x91, 0x6f, 0x77, 0x61, 0x42, 0xa4, 0x8e, 0x4b, 0x40, 0x91, 0x7e,
	0x48, 0x79, 0x96, 0xdb, 0xf3, 0xee, 0xcf, 0x75, 0xe4, 0x9e, 0xd9, 0x12, 0x4e, 0x39, 0x67, 0xb8,
	0x8d, 0xdc, 0x45, 0x45, 0x8c, 0x2a, 0xcf, 0xe9, 0x38, 0xbd, 0xed, 0x08, 0xd5, 0xe8, 0x35, 0x55,
	0x78, 0x8c, 0x5c, 0xa2, 0x8a, 0x38, 0x21, 0x8c, 0xe4, 0x14, 0xbc, 0xb5, 0x8e, 0xd3, 0x73, 0x07,
	0x07, 0x41, 0x1d, 0xaa, 0x63, 0x82, 0x3a, 0x26, 0x78, 0xce, 0xb3, 0x7c, 0x18, 0x5e, 0x7c, 0x6b,
	0x37, 0xbe, 0x7c, 0x6f, 0x1f, 0x8e, 0x32, 0x75, 0x5e, 0x26, 0x01, 0xe5, 0x93, 0xba, 0xc2, 0xfa,
	0xe7, 0x48, 0xa6, 0xe3, 0x50, 0x55, 0x05, 0x48, 0x63, 0x88, 0x10, 0x51, 0xc5, 0xd0, 0xde, 0x6e,
	0xc2, 0xd2, 0xab, 0xb0, 0xe6, 0x7f, 0x08, 0x4b, 0x97, 0x61, 0x6d, 0xe4, 0x32, 0x22, 0x55, 0x5c,
	0x16, 0x29, 0x51, 0xe0, 0xad, 0x77, 0x9c, 0x5e, 0x33, 0x42, 0x1a, 0xbd, 0x35, 0x04, 0xdf, 0x41,
	0x3b, 0x8a, 0x2b, 0xc2, 0xe2, 0x49, 0x96, 0x2b, 0x48, 0xbd, 0x0d, 0xf3, 0x38, 0xae, 0x61, 0x27,
	0x06, 0xe1, 0xfb, 0x68, 0xcf, 0x4a, 0xd2, 0x4c, 0xd2, 0x73, 0x22, 0x46, 0x90, 0x7a, 0x9b, 0x46,
	0x76, 0xcb, 0xf0, 0x17, 0x4b, 0x8c, 0x0f, 0x91, 0x45, 0xb1, 0x80, 0x85, 0xf2, 0x86, 0x51, 0xde,
	0x34, 0x38, 0x5a, 0x50, 0x7c, 0x8a, 0xb6, 0x26, 0xa0, 0x48, 0x4a, 0x14, 0xf1, 0xb6, 0x3a, 0xcd,
	0x9e, 0x3b, 0x78, 0x14, 0xfc, 0xb1, 0x43, 0x82, 0x95, 0x8f, 0x19, 0x9c, 0xd4, 0xb6, 0x97, 0xb9,
	0x12, 0x55, 0xb4, 0xbc, 0x45, 0x47, 0xeb, 0x75, 0xc2, 0x59, 0x46, 0x63, 0xa9, 0xf4, 0xbf, 0xdd,
	0xb6, 0xd1, 0x4b, 0x7c, 0xa6, 0x29, 0xbe, 0x8b, 0x76, 0x95, 0x00, 0x22, 0x4b, 0x51, 0xc5, 0x82,
	0x33, 0xf0, 0x90, 0x91, 0xed, 0x2c, 0x60, 0xc4, 0x19, 0xb4, 0x9e, 0xa2, 0xdd, 0x6b, 0x41, 0x78,
	0x0f, 0x35, 0xc7, 0x50, 0xd5, 0xbd, 0xa3, 0x97, 0x78, 0x1f, 0x6d, 0x4c, 0x09, 0x2b, 0x6d, 0xbb,
	0x6c, 0x47, 0x76, 0x73, 0xbc, 0xf6, 0xd8, 0xe9, 0x3e, 0x43, 0xad, 0x37, 0x25, 0x88, 0xea, 0x15,
	0xa8, 0x95, 0xca, 0x23, 0xf8, 0x50, 0x82, 0x54, 0x7f, 0xed, 0xc6, 0xee, 0x3b, 0x74, 0xfb, 0xb7,
	0x76, 0x59, 0xf0, 0x5c, 0x02, 0x3e, 0x46, 0xeb, 0x7a, 0xae, 0x8c, 0xd1, 0x1d, 0xdc, 0xfb, 0xb7,
	0x67, 0x8b, 0x8c, 0x67, 0xf8, 0xe4, 0x62, 0xe6, 0x3b, 0x97, 0x33, 0xdf, 0xf9, 0x31, 0xf3, 0x9d,
	0xcf, 0x73, 0xbf, 0x71, 0x39, 0xf7, 0x1b, 0x5f, 0xe7, 0x7e, 0xe3, 0x7d, 0xbb, 0xbe, 0xe6, 0x48,
	0x8f, 0xf3, 0xa7, 0x6b, 0x03, 0x6d, 0x5a, 0x2b, 0xd9, 0x34, 0xb3, 0xf5, 0xf0, 0x57, 0x00, 0x00,
	0x00, 0xff, 0xff, 0x03, 0xda, 0xaf, 0xdf, 0xf7, 0x03, 0x00, 0x00,
}

func (m *SocietyPool) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SocietyPool) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SocietyPool) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.TreasuryRole) > 0 {
		i -= len(m.TreasuryRole)
		copy(dAtA[i:], m.TreasuryRole)
		i = encodeVarintSocietyPool(dAtA, i, uint64(len(m.TreasuryRole)))
		i--
		dAtA[i] = 0x52
	}
	if len(m.MetabolicState) > 0 {
		i -= len(m.MetabolicState)
		copy(dAtA[i:], m.MetabolicState)
		i = encodeVarintSocietyPool(dAtA, i, uint64(len(m.MetabolicState)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.Metadata) > 0 {
		for k := range m.Metadata {
			v := m.Metadata[k]
			baseI := i
			i -= len(v)
			copy(dAtA[i:], v)
			i = encodeVarintSocietyPool(dAtA, i, uint64(len(v)))
			i--
			dAtA[i] = 0x12
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintSocietyPool(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintSocietyPool(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x42
		}
	}
	if len(m.TotalRecharged) > 0 {
		i -= len(m.TotalRecharged)
		copy(dAtA[i:], m.TotalRecharged)
		i = encodeVarintSocietyPool(dAtA, i, uint64(len(m.TotalRecharged)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.TotalDischarged) > 0 {
		i -= len(m.TotalDischarged)
		copy(dAtA[i:], m.TotalDischarged)
		i = encodeVarintSocietyPool(dAtA, i, uint64(len(m.TotalDischarged)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.TotalMinted) > 0 {
		i -= len(m.TotalMinted)
		copy(dAtA[i:], m.TotalMinted)
		i = encodeVarintSocietyPool(dAtA, i, uint64(len(m.TotalMinted)))
		i--
		dAtA[i] = 0x2a
	}
	if m.LastUpdate != 0 {
		i = encodeVarintSocietyPool(dAtA, i, uint64(m.LastUpdate))
		i--
		dAtA[i] = 0x20
	}
	{
		size, err := m.AdpBalance.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintSocietyPool(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	{
		size, err := m.AtpBalance.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintSocietyPool(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.SocietyLct) > 0 {
		i -= len(m.SocietyLct)
		copy(dAtA[i:], m.SocietyLct)
		i = encodeVarintSocietyPool(dAtA, i, uint64(len(m.SocietyLct)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetSocietyPoolRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetSocietyPoolRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetSocietyPoolRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.SocietyLct) > 0 {
		i -= len(m.SocietyLct)
		copy(dAtA[i:], m.SocietyLct)
		i = encodeVarintSocietyPool(dAtA, i, uint64(len(m.SocietyLct)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetSocietyPoolResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetSocietyPoolResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetSocietyPoolResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pool != nil {
		{
			size, err := m.Pool.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSocietyPool(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintSocietyPool(dAtA []byte, offset int, v uint64) int {
	offset -= sovSocietyPool(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *SocietyPool) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.SocietyLct)
	if l > 0 {
		n += 1 + l + sovSocietyPool(uint64(l))
	}
	l = m.AtpBalance.Size()
	n += 1 + l + sovSocietyPool(uint64(l))
	l = m.AdpBalance.Size()
	n += 1 + l + sovSocietyPool(uint64(l))
	if m.LastUpdate != 0 {
		n += 1 + sovSocietyPool(uint64(m.LastUpdate))
	}
	l = len(m.TotalMinted)
	if l > 0 {
		n += 1 + l + sovSocietyPool(uint64(l))
	}
	l = len(m.TotalDischarged)
	if l > 0 {
		n += 1 + l + sovSocietyPool(uint64(l))
	}
	l = len(m.TotalRecharged)
	if l > 0 {
		n += 1 + l + sovSocietyPool(uint64(l))
	}
	if len(m.Metadata) > 0 {
		for k, v := range m.Metadata {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovSocietyPool(uint64(len(k))) + 1 + len(v) + sovSocietyPool(uint64(len(v)))
			n += mapEntrySize + 1 + sovSocietyPool(uint64(mapEntrySize))
		}
	}
	l = len(m.MetabolicState)
	if l > 0 {
		n += 1 + l + sovSocietyPool(uint64(l))
	}
	l = len(m.TreasuryRole)
	if l > 0 {
		n += 1 + l + sovSocietyPool(uint64(l))
	}
	return n
}

func (m *QueryGetSocietyPoolRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.SocietyLct)
	if l > 0 {
		n += 1 + l + sovSocietyPool(uint64(l))
	}
	return n
}

func (m *QueryGetSocietyPoolResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pool != nil {
		l = m.Pool.Size()
		n += 1 + l + sovSocietyPool(uint64(l))
	}
	return n
}

func sovSocietyPool(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozSocietyPool(x uint64) (n int) {
	return sovSocietyPool(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *SocietyPool) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSocietyPool
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SocietyPool: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SocietyPool: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SocietyLct", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocietyPool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSocietyPool
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSocietyPool
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SocietyLct = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AtpBalance", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocietyPool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSocietyPool
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSocietyPool
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.AtpBalance.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AdpBalance", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocietyPool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSocietyPool
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSocietyPool
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.AdpBalance.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastUpdate", wireType)
			}
			m.LastUpdate = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocietyPool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LastUpdate |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalMinted", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocietyPool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSocietyPool
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSocietyPool
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TotalMinted = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalDischarged", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocietyPool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSocietyPool
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSocietyPool
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TotalDischarged = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalRecharged", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocietyPool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSocietyPool
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSocietyPool
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TotalRecharged = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Metadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocietyPool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSocietyPool
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSocietyPool
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Metadata == nil {
				m.Metadata = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowSocietyPool
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowSocietyPool
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthSocietyPool
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthSocietyPool
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowSocietyPool
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthSocietyPool
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue < 0 {
						return ErrInvalidLengthSocietyPool
					}
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipSocietyPool(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthSocietyPool
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Metadata[mapkey] = mapvalue
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MetabolicState", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocietyPool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSocietyPool
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSocietyPool
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MetabolicState = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TreasuryRole", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocietyPool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSocietyPool
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSocietyPool
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TreasuryRole = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSocietyPool(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSocietyPool
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetSocietyPoolRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSocietyPool
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetSocietyPoolRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetSocietyPoolRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SocietyLct", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocietyPool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSocietyPool
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSocietyPool
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SocietyLct = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSocietyPool(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSocietyPool
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetSocietyPoolResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSocietyPool
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetSocietyPoolResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetSocietyPoolResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pool", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocietyPool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSocietyPool
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSocietyPool
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pool == nil {
				m.Pool = &SocietyPool{}
			}
			if err := m.Pool.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSocietyPool(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSocietyPool
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipSocietyPool(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowSocietyPool
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSocietyPool
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSocietyPool
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthSocietyPool
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupSocietyPool
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthSocietyPool
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthSocietyPool        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowSocietyPool          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupSocietyPool = fmt.Errorf("proto: unexpected end of group")
)
