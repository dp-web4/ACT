// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: racecarweb/energycycle/v1/energy_operation.proto

package types

import (
	fmt "fmt"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// EnergyOperation defines the EnergyOperation message.
type EnergyOperation struct {
	OperationId      string `protobuf:"bytes,1,opt,name=operation_id,json=operationId,proto3" json:"operation_id,omitempty"`
	SourceLct        string `protobuf:"bytes,2,opt,name=source_lct,json=sourceLct,proto3" json:"source_lct,omitempty"`
	TargetLct        string `protobuf:"bytes,3,opt,name=target_lct,json=targetLct,proto3" json:"target_lct,omitempty"`
	EnergyAmount     string `protobuf:"bytes,4,opt,name=energy_amount,json=energyAmount,proto3" json:"energy_amount,omitempty"`
	OperationType    string `protobuf:"bytes,5,opt,name=operation_type,json=operationType,proto3" json:"operation_type,omitempty"`
	Status           string `protobuf:"bytes,6,opt,name=status,proto3" json:"status,omitempty"`
	Timestamp        int64  `protobuf:"varint,7,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	BlockHeight      int64  `protobuf:"varint,8,opt,name=block_height,json=blockHeight,proto3" json:"block_height,omitempty"`
	TrustScore       string `protobuf:"bytes,9,opt,name=trust_score,json=trustScore,proto3" json:"trust_score,omitempty"`
	AtpTokenId       string `protobuf:"bytes,10,opt,name=atp_token_id,json=atpTokenId,proto3" json:"atp_token_id,omitempty"`
	AdpTokenId       string `protobuf:"bytes,11,opt,name=adp_token_id,json=adpTokenId,proto3" json:"adp_token_id,omitempty"`
	EnergyEfficiency string `protobuf:"bytes,12,opt,name=energy_efficiency,json=energyEfficiency,proto3" json:"energy_efficiency,omitempty"`
	ValidationData   string `protobuf:"bytes,13,opt,name=validation_data,json=validationData,proto3" json:"validation_data,omitempty"`
	Version          int64  `protobuf:"varint,14,opt,name=version,proto3" json:"version,omitempty"`
}

func (m *EnergyOperation) Reset()         { *m = EnergyOperation{} }
func (m *EnergyOperation) String() string { return proto.CompactTextString(m) }
func (*EnergyOperation) ProtoMessage()    {}
func (*EnergyOperation) Descriptor() ([]byte, []int) {
	return fileDescriptor_cd6f468fc1e210d9, []int{0}
}
func (m *EnergyOperation) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EnergyOperation) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EnergyOperation.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EnergyOperation) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EnergyOperation.Merge(m, src)
}
func (m *EnergyOperation) XXX_Size() int {
	return m.Size()
}
func (m *EnergyOperation) XXX_DiscardUnknown() {
	xxx_messageInfo_EnergyOperation.DiscardUnknown(m)
}

var xxx_messageInfo_EnergyOperation proto.InternalMessageInfo

func (m *EnergyOperation) GetOperationId() string {
	if m != nil {
		return m.OperationId
	}
	return ""
}

func (m *EnergyOperation) GetSourceLct() string {
	if m != nil {
		return m.SourceLct
	}
	return ""
}

func (m *EnergyOperation) GetTargetLct() string {
	if m != nil {
		return m.TargetLct
	}
	return ""
}

func (m *EnergyOperation) GetEnergyAmount() string {
	if m != nil {
		return m.EnergyAmount
	}
	return ""
}

func (m *EnergyOperation) GetOperationType() string {
	if m != nil {
		return m.OperationType
	}
	return ""
}

func (m *EnergyOperation) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

func (m *EnergyOperation) GetTimestamp() int64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func (m *EnergyOperation) GetBlockHeight() int64 {
	if m != nil {
		return m.BlockHeight
	}
	return 0
}

func (m *EnergyOperation) GetTrustScore() string {
	if m != nil {
		return m.TrustScore
	}
	return ""
}

func (m *EnergyOperation) GetAtpTokenId() string {
	if m != nil {
		return m.AtpTokenId
	}
	return ""
}

func (m *EnergyOperation) GetAdpTokenId() string {
	if m != nil {
		return m.AdpTokenId
	}
	return ""
}

func (m *EnergyOperation) GetEnergyEfficiency() string {
	if m != nil {
		return m.EnergyEfficiency
	}
	return ""
}

func (m *EnergyOperation) GetValidationData() string {
	if m != nil {
		return m.ValidationData
	}
	return ""
}

func (m *EnergyOperation) GetVersion() int64 {
	if m != nil {
		return m.Version
	}
	return 0
}

func init() {
	proto.RegisterType((*EnergyOperation)(nil), "racecarweb.energycycle.v1.EnergyOperation")
}

func init() {
	proto.RegisterFile("racecarweb/energycycle/v1/energy_operation.proto", fileDescriptor_cd6f468fc1e210d9)
}

var fileDescriptor_cd6f468fc1e210d9 = []byte{
	// 403 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x54, 0x92, 0xc1, 0x6e, 0xd3, 0x40,
	0x10, 0x86, 0x63, 0x02, 0x29, 0x99, 0x38, 0x29, 0xec, 0x01, 0x2d, 0x12, 0xb8, 0x01, 0x84, 0xa8,
	0x84, 0x48, 0xa9, 0x38, 0x71, 0x04, 0x51, 0x89, 0x4a, 0x48, 0x48, 0xa5, 0x27, 0x2e, 0xd6, 0x66,
	0x3d, 0x4d, 0x57, 0x75, 0xbc, 0xd6, 0xee, 0xd8, 0xe0, 0xb7, 0xe0, 0xb1, 0x38, 0xf6, 0xc8, 0x11,
	0x25, 0x57, 0x1e, 0x02, 0x79, 0xec, 0xda, 0xe9, 0x71, 0xbe, 0xff, 0x9b, 0xd5, 0xce, 0x68, 0xe0,
	0xad, 0x53, 0x1a, 0xb5, 0x72, 0x3f, 0x70, 0x79, 0x84, 0x19, 0xba, 0x55, 0xa5, 0x2b, 0x9d, 0xe2,
	0x51, 0x79, 0xdc, 0x96, 0xb1, 0xcd, 0xd1, 0x29, 0x32, 0x36, 0x5b, 0xe4, 0xce, 0x92, 0x15, 0x8f,
	0xfb, 0x8e, 0xc5, 0x4e, 0xc7, 0xa2, 0x3c, 0x7e, 0xfe, 0x6f, 0x08, 0xfb, 0x27, 0x8c, 0xbe, 0xde,
	0x34, 0x89, 0x67, 0x10, 0x76, 0x2f, 0xc4, 0x26, 0x91, 0xc1, 0x3c, 0x38, 0x1c, 0x9f, 0x4d, 0x3a,
	0x76, 0x9a, 0x88, 0xa7, 0x00, 0xde, 0x16, 0x4e, 0x63, 0x9c, 0x6a, 0x92, 0x77, 0x58, 0x18, 0x37,
	0xe4, 0x8b, 0xa6, 0x3a, 0x26, 0xe5, 0x56, 0x48, 0x1c, 0x0f, 0x9b, 0xb8, 0x21, 0x75, 0xfc, 0x02,
	0xa6, 0xed, 0x4f, 0xd5, 0xda, 0x16, 0x19, 0xc9, 0xbb, 0x6c, 0x84, 0x0d, 0xfc, 0xc0, 0x4c, 0xbc,
	0x84, 0x59, 0xff, 0x0b, 0xaa, 0x72, 0x94, 0xf7, 0xd8, 0x9a, 0x76, 0xf4, 0xbc, 0xca, 0x51, 0x3c,
	0x82, 0x91, 0x27, 0x45, 0x85, 0x97, 0x23, 0x8e, 0xdb, 0x4a, 0x3c, 0x81, 0x31, 0x99, 0x35, 0x7a,
	0x52, 0xeb, 0x5c, 0xee, 0xcd, 0x83, 0xc3, 0xe1, 0x59, 0x0f, 0xea, 0x11, 0x97, 0xa9, 0xd5, 0x57,
	0xf1, 0x25, 0x9a, 0xd5, 0x25, 0xc9, 0xfb, 0x2c, 0x4c, 0x98, 0x7d, 0x66, 0x24, 0x0e, 0x60, 0x42,
	0xae, 0xf0, 0x14, 0x7b, 0x6d, 0x1d, 0xca, 0x31, 0xbf, 0x0e, 0x8c, 0xbe, 0xd5, 0x44, 0xcc, 0x21,
	0x54, 0x94, 0xc7, 0x64, 0xaf, 0x90, 0xd7, 0x04, 0x8d, 0xa1, 0x28, 0x3f, 0xaf, 0xd1, 0x69, 0xc2,
	0x46, 0xb2, 0x63, 0x4c, 0x5a, 0x23, 0xe9, 0x8c, 0xd7, 0xf0, 0xb0, 0xdd, 0x04, 0x5e, 0x5c, 0x18,
	0x6d, 0x30, 0xd3, 0x95, 0x0c, 0x59, 0x7b, 0xd0, 0x04, 0x27, 0x1d, 0x17, 0xaf, 0x60, 0xbf, 0x54,
	0xa9, 0x49, 0x9a, 0x95, 0x24, 0x8a, 0x94, 0x9c, 0xb2, 0x3a, 0xeb, 0xf1, 0x27, 0x45, 0x4a, 0x48,
	0xd8, 0x2b, 0xd1, 0x79, 0x63, 0x33, 0x39, 0xe3, 0xc1, 0x6e, 0xca, 0x8f, 0xef, 0x7f, 0x6f, 0xa2,
	0xe0, 0x7a, 0x13, 0x05, 0x7f, 0x37, 0x51, 0xf0, 0x6b, 0x1b, 0x0d, 0xae, 0xb7, 0xd1, 0xe0, 0xcf,
	0x36, 0x1a, 0x7c, 0x3f, 0x68, 0x6f, 0xe4, 0x4d, 0x7d, 0x56, 0x3f, 0x6f, 0x1d, 0x56, 0xbd, 0x7c,
	0xbf, 0x1c, 0xf1, 0x2d, 0xbd, 0xfb, 0x1f, 0x00, 0x00, 0xff, 0xff, 0xd7, 0xaa, 0x2c, 0xdb, 0x7f,
	0x02, 0x00, 0x00,
}

func (m *EnergyOperation) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EnergyOperation) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EnergyOperation) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Version != 0 {
		i = encodeVarintEnergyOperation(dAtA, i, uint64(m.Version))
		i--
		dAtA[i] = 0x70
	}
	if len(m.ValidationData) > 0 {
		i -= len(m.ValidationData)
		copy(dAtA[i:], m.ValidationData)
		i = encodeVarintEnergyOperation(dAtA, i, uint64(len(m.ValidationData)))
		i--
		dAtA[i] = 0x6a
	}
	if len(m.EnergyEfficiency) > 0 {
		i -= len(m.EnergyEfficiency)
		copy(dAtA[i:], m.EnergyEfficiency)
		i = encodeVarintEnergyOperation(dAtA, i, uint64(len(m.EnergyEfficiency)))
		i--
		dAtA[i] = 0x62
	}
	if len(m.AdpTokenId) > 0 {
		i -= len(m.AdpTokenId)
		copy(dAtA[i:], m.AdpTokenId)
		i = encodeVarintEnergyOperation(dAtA, i, uint64(len(m.AdpTokenId)))
		i--
		dAtA[i] = 0x5a
	}
	if len(m.AtpTokenId) > 0 {
		i -= len(m.AtpTokenId)
		copy(dAtA[i:], m.AtpTokenId)
		i = encodeVarintEnergyOperation(dAtA, i, uint64(len(m.AtpTokenId)))
		i--
		dAtA[i] = 0x52
	}
	if len(m.TrustScore) > 0 {
		i -= len(m.TrustScore)
		copy(dAtA[i:], m.TrustScore)
		i = encodeVarintEnergyOperation(dAtA, i, uint64(len(m.TrustScore)))
		i--
		dAtA[i] = 0x4a
	}
	if m.BlockHeight != 0 {
		i = encodeVarintEnergyOperation(dAtA, i, uint64(m.BlockHeight))
		i--
		dAtA[i] = 0x40
	}
	if m.Timestamp != 0 {
		i = encodeVarintEnergyOperation(dAtA, i, uint64(m.Timestamp))
		i--
		dAtA[i] = 0x38
	}
	if len(m.Status) > 0 {
		i -= len(m.Status)
		copy(dAtA[i:], m.Status)
		i = encodeVarintEnergyOperation(dAtA, i, uint64(len(m.Status)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.OperationType) > 0 {
		i -= len(m.OperationType)
		copy(dAtA[i:], m.OperationType)
		i = encodeVarintEnergyOperation(dAtA, i, uint64(len(m.OperationType)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.EnergyAmount) > 0 {
		i -= len(m.EnergyAmount)
		copy(dAtA[i:], m.EnergyAmount)
		i = encodeVarintEnergyOperation(dAtA, i, uint64(len(m.EnergyAmount)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.TargetLct) > 0 {
		i -= len(m.TargetLct)
		copy(dAtA[i:], m.TargetLct)
		i = encodeVarintEnergyOperation(dAtA, i, uint64(len(m.TargetLct)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.SourceLct) > 0 {
		i -= len(m.SourceLct)
		copy(dAtA[i:], m.SourceLct)
		i = encodeVarintEnergyOperation(dAtA, i, uint64(len(m.SourceLct)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.OperationId) > 0 {
		i -= len(m.OperationId)
		copy(dAtA[i:], m.OperationId)
		i = encodeVarintEnergyOperation(dAtA, i, uint64(len(m.OperationId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintEnergyOperation(dAtA []byte, offset int, v uint64) int {
	offset -= sovEnergyOperation(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *EnergyOperation) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.OperationId)
	if l > 0 {
		n += 1 + l + sovEnergyOperation(uint64(l))
	}
	l = len(m.SourceLct)
	if l > 0 {
		n += 1 + l + sovEnergyOperation(uint64(l))
	}
	l = len(m.TargetLct)
	if l > 0 {
		n += 1 + l + sovEnergyOperation(uint64(l))
	}
	l = len(m.EnergyAmount)
	if l > 0 {
		n += 1 + l + sovEnergyOperation(uint64(l))
	}
	l = len(m.OperationType)
	if l > 0 {
		n += 1 + l + sovEnergyOperation(uint64(l))
	}
	l = len(m.Status)
	if l > 0 {
		n += 1 + l + sovEnergyOperation(uint64(l))
	}
	if m.Timestamp != 0 {
		n += 1 + sovEnergyOperation(uint64(m.Timestamp))
	}
	if m.BlockHeight != 0 {
		n += 1 + sovEnergyOperation(uint64(m.BlockHeight))
	}
	l = len(m.TrustScore)
	if l > 0 {
		n += 1 + l + sovEnergyOperation(uint64(l))
	}
	l = len(m.AtpTokenId)
	if l > 0 {
		n += 1 + l + sovEnergyOperation(uint64(l))
	}
	l = len(m.AdpTokenId)
	if l > 0 {
		n += 1 + l + sovEnergyOperation(uint64(l))
	}
	l = len(m.EnergyEfficiency)
	if l > 0 {
		n += 1 + l + sovEnergyOperation(uint64(l))
	}
	l = len(m.ValidationData)
	if l > 0 {
		n += 1 + l + sovEnergyOperation(uint64(l))
	}
	if m.Version != 0 {
		n += 1 + sovEnergyOperation(uint64(m.Version))
	}
	return n
}

func sovEnergyOperation(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozEnergyOperation(x uint64) (n int) {
	return sovEnergyOperation(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *EnergyOperation) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEnergyOperation
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EnergyOperation: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EnergyOperation: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OperationId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEnergyOperation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEnergyOperation
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEnergyOperation
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OperationId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SourceLct", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEnergyOperation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEnergyOperation
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEnergyOperation
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SourceLct = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TargetLct", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEnergyOperation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEnergyOperation
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEnergyOperation
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TargetLct = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EnergyAmount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEnergyOperation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEnergyOperation
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEnergyOperation
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EnergyAmount = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OperationType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEnergyOperation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEnergyOperation
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEnergyOperation
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OperationType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEnergyOperation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEnergyOperation
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEnergyOperation
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Status = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timestamp", wireType)
			}
			m.Timestamp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEnergyOperation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Timestamp |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockHeight", wireType)
			}
			m.BlockHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEnergyOperation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BlockHeight |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TrustScore", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEnergyOperation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEnergyOperation
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEnergyOperation
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TrustScore = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AtpTokenId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEnergyOperation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEnergyOperation
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEnergyOperation
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AtpTokenId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AdpTokenId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEnergyOperation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEnergyOperation
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEnergyOperation
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AdpTokenId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EnergyEfficiency", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEnergyOperation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEnergyOperation
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEnergyOperation
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EnergyEfficiency = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValidationData", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEnergyOperation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEnergyOperation
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEnergyOperation
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ValidationData = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			m.Version = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEnergyOperation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Version |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipEnergyOperation(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEnergyOperation
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipEnergyOperation(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowEnergyOperation
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEnergyOperation
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEnergyOperation
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthEnergyOperation
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupEnergyOperation
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthEnergyOperation
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthEnergyOperation        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowEnergyOperation          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupEnergyOperation = fmt.Errorf("proto: unexpected end of group")
)
