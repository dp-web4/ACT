// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: racecarweb/energycycle/v1/relationship_atp_token.proto

package types

import (
	fmt "fmt"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// RelationshipAtpToken defines the RelationshipAtpToken message.
type RelationshipAtpToken struct {
	TokenId             string `protobuf:"bytes,1,opt,name=token_id,json=tokenId,proto3" json:"token_id,omitempty"`
	LctId               string `protobuf:"bytes,2,opt,name=lct_id,json=lctId,proto3" json:"lct_id,omitempty"`
	EnergyAmount        string `protobuf:"bytes,3,opt,name=energy_amount,json=energyAmount,proto3" json:"energy_amount,omitempty"`
	CreatedAt           int64  `protobuf:"varint,4,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	OperationId         string `protobuf:"bytes,5,opt,name=operation_id,json=operationId,proto3" json:"operation_id,omitempty"`
	Status              string `protobuf:"bytes,6,opt,name=status,proto3" json:"status,omitempty"`
	RelationshipContext string `protobuf:"bytes,7,opt,name=relationship_context,json=relationshipContext,proto3" json:"relationship_context,omitempty"`
	ExpirationBlock     int64  `protobuf:"varint,8,opt,name=expiration_block,json=expirationBlock,proto3" json:"expiration_block,omitempty"`
	TrustScore          string `protobuf:"bytes,9,opt,name=trust_score,json=trustScore,proto3" json:"trust_score,omitempty"`
	EfficiencyRating    string `protobuf:"bytes,10,opt,name=efficiency_rating,json=efficiencyRating,proto3" json:"efficiency_rating,omitempty"`
	Version             int64  `protobuf:"varint,11,opt,name=version,proto3" json:"version,omitempty"`
}

func (m *RelationshipAtpToken) Reset()         { *m = RelationshipAtpToken{} }
func (m *RelationshipAtpToken) String() string { return proto.CompactTextString(m) }
func (*RelationshipAtpToken) ProtoMessage()    {}
func (*RelationshipAtpToken) Descriptor() ([]byte, []int) {
	return fileDescriptor_e01f84c14a514d12, []int{0}
}
func (m *RelationshipAtpToken) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RelationshipAtpToken) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RelationshipAtpToken.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RelationshipAtpToken) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RelationshipAtpToken.Merge(m, src)
}
func (m *RelationshipAtpToken) XXX_Size() int {
	return m.Size()
}
func (m *RelationshipAtpToken) XXX_DiscardUnknown() {
	xxx_messageInfo_RelationshipAtpToken.DiscardUnknown(m)
}

var xxx_messageInfo_RelationshipAtpToken proto.InternalMessageInfo

func (m *RelationshipAtpToken) GetTokenId() string {
	if m != nil {
		return m.TokenId
	}
	return ""
}

func (m *RelationshipAtpToken) GetLctId() string {
	if m != nil {
		return m.LctId
	}
	return ""
}

func (m *RelationshipAtpToken) GetEnergyAmount() string {
	if m != nil {
		return m.EnergyAmount
	}
	return ""
}

func (m *RelationshipAtpToken) GetCreatedAt() int64 {
	if m != nil {
		return m.CreatedAt
	}
	return 0
}

func (m *RelationshipAtpToken) GetOperationId() string {
	if m != nil {
		return m.OperationId
	}
	return ""
}

func (m *RelationshipAtpToken) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

func (m *RelationshipAtpToken) GetRelationshipContext() string {
	if m != nil {
		return m.RelationshipContext
	}
	return ""
}

func (m *RelationshipAtpToken) GetExpirationBlock() int64 {
	if m != nil {
		return m.ExpirationBlock
	}
	return 0
}

func (m *RelationshipAtpToken) GetTrustScore() string {
	if m != nil {
		return m.TrustScore
	}
	return ""
}

func (m *RelationshipAtpToken) GetEfficiencyRating() string {
	if m != nil {
		return m.EfficiencyRating
	}
	return ""
}

func (m *RelationshipAtpToken) GetVersion() int64 {
	if m != nil {
		return m.Version
	}
	return 0
}

func init() {
	proto.RegisterType((*RelationshipAtpToken)(nil), "racecarweb.energycycle.v1.RelationshipAtpToken")
}

func init() {
	proto.RegisterFile("racecarweb/energycycle/v1/relationship_atp_token.proto", fileDescriptor_e01f84c14a514d12)
}

var fileDescriptor_e01f84c14a514d12 = []byte{
	// 369 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x54, 0x91, 0x41, 0xef, 0xd2, 0x40,
	0x10, 0xc5, 0xa9, 0xf8, 0x2f, 0x30, 0x60, 0xc4, 0x15, 0xcd, 0x72, 0xb0, 0xa0, 0x5e, 0x30, 0x46,
	0x08, 0x31, 0x31, 0xf1, 0x08, 0x9e, 0xb8, 0x56, 0x4f, 0x5e, 0x9a, 0x65, 0x3b, 0x60, 0x43, 0xdd,
	0x6d, 0xb6, 0x03, 0xd2, 0x0f, 0x61, 0xe2, 0xc7, 0xf2, 0xc8, 0xd1, 0xa3, 0x81, 0x2f, 0x62, 0x3a,
	0xd4, 0x3f, 0x70, 0x9c, 0xdf, 0xdb, 0xf7, 0x66, 0xb2, 0x0f, 0x3e, 0x38, 0xa5, 0x51, 0x2b, 0xf7,
	0x03, 0x97, 0x13, 0x34, 0xe8, 0xd6, 0x85, 0x2e, 0x74, 0x8a, 0x93, 0xdd, 0x74, 0xe2, 0x30, 0x55,
	0x94, 0x58, 0x93, 0x7f, 0x4b, 0xb2, 0x48, 0x51, 0x16, 0x91, 0xdd, 0xa0, 0x19, 0x67, 0xce, 0x92,
	0x15, 0xfd, 0x8b, 0x6f, 0x7c, 0xe5, 0x1b, 0xef, 0xa6, 0xaf, 0x7e, 0xd6, 0xa1, 0x17, 0x5e, 0x79,
	0x67, 0x94, 0x7d, 0x29, 0x9d, 0xa2, 0x0f, 0x4d, 0x8e, 0x88, 0x92, 0x58, 0x7a, 0x43, 0x6f, 0xd4,
	0x0a, 0x1b, 0x3c, 0x2f, 0x62, 0xf1, 0x0c, 0xfc, 0x54, 0x53, 0x29, 0x3c, 0x60, 0xe1, 0x2e, 0xd5,
	0xb4, 0x88, 0xc5, 0x6b, 0x78, 0x74, 0x0e, 0x8f, 0xd4, 0x77, 0xbb, 0x35, 0x24, 0xeb, 0xac, 0x76,
	0xce, 0x70, 0xc6, 0x4c, 0xbc, 0x00, 0xd0, 0x0e, 0x15, 0x61, 0x1c, 0x29, 0x92, 0x0f, 0x87, 0xde,
	0xa8, 0x1e, 0xb6, 0x2a, 0x32, 0x23, 0xf1, 0x12, 0x3a, 0x36, 0x43, 0xc7, 0xe7, 0x94, 0x0b, 0xee,
	0x38, 0xa2, 0x7d, 0xcf, 0x16, 0xb1, 0x78, 0x0e, 0x7e, 0x4e, 0x8a, 0xb6, 0xb9, 0xf4, 0x59, 0xac,
	0x26, 0x31, 0x85, 0xde, 0xcd, 0x27, 0x68, 0x6b, 0x08, 0xf7, 0x24, 0x1b, 0xfc, 0xea, 0xe9, 0xb5,
	0xf6, 0xe9, 0x2c, 0x89, 0x37, 0xd0, 0xc5, 0x7d, 0x96, 0x54, 0xeb, 0x96, 0xa9, 0xd5, 0x1b, 0xd9,
	0xe4, 0x93, 0x1e, 0x5f, 0xf8, 0xbc, 0xc4, 0x62, 0x00, 0x6d, 0x72, 0xdb, 0x9c, 0xa2, 0x5c, 0x5b,
	0x87, 0xb2, 0xc5, 0xa1, 0xc0, 0xe8, 0x73, 0x49, 0xc4, 0x5b, 0x78, 0x82, 0xab, 0x55, 0xa2, 0x13,
	0x34, 0xba, 0x88, 0x4a, 0xab, 0x59, 0x4b, 0xe0, 0x67, 0xdd, 0x8b, 0x10, 0x32, 0x17, 0x12, 0x1a,
	0x3b, 0x74, 0x79, 0x62, 0x8d, 0x6c, 0xf3, 0xbe, 0xff, 0xe3, 0xfc, 0xe3, 0xef, 0x63, 0xe0, 0x1d,
	0x8e, 0x81, 0xf7, 0xf7, 0x18, 0x78, 0xbf, 0x4e, 0x41, 0xed, 0x70, 0x0a, 0x6a, 0x7f, 0x4e, 0x41,
	0xed, 0xeb, 0xa0, 0x2a, 0xf1, 0x5d, 0xd9, 0xfe, 0xfe, 0xa6, 0x7f, 0x2a, 0x32, 0xcc, 0x97, 0x3e,
	0x97, 0xfd, 0xfe, 0x5f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x6d, 0x0d, 0x4e, 0xcb, 0x26, 0x02, 0x00,
	0x00,
}

func (m *RelationshipAtpToken) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RelationshipAtpToken) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RelationshipAtpToken) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Version != 0 {
		i = encodeVarintRelationshipAtpToken(dAtA, i, uint64(m.Version))
		i--
		dAtA[i] = 0x58
	}
	if len(m.EfficiencyRating) > 0 {
		i -= len(m.EfficiencyRating)
		copy(dAtA[i:], m.EfficiencyRating)
		i = encodeVarintRelationshipAtpToken(dAtA, i, uint64(len(m.EfficiencyRating)))
		i--
		dAtA[i] = 0x52
	}
	if len(m.TrustScore) > 0 {
		i -= len(m.TrustScore)
		copy(dAtA[i:], m.TrustScore)
		i = encodeVarintRelationshipAtpToken(dAtA, i, uint64(len(m.TrustScore)))
		i--
		dAtA[i] = 0x4a
	}
	if m.ExpirationBlock != 0 {
		i = encodeVarintRelationshipAtpToken(dAtA, i, uint64(m.ExpirationBlock))
		i--
		dAtA[i] = 0x40
	}
	if len(m.RelationshipContext) > 0 {
		i -= len(m.RelationshipContext)
		copy(dAtA[i:], m.RelationshipContext)
		i = encodeVarintRelationshipAtpToken(dAtA, i, uint64(len(m.RelationshipContext)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.Status) > 0 {
		i -= len(m.Status)
		copy(dAtA[i:], m.Status)
		i = encodeVarintRelationshipAtpToken(dAtA, i, uint64(len(m.Status)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.OperationId) > 0 {
		i -= len(m.OperationId)
		copy(dAtA[i:], m.OperationId)
		i = encodeVarintRelationshipAtpToken(dAtA, i, uint64(len(m.OperationId)))
		i--
		dAtA[i] = 0x2a
	}
	if m.CreatedAt != 0 {
		i = encodeVarintRelationshipAtpToken(dAtA, i, uint64(m.CreatedAt))
		i--
		dAtA[i] = 0x20
	}
	if len(m.EnergyAmount) > 0 {
		i -= len(m.EnergyAmount)
		copy(dAtA[i:], m.EnergyAmount)
		i = encodeVarintRelationshipAtpToken(dAtA, i, uint64(len(m.EnergyAmount)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.LctId) > 0 {
		i -= len(m.LctId)
		copy(dAtA[i:], m.LctId)
		i = encodeVarintRelationshipAtpToken(dAtA, i, uint64(len(m.LctId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.TokenId) > 0 {
		i -= len(m.TokenId)
		copy(dAtA[i:], m.TokenId)
		i = encodeVarintRelationshipAtpToken(dAtA, i, uint64(len(m.TokenId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintRelationshipAtpToken(dAtA []byte, offset int, v uint64) int {
	offset -= sovRelationshipAtpToken(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *RelationshipAtpToken) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.TokenId)
	if l > 0 {
		n += 1 + l + sovRelationshipAtpToken(uint64(l))
	}
	l = len(m.LctId)
	if l > 0 {
		n += 1 + l + sovRelationshipAtpToken(uint64(l))
	}
	l = len(m.EnergyAmount)
	if l > 0 {
		n += 1 + l + sovRelationshipAtpToken(uint64(l))
	}
	if m.CreatedAt != 0 {
		n += 1 + sovRelationshipAtpToken(uint64(m.CreatedAt))
	}
	l = len(m.OperationId)
	if l > 0 {
		n += 1 + l + sovRelationshipAtpToken(uint64(l))
	}
	l = len(m.Status)
	if l > 0 {
		n += 1 + l + sovRelationshipAtpToken(uint64(l))
	}
	l = len(m.RelationshipContext)
	if l > 0 {
		n += 1 + l + sovRelationshipAtpToken(uint64(l))
	}
	if m.ExpirationBlock != 0 {
		n += 1 + sovRelationshipAtpToken(uint64(m.ExpirationBlock))
	}
	l = len(m.TrustScore)
	if l > 0 {
		n += 1 + l + sovRelationshipAtpToken(uint64(l))
	}
	l = len(m.EfficiencyRating)
	if l > 0 {
		n += 1 + l + sovRelationshipAtpToken(uint64(l))
	}
	if m.Version != 0 {
		n += 1 + sovRelationshipAtpToken(uint64(m.Version))
	}
	return n
}

func sovRelationshipAtpToken(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozRelationshipAtpToken(x uint64) (n int) {
	return sovRelationshipAtpToken(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *RelationshipAtpToken) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRelationshipAtpToken
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RelationshipAtpToken: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RelationshipAtpToken: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TokenId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRelationshipAtpToken
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRelationshipAtpToken
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRelationshipAtpToken
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TokenId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LctId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRelationshipAtpToken
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRelationshipAtpToken
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRelationshipAtpToken
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LctId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EnergyAmount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRelationshipAtpToken
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRelationshipAtpToken
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRelationshipAtpToken
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EnergyAmount = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAt", wireType)
			}
			m.CreatedAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRelationshipAtpToken
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CreatedAt |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OperationId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRelationshipAtpToken
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRelationshipAtpToken
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRelationshipAtpToken
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OperationId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRelationshipAtpToken
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRelationshipAtpToken
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRelationshipAtpToken
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Status = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RelationshipContext", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRelationshipAtpToken
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRelationshipAtpToken
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRelationshipAtpToken
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RelationshipContext = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExpirationBlock", wireType)
			}
			m.ExpirationBlock = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRelationshipAtpToken
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ExpirationBlock |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TrustScore", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRelationshipAtpToken
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRelationshipAtpToken
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRelationshipAtpToken
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TrustScore = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EfficiencyRating", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRelationshipAtpToken
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRelationshipAtpToken
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRelationshipAtpToken
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EfficiencyRating = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			m.Version = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRelationshipAtpToken
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Version |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRelationshipAtpToken(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRelationshipAtpToken
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipRelationshipAtpToken(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowRelationshipAtpToken
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRelationshipAtpToken
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRelationshipAtpToken
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthRelationshipAtpToken
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupRelationshipAtpToken
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthRelationshipAtpToken
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthRelationshipAtpToken        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowRelationshipAtpToken          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupRelationshipAtpToken = fmt.Errorf("proto: unexpected end of group")
)
