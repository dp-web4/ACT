// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: proto/api_bridge.proto

package api_bridgev1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	APIBridgeService_GetAccounts_FullMethodName                = "/api_bridge.v1.APIBridgeService/GetAccounts"
	APIBridgeService_RegisterComponent_FullMethodName          = "/api_bridge.v1.APIBridgeService/RegisterComponent"
	APIBridgeService_GetComponent_FullMethodName               = "/api_bridge.v1.APIBridgeService/GetComponent"
	APIBridgeService_GetComponentIdentity_FullMethodName       = "/api_bridge.v1.APIBridgeService/GetComponentIdentity"
	APIBridgeService_VerifyComponent_FullMethodName            = "/api_bridge.v1.APIBridgeService/VerifyComponent"
	APIBridgeService_CreateLCT_FullMethodName                  = "/api_bridge.v1.APIBridgeService/CreateLCT"
	APIBridgeService_GetLCT_FullMethodName                     = "/api_bridge.v1.APIBridgeService/GetLCT"
	APIBridgeService_UpdateLCTStatus_FullMethodName            = "/api_bridge.v1.APIBridgeService/UpdateLCTStatus"
	APIBridgeService_InitiatePairing_FullMethodName            = "/api_bridge.v1.APIBridgeService/InitiatePairing"
	APIBridgeService_CompletePairing_FullMethodName            = "/api_bridge.v1.APIBridgeService/CompletePairing"
	APIBridgeService_RevokePairing_FullMethodName              = "/api_bridge.v1.APIBridgeService/RevokePairing"
	APIBridgeService_GetPairingStatus_FullMethodName           = "/api_bridge.v1.APIBridgeService/GetPairingStatus"
	APIBridgeService_CreateTrustTensor_FullMethodName          = "/api_bridge.v1.APIBridgeService/CreateTrustTensor"
	APIBridgeService_GetTrustTensor_FullMethodName             = "/api_bridge.v1.APIBridgeService/GetTrustTensor"
	APIBridgeService_UpdateTrustScore_FullMethodName           = "/api_bridge.v1.APIBridgeService/UpdateTrustScore"
	APIBridgeService_CreateEnergyOperation_FullMethodName      = "/api_bridge.v1.APIBridgeService/CreateEnergyOperation"
	APIBridgeService_ExecuteEnergyTransfer_FullMethodName      = "/api_bridge.v1.APIBridgeService/ExecuteEnergyTransfer"
	APIBridgeService_GetEnergyBalance_FullMethodName           = "/api_bridge.v1.APIBridgeService/GetEnergyBalance"
	APIBridgeService_QueuePairingRequest_FullMethodName        = "/api_bridge.v1.APIBridgeService/QueuePairingRequest"
	APIBridgeService_GetQueueStatus_FullMethodName             = "/api_bridge.v1.APIBridgeService/GetQueueStatus"
	APIBridgeService_ProcessOfflineQueue_FullMethodName        = "/api_bridge.v1.APIBridgeService/ProcessOfflineQueue"
	APIBridgeService_CancelRequest_FullMethodName              = "/api_bridge.v1.APIBridgeService/CancelRequest"
	APIBridgeService_GetQueuedRequests_FullMethodName          = "/api_bridge.v1.APIBridgeService/GetQueuedRequests"
	APIBridgeService_ListProxyQueue_FullMethodName             = "/api_bridge.v1.APIBridgeService/ListProxyQueue"
	APIBridgeService_CreatePairingAuthorization_FullMethodName = "/api_bridge.v1.APIBridgeService/CreatePairingAuthorization"
	APIBridgeService_GetComponentAuthorizations_FullMethodName = "/api_bridge.v1.APIBridgeService/GetComponentAuthorizations"
	APIBridgeService_UpdateAuthorization_FullMethodName        = "/api_bridge.v1.APIBridgeService/UpdateAuthorization"
	APIBridgeService_RevokeAuthorization_FullMethodName        = "/api_bridge.v1.APIBridgeService/RevokeAuthorization"
	APIBridgeService_CheckPairingAuthorization_FullMethodName  = "/api_bridge.v1.APIBridgeService/CheckPairingAuthorization"
	APIBridgeService_CalculateRelationshipTrust_FullMethodName = "/api_bridge.v1.APIBridgeService/CalculateRelationshipTrust"
	APIBridgeService_GetRelationshipTensor_FullMethodName      = "/api_bridge.v1.APIBridgeService/GetRelationshipTensor"
	APIBridgeService_UpdateTensorScore_FullMethodName          = "/api_bridge.v1.APIBridgeService/UpdateTensorScore"
	APIBridgeService_StreamBatteryStatus_FullMethodName        = "/api_bridge.v1.APIBridgeService/StreamBatteryStatus"
)

// APIBridgeServiceClient is the client API for APIBridgeService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// API Bridge Service provides gRPC interface for blockchain operations
type APIBridgeServiceClient interface {
	// Account Management
	GetAccounts(ctx context.Context, in *GetAccountsRequest, opts ...grpc.CallOption) (*GetAccountsResponse, error)
	// Component Registry
	RegisterComponent(ctx context.Context, in *RegisterComponentRequest, opts ...grpc.CallOption) (*RegisterComponentResponse, error)
	GetComponent(ctx context.Context, in *GetComponentRequest, opts ...grpc.CallOption) (*GetComponentResponse, error)
	GetComponentIdentity(ctx context.Context, in *GetComponentIdentityRequest, opts ...grpc.CallOption) (*GetComponentIdentityResponse, error)
	VerifyComponent(ctx context.Context, in *VerifyComponentRequest, opts ...grpc.CallOption) (*VerifyComponentResponse, error)
	// LCT Management
	CreateLCT(ctx context.Context, in *CreateLCTRequest, opts ...grpc.CallOption) (*CreateLCTResponse, error)
	GetLCT(ctx context.Context, in *GetLCTRequest, opts ...grpc.CallOption) (*GetLCTResponse, error)
	UpdateLCTStatus(ctx context.Context, in *UpdateLCTStatusRequest, opts ...grpc.CallOption) (*UpdateLCTStatusResponse, error)
	// Pairing
	InitiatePairing(ctx context.Context, in *InitiatePairingRequest, opts ...grpc.CallOption) (*InitiatePairingResponse, error)
	CompletePairing(ctx context.Context, in *CompletePairingRequest, opts ...grpc.CallOption) (*CompletePairingResponse, error)
	RevokePairing(ctx context.Context, in *RevokePairingRequest, opts ...grpc.CallOption) (*RevokePairingResponse, error)
	GetPairingStatus(ctx context.Context, in *GetPairingStatusRequest, opts ...grpc.CallOption) (*GetPairingStatusResponse, error)
	// Trust Tensor
	CreateTrustTensor(ctx context.Context, in *CreateTrustTensorRequest, opts ...grpc.CallOption) (*CreateTrustTensorResponse, error)
	GetTrustTensor(ctx context.Context, in *GetTrustTensorRequest, opts ...grpc.CallOption) (*GetTrustTensorResponse, error)
	UpdateTrustScore(ctx context.Context, in *UpdateTrustScoreRequest, opts ...grpc.CallOption) (*UpdateTrustScoreResponse, error)
	// Energy Operations
	CreateEnergyOperation(ctx context.Context, in *CreateEnergyOperationRequest, opts ...grpc.CallOption) (*CreateEnergyOperationResponse, error)
	ExecuteEnergyTransfer(ctx context.Context, in *ExecuteEnergyTransferRequest, opts ...grpc.CallOption) (*ExecuteEnergyTransferResponse, error)
	GetEnergyBalance(ctx context.Context, in *GetEnergyBalanceRequest, opts ...grpc.CallOption) (*GetEnergyBalanceResponse, error)
	// Queue Management
	QueuePairingRequest(ctx context.Context, in *QueuePairingRequestRequest, opts ...grpc.CallOption) (*QueuePairingRequestResponse, error)
	GetQueueStatus(ctx context.Context, in *GetQueueStatusRequest, opts ...grpc.CallOption) (*GetQueueStatusResponse, error)
	ProcessOfflineQueue(ctx context.Context, in *ProcessOfflineQueueRequest, opts ...grpc.CallOption) (*ProcessOfflineQueueResponse, error)
	CancelRequest(ctx context.Context, in *CancelRequestRequest, opts ...grpc.CallOption) (*CancelRequestResponse, error)
	GetQueuedRequests(ctx context.Context, in *GetQueuedRequestsRequest, opts ...grpc.CallOption) (*GetQueuedRequestsResponse, error)
	ListProxyQueue(ctx context.Context, in *ListProxyQueueRequest, opts ...grpc.CallOption) (*ListProxyQueueResponse, error)
	// Authorization Management
	CreatePairingAuthorization(ctx context.Context, in *CreatePairingAuthorizationRequest, opts ...grpc.CallOption) (*CreatePairingAuthorizationResponse, error)
	GetComponentAuthorizations(ctx context.Context, in *GetComponentAuthorizationsRequest, opts ...grpc.CallOption) (*GetComponentAuthorizationsResponse, error)
	UpdateAuthorization(ctx context.Context, in *UpdateAuthorizationRequest, opts ...grpc.CallOption) (*UpdateAuthorizationResponse, error)
	RevokeAuthorization(ctx context.Context, in *RevokeAuthorizationRequest, opts ...grpc.CallOption) (*RevokeAuthorizationResponse, error)
	CheckPairingAuthorization(ctx context.Context, in *CheckPairingAuthorizationRequest, opts ...grpc.CallOption) (*CheckPairingAuthorizationResponse, error)
	// Trust Tensor Enhanced Operations
	CalculateRelationshipTrust(ctx context.Context, in *CalculateRelationshipTrustRequest, opts ...grpc.CallOption) (*CalculateRelationshipTrustResponse, error)
	GetRelationshipTensor(ctx context.Context, in *GetRelationshipTensorRequest, opts ...grpc.CallOption) (*GetRelationshipTensorResponse, error)
	UpdateTensorScore(ctx context.Context, in *UpdateTensorScoreRequest, opts ...grpc.CallOption) (*UpdateTensorScoreResponse, error)
	// Real-time streaming for battery monitoring
	StreamBatteryStatus(ctx context.Context, in *StreamBatteryStatusRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[BatteryStatusUpdate], error)
}

type aPIBridgeServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAPIBridgeServiceClient(cc grpc.ClientConnInterface) APIBridgeServiceClient {
	return &aPIBridgeServiceClient{cc}
}

func (c *aPIBridgeServiceClient) GetAccounts(ctx context.Context, in *GetAccountsRequest, opts ...grpc.CallOption) (*GetAccountsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetAccountsResponse)
	err := c.cc.Invoke(ctx, APIBridgeService_GetAccounts_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIBridgeServiceClient) RegisterComponent(ctx context.Context, in *RegisterComponentRequest, opts ...grpc.CallOption) (*RegisterComponentResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RegisterComponentResponse)
	err := c.cc.Invoke(ctx, APIBridgeService_RegisterComponent_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIBridgeServiceClient) GetComponent(ctx context.Context, in *GetComponentRequest, opts ...grpc.CallOption) (*GetComponentResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetComponentResponse)
	err := c.cc.Invoke(ctx, APIBridgeService_GetComponent_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIBridgeServiceClient) GetComponentIdentity(ctx context.Context, in *GetComponentIdentityRequest, opts ...grpc.CallOption) (*GetComponentIdentityResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetComponentIdentityResponse)
	err := c.cc.Invoke(ctx, APIBridgeService_GetComponentIdentity_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIBridgeServiceClient) VerifyComponent(ctx context.Context, in *VerifyComponentRequest, opts ...grpc.CallOption) (*VerifyComponentResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(VerifyComponentResponse)
	err := c.cc.Invoke(ctx, APIBridgeService_VerifyComponent_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIBridgeServiceClient) CreateLCT(ctx context.Context, in *CreateLCTRequest, opts ...grpc.CallOption) (*CreateLCTResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateLCTResponse)
	err := c.cc.Invoke(ctx, APIBridgeService_CreateLCT_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIBridgeServiceClient) GetLCT(ctx context.Context, in *GetLCTRequest, opts ...grpc.CallOption) (*GetLCTResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetLCTResponse)
	err := c.cc.Invoke(ctx, APIBridgeService_GetLCT_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIBridgeServiceClient) UpdateLCTStatus(ctx context.Context, in *UpdateLCTStatusRequest, opts ...grpc.CallOption) (*UpdateLCTStatusResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateLCTStatusResponse)
	err := c.cc.Invoke(ctx, APIBridgeService_UpdateLCTStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIBridgeServiceClient) InitiatePairing(ctx context.Context, in *InitiatePairingRequest, opts ...grpc.CallOption) (*InitiatePairingResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(InitiatePairingResponse)
	err := c.cc.Invoke(ctx, APIBridgeService_InitiatePairing_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIBridgeServiceClient) CompletePairing(ctx context.Context, in *CompletePairingRequest, opts ...grpc.CallOption) (*CompletePairingResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CompletePairingResponse)
	err := c.cc.Invoke(ctx, APIBridgeService_CompletePairing_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIBridgeServiceClient) RevokePairing(ctx context.Context, in *RevokePairingRequest, opts ...grpc.CallOption) (*RevokePairingResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RevokePairingResponse)
	err := c.cc.Invoke(ctx, APIBridgeService_RevokePairing_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIBridgeServiceClient) GetPairingStatus(ctx context.Context, in *GetPairingStatusRequest, opts ...grpc.CallOption) (*GetPairingStatusResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetPairingStatusResponse)
	err := c.cc.Invoke(ctx, APIBridgeService_GetPairingStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIBridgeServiceClient) CreateTrustTensor(ctx context.Context, in *CreateTrustTensorRequest, opts ...grpc.CallOption) (*CreateTrustTensorResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateTrustTensorResponse)
	err := c.cc.Invoke(ctx, APIBridgeService_CreateTrustTensor_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIBridgeServiceClient) GetTrustTensor(ctx context.Context, in *GetTrustTensorRequest, opts ...grpc.CallOption) (*GetTrustTensorResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetTrustTensorResponse)
	err := c.cc.Invoke(ctx, APIBridgeService_GetTrustTensor_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIBridgeServiceClient) UpdateTrustScore(ctx context.Context, in *UpdateTrustScoreRequest, opts ...grpc.CallOption) (*UpdateTrustScoreResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateTrustScoreResponse)
	err := c.cc.Invoke(ctx, APIBridgeService_UpdateTrustScore_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIBridgeServiceClient) CreateEnergyOperation(ctx context.Context, in *CreateEnergyOperationRequest, opts ...grpc.CallOption) (*CreateEnergyOperationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateEnergyOperationResponse)
	err := c.cc.Invoke(ctx, APIBridgeService_CreateEnergyOperation_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIBridgeServiceClient) ExecuteEnergyTransfer(ctx context.Context, in *ExecuteEnergyTransferRequest, opts ...grpc.CallOption) (*ExecuteEnergyTransferResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ExecuteEnergyTransferResponse)
	err := c.cc.Invoke(ctx, APIBridgeService_ExecuteEnergyTransfer_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIBridgeServiceClient) GetEnergyBalance(ctx context.Context, in *GetEnergyBalanceRequest, opts ...grpc.CallOption) (*GetEnergyBalanceResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetEnergyBalanceResponse)
	err := c.cc.Invoke(ctx, APIBridgeService_GetEnergyBalance_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIBridgeServiceClient) QueuePairingRequest(ctx context.Context, in *QueuePairingRequestRequest, opts ...grpc.CallOption) (*QueuePairingRequestResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(QueuePairingRequestResponse)
	err := c.cc.Invoke(ctx, APIBridgeService_QueuePairingRequest_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIBridgeServiceClient) GetQueueStatus(ctx context.Context, in *GetQueueStatusRequest, opts ...grpc.CallOption) (*GetQueueStatusResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetQueueStatusResponse)
	err := c.cc.Invoke(ctx, APIBridgeService_GetQueueStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIBridgeServiceClient) ProcessOfflineQueue(ctx context.Context, in *ProcessOfflineQueueRequest, opts ...grpc.CallOption) (*ProcessOfflineQueueResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ProcessOfflineQueueResponse)
	err := c.cc.Invoke(ctx, APIBridgeService_ProcessOfflineQueue_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIBridgeServiceClient) CancelRequest(ctx context.Context, in *CancelRequestRequest, opts ...grpc.CallOption) (*CancelRequestResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CancelRequestResponse)
	err := c.cc.Invoke(ctx, APIBridgeService_CancelRequest_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIBridgeServiceClient) GetQueuedRequests(ctx context.Context, in *GetQueuedRequestsRequest, opts ...grpc.CallOption) (*GetQueuedRequestsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetQueuedRequestsResponse)
	err := c.cc.Invoke(ctx, APIBridgeService_GetQueuedRequests_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIBridgeServiceClient) ListProxyQueue(ctx context.Context, in *ListProxyQueueRequest, opts ...grpc.CallOption) (*ListProxyQueueResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListProxyQueueResponse)
	err := c.cc.Invoke(ctx, APIBridgeService_ListProxyQueue_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIBridgeServiceClient) CreatePairingAuthorization(ctx context.Context, in *CreatePairingAuthorizationRequest, opts ...grpc.CallOption) (*CreatePairingAuthorizationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreatePairingAuthorizationResponse)
	err := c.cc.Invoke(ctx, APIBridgeService_CreatePairingAuthorization_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIBridgeServiceClient) GetComponentAuthorizations(ctx context.Context, in *GetComponentAuthorizationsRequest, opts ...grpc.CallOption) (*GetComponentAuthorizationsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetComponentAuthorizationsResponse)
	err := c.cc.Invoke(ctx, APIBridgeService_GetComponentAuthorizations_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIBridgeServiceClient) UpdateAuthorization(ctx context.Context, in *UpdateAuthorizationRequest, opts ...grpc.CallOption) (*UpdateAuthorizationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateAuthorizationResponse)
	err := c.cc.Invoke(ctx, APIBridgeService_UpdateAuthorization_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIBridgeServiceClient) RevokeAuthorization(ctx context.Context, in *RevokeAuthorizationRequest, opts ...grpc.CallOption) (*RevokeAuthorizationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RevokeAuthorizationResponse)
	err := c.cc.Invoke(ctx, APIBridgeService_RevokeAuthorization_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIBridgeServiceClient) CheckPairingAuthorization(ctx context.Context, in *CheckPairingAuthorizationRequest, opts ...grpc.CallOption) (*CheckPairingAuthorizationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CheckPairingAuthorizationResponse)
	err := c.cc.Invoke(ctx, APIBridgeService_CheckPairingAuthorization_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIBridgeServiceClient) CalculateRelationshipTrust(ctx context.Context, in *CalculateRelationshipTrustRequest, opts ...grpc.CallOption) (*CalculateRelationshipTrustResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CalculateRelationshipTrustResponse)
	err := c.cc.Invoke(ctx, APIBridgeService_CalculateRelationshipTrust_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIBridgeServiceClient) GetRelationshipTensor(ctx context.Context, in *GetRelationshipTensorRequest, opts ...grpc.CallOption) (*GetRelationshipTensorResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetRelationshipTensorResponse)
	err := c.cc.Invoke(ctx, APIBridgeService_GetRelationshipTensor_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIBridgeServiceClient) UpdateTensorScore(ctx context.Context, in *UpdateTensorScoreRequest, opts ...grpc.CallOption) (*UpdateTensorScoreResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateTensorScoreResponse)
	err := c.cc.Invoke(ctx, APIBridgeService_UpdateTensorScore_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIBridgeServiceClient) StreamBatteryStatus(ctx context.Context, in *StreamBatteryStatusRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[BatteryStatusUpdate], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &APIBridgeService_ServiceDesc.Streams[0], APIBridgeService_StreamBatteryStatus_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[StreamBatteryStatusRequest, BatteryStatusUpdate]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type APIBridgeService_StreamBatteryStatusClient = grpc.ServerStreamingClient[BatteryStatusUpdate]

// APIBridgeServiceServer is the server API for APIBridgeService service.
// All implementations must embed UnimplementedAPIBridgeServiceServer
// for forward compatibility.
//
// API Bridge Service provides gRPC interface for blockchain operations
type APIBridgeServiceServer interface {
	// Account Management
	GetAccounts(context.Context, *GetAccountsRequest) (*GetAccountsResponse, error)
	// Component Registry
	RegisterComponent(context.Context, *RegisterComponentRequest) (*RegisterComponentResponse, error)
	GetComponent(context.Context, *GetComponentRequest) (*GetComponentResponse, error)
	GetComponentIdentity(context.Context, *GetComponentIdentityRequest) (*GetComponentIdentityResponse, error)
	VerifyComponent(context.Context, *VerifyComponentRequest) (*VerifyComponentResponse, error)
	// LCT Management
	CreateLCT(context.Context, *CreateLCTRequest) (*CreateLCTResponse, error)
	GetLCT(context.Context, *GetLCTRequest) (*GetLCTResponse, error)
	UpdateLCTStatus(context.Context, *UpdateLCTStatusRequest) (*UpdateLCTStatusResponse, error)
	// Pairing
	InitiatePairing(context.Context, *InitiatePairingRequest) (*InitiatePairingResponse, error)
	CompletePairing(context.Context, *CompletePairingRequest) (*CompletePairingResponse, error)
	RevokePairing(context.Context, *RevokePairingRequest) (*RevokePairingResponse, error)
	GetPairingStatus(context.Context, *GetPairingStatusRequest) (*GetPairingStatusResponse, error)
	// Trust Tensor
	CreateTrustTensor(context.Context, *CreateTrustTensorRequest) (*CreateTrustTensorResponse, error)
	GetTrustTensor(context.Context, *GetTrustTensorRequest) (*GetTrustTensorResponse, error)
	UpdateTrustScore(context.Context, *UpdateTrustScoreRequest) (*UpdateTrustScoreResponse, error)
	// Energy Operations
	CreateEnergyOperation(context.Context, *CreateEnergyOperationRequest) (*CreateEnergyOperationResponse, error)
	ExecuteEnergyTransfer(context.Context, *ExecuteEnergyTransferRequest) (*ExecuteEnergyTransferResponse, error)
	GetEnergyBalance(context.Context, *GetEnergyBalanceRequest) (*GetEnergyBalanceResponse, error)
	// Queue Management
	QueuePairingRequest(context.Context, *QueuePairingRequestRequest) (*QueuePairingRequestResponse, error)
	GetQueueStatus(context.Context, *GetQueueStatusRequest) (*GetQueueStatusResponse, error)
	ProcessOfflineQueue(context.Context, *ProcessOfflineQueueRequest) (*ProcessOfflineQueueResponse, error)
	CancelRequest(context.Context, *CancelRequestRequest) (*CancelRequestResponse, error)
	GetQueuedRequests(context.Context, *GetQueuedRequestsRequest) (*GetQueuedRequestsResponse, error)
	ListProxyQueue(context.Context, *ListProxyQueueRequest) (*ListProxyQueueResponse, error)
	// Authorization Management
	CreatePairingAuthorization(context.Context, *CreatePairingAuthorizationRequest) (*CreatePairingAuthorizationResponse, error)
	GetComponentAuthorizations(context.Context, *GetComponentAuthorizationsRequest) (*GetComponentAuthorizationsResponse, error)
	UpdateAuthorization(context.Context, *UpdateAuthorizationRequest) (*UpdateAuthorizationResponse, error)
	RevokeAuthorization(context.Context, *RevokeAuthorizationRequest) (*RevokeAuthorizationResponse, error)
	CheckPairingAuthorization(context.Context, *CheckPairingAuthorizationRequest) (*CheckPairingAuthorizationResponse, error)
	// Trust Tensor Enhanced Operations
	CalculateRelationshipTrust(context.Context, *CalculateRelationshipTrustRequest) (*CalculateRelationshipTrustResponse, error)
	GetRelationshipTensor(context.Context, *GetRelationshipTensorRequest) (*GetRelationshipTensorResponse, error)
	UpdateTensorScore(context.Context, *UpdateTensorScoreRequest) (*UpdateTensorScoreResponse, error)
	// Real-time streaming for battery monitoring
	StreamBatteryStatus(*StreamBatteryStatusRequest, grpc.ServerStreamingServer[BatteryStatusUpdate]) error
	mustEmbedUnimplementedAPIBridgeServiceServer()
}

// UnimplementedAPIBridgeServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedAPIBridgeServiceServer struct{}

func (UnimplementedAPIBridgeServiceServer) GetAccounts(context.Context, *GetAccountsRequest) (*GetAccountsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAccounts not implemented")
}
func (UnimplementedAPIBridgeServiceServer) RegisterComponent(context.Context, *RegisterComponentRequest) (*RegisterComponentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterComponent not implemented")
}
func (UnimplementedAPIBridgeServiceServer) GetComponent(context.Context, *GetComponentRequest) (*GetComponentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetComponent not implemented")
}
func (UnimplementedAPIBridgeServiceServer) GetComponentIdentity(context.Context, *GetComponentIdentityRequest) (*GetComponentIdentityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetComponentIdentity not implemented")
}
func (UnimplementedAPIBridgeServiceServer) VerifyComponent(context.Context, *VerifyComponentRequest) (*VerifyComponentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VerifyComponent not implemented")
}
func (UnimplementedAPIBridgeServiceServer) CreateLCT(context.Context, *CreateLCTRequest) (*CreateLCTResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateLCT not implemented")
}
func (UnimplementedAPIBridgeServiceServer) GetLCT(context.Context, *GetLCTRequest) (*GetLCTResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLCT not implemented")
}
func (UnimplementedAPIBridgeServiceServer) UpdateLCTStatus(context.Context, *UpdateLCTStatusRequest) (*UpdateLCTStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateLCTStatus not implemented")
}
func (UnimplementedAPIBridgeServiceServer) InitiatePairing(context.Context, *InitiatePairingRequest) (*InitiatePairingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InitiatePairing not implemented")
}
func (UnimplementedAPIBridgeServiceServer) CompletePairing(context.Context, *CompletePairingRequest) (*CompletePairingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CompletePairing not implemented")
}
func (UnimplementedAPIBridgeServiceServer) RevokePairing(context.Context, *RevokePairingRequest) (*RevokePairingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RevokePairing not implemented")
}
func (UnimplementedAPIBridgeServiceServer) GetPairingStatus(context.Context, *GetPairingStatusRequest) (*GetPairingStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPairingStatus not implemented")
}
func (UnimplementedAPIBridgeServiceServer) CreateTrustTensor(context.Context, *CreateTrustTensorRequest) (*CreateTrustTensorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTrustTensor not implemented")
}
func (UnimplementedAPIBridgeServiceServer) GetTrustTensor(context.Context, *GetTrustTensorRequest) (*GetTrustTensorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTrustTensor not implemented")
}
func (UnimplementedAPIBridgeServiceServer) UpdateTrustScore(context.Context, *UpdateTrustScoreRequest) (*UpdateTrustScoreResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTrustScore not implemented")
}
func (UnimplementedAPIBridgeServiceServer) CreateEnergyOperation(context.Context, *CreateEnergyOperationRequest) (*CreateEnergyOperationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateEnergyOperation not implemented")
}
func (UnimplementedAPIBridgeServiceServer) ExecuteEnergyTransfer(context.Context, *ExecuteEnergyTransferRequest) (*ExecuteEnergyTransferResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExecuteEnergyTransfer not implemented")
}
func (UnimplementedAPIBridgeServiceServer) GetEnergyBalance(context.Context, *GetEnergyBalanceRequest) (*GetEnergyBalanceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEnergyBalance not implemented")
}
func (UnimplementedAPIBridgeServiceServer) QueuePairingRequest(context.Context, *QueuePairingRequestRequest) (*QueuePairingRequestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueuePairingRequest not implemented")
}
func (UnimplementedAPIBridgeServiceServer) GetQueueStatus(context.Context, *GetQueueStatusRequest) (*GetQueueStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetQueueStatus not implemented")
}
func (UnimplementedAPIBridgeServiceServer) ProcessOfflineQueue(context.Context, *ProcessOfflineQueueRequest) (*ProcessOfflineQueueResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProcessOfflineQueue not implemented")
}
func (UnimplementedAPIBridgeServiceServer) CancelRequest(context.Context, *CancelRequestRequest) (*CancelRequestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelRequest not implemented")
}
func (UnimplementedAPIBridgeServiceServer) GetQueuedRequests(context.Context, *GetQueuedRequestsRequest) (*GetQueuedRequestsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetQueuedRequests not implemented")
}
func (UnimplementedAPIBridgeServiceServer) ListProxyQueue(context.Context, *ListProxyQueueRequest) (*ListProxyQueueResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListProxyQueue not implemented")
}
func (UnimplementedAPIBridgeServiceServer) CreatePairingAuthorization(context.Context, *CreatePairingAuthorizationRequest) (*CreatePairingAuthorizationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePairingAuthorization not implemented")
}
func (UnimplementedAPIBridgeServiceServer) GetComponentAuthorizations(context.Context, *GetComponentAuthorizationsRequest) (*GetComponentAuthorizationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetComponentAuthorizations not implemented")
}
func (UnimplementedAPIBridgeServiceServer) UpdateAuthorization(context.Context, *UpdateAuthorizationRequest) (*UpdateAuthorizationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAuthorization not implemented")
}
func (UnimplementedAPIBridgeServiceServer) RevokeAuthorization(context.Context, *RevokeAuthorizationRequest) (*RevokeAuthorizationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RevokeAuthorization not implemented")
}
func (UnimplementedAPIBridgeServiceServer) CheckPairingAuthorization(context.Context, *CheckPairingAuthorizationRequest) (*CheckPairingAuthorizationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckPairingAuthorization not implemented")
}
func (UnimplementedAPIBridgeServiceServer) CalculateRelationshipTrust(context.Context, *CalculateRelationshipTrustRequest) (*CalculateRelationshipTrustResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CalculateRelationshipTrust not implemented")
}
func (UnimplementedAPIBridgeServiceServer) GetRelationshipTensor(context.Context, *GetRelationshipTensorRequest) (*GetRelationshipTensorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRelationshipTensor not implemented")
}
func (UnimplementedAPIBridgeServiceServer) UpdateTensorScore(context.Context, *UpdateTensorScoreRequest) (*UpdateTensorScoreResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTensorScore not implemented")
}
func (UnimplementedAPIBridgeServiceServer) StreamBatteryStatus(*StreamBatteryStatusRequest, grpc.ServerStreamingServer[BatteryStatusUpdate]) error {
	return status.Errorf(codes.Unimplemented, "method StreamBatteryStatus not implemented")
}
func (UnimplementedAPIBridgeServiceServer) mustEmbedUnimplementedAPIBridgeServiceServer() {}
func (UnimplementedAPIBridgeServiceServer) testEmbeddedByValue()                          {}

// UnsafeAPIBridgeServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to APIBridgeServiceServer will
// result in compilation errors.
type UnsafeAPIBridgeServiceServer interface {
	mustEmbedUnimplementedAPIBridgeServiceServer()
}

func RegisterAPIBridgeServiceServer(s grpc.ServiceRegistrar, srv APIBridgeServiceServer) {
	// If the following call pancis, it indicates UnimplementedAPIBridgeServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&APIBridgeService_ServiceDesc, srv)
}

func _APIBridgeService_GetAccounts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAccountsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIBridgeServiceServer).GetAccounts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: APIBridgeService_GetAccounts_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIBridgeServiceServer).GetAccounts(ctx, req.(*GetAccountsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _APIBridgeService_RegisterComponent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterComponentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIBridgeServiceServer).RegisterComponent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: APIBridgeService_RegisterComponent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIBridgeServiceServer).RegisterComponent(ctx, req.(*RegisterComponentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _APIBridgeService_GetComponent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetComponentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIBridgeServiceServer).GetComponent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: APIBridgeService_GetComponent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIBridgeServiceServer).GetComponent(ctx, req.(*GetComponentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _APIBridgeService_GetComponentIdentity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetComponentIdentityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIBridgeServiceServer).GetComponentIdentity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: APIBridgeService_GetComponentIdentity_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIBridgeServiceServer).GetComponentIdentity(ctx, req.(*GetComponentIdentityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _APIBridgeService_VerifyComponent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VerifyComponentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIBridgeServiceServer).VerifyComponent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: APIBridgeService_VerifyComponent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIBridgeServiceServer).VerifyComponent(ctx, req.(*VerifyComponentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _APIBridgeService_CreateLCT_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateLCTRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIBridgeServiceServer).CreateLCT(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: APIBridgeService_CreateLCT_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIBridgeServiceServer).CreateLCT(ctx, req.(*CreateLCTRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _APIBridgeService_GetLCT_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLCTRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIBridgeServiceServer).GetLCT(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: APIBridgeService_GetLCT_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIBridgeServiceServer).GetLCT(ctx, req.(*GetLCTRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _APIBridgeService_UpdateLCTStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateLCTStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIBridgeServiceServer).UpdateLCTStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: APIBridgeService_UpdateLCTStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIBridgeServiceServer).UpdateLCTStatus(ctx, req.(*UpdateLCTStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _APIBridgeService_InitiatePairing_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InitiatePairingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIBridgeServiceServer).InitiatePairing(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: APIBridgeService_InitiatePairing_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIBridgeServiceServer).InitiatePairing(ctx, req.(*InitiatePairingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _APIBridgeService_CompletePairing_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CompletePairingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIBridgeServiceServer).CompletePairing(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: APIBridgeService_CompletePairing_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIBridgeServiceServer).CompletePairing(ctx, req.(*CompletePairingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _APIBridgeService_RevokePairing_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RevokePairingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIBridgeServiceServer).RevokePairing(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: APIBridgeService_RevokePairing_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIBridgeServiceServer).RevokePairing(ctx, req.(*RevokePairingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _APIBridgeService_GetPairingStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPairingStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIBridgeServiceServer).GetPairingStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: APIBridgeService_GetPairingStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIBridgeServiceServer).GetPairingStatus(ctx, req.(*GetPairingStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _APIBridgeService_CreateTrustTensor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTrustTensorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIBridgeServiceServer).CreateTrustTensor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: APIBridgeService_CreateTrustTensor_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIBridgeServiceServer).CreateTrustTensor(ctx, req.(*CreateTrustTensorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _APIBridgeService_GetTrustTensor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTrustTensorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIBridgeServiceServer).GetTrustTensor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: APIBridgeService_GetTrustTensor_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIBridgeServiceServer).GetTrustTensor(ctx, req.(*GetTrustTensorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _APIBridgeService_UpdateTrustScore_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateTrustScoreRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIBridgeServiceServer).UpdateTrustScore(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: APIBridgeService_UpdateTrustScore_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIBridgeServiceServer).UpdateTrustScore(ctx, req.(*UpdateTrustScoreRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _APIBridgeService_CreateEnergyOperation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateEnergyOperationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIBridgeServiceServer).CreateEnergyOperation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: APIBridgeService_CreateEnergyOperation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIBridgeServiceServer).CreateEnergyOperation(ctx, req.(*CreateEnergyOperationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _APIBridgeService_ExecuteEnergyTransfer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExecuteEnergyTransferRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIBridgeServiceServer).ExecuteEnergyTransfer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: APIBridgeService_ExecuteEnergyTransfer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIBridgeServiceServer).ExecuteEnergyTransfer(ctx, req.(*ExecuteEnergyTransferRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _APIBridgeService_GetEnergyBalance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetEnergyBalanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIBridgeServiceServer).GetEnergyBalance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: APIBridgeService_GetEnergyBalance_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIBridgeServiceServer).GetEnergyBalance(ctx, req.(*GetEnergyBalanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _APIBridgeService_QueuePairingRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueuePairingRequestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIBridgeServiceServer).QueuePairingRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: APIBridgeService_QueuePairingRequest_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIBridgeServiceServer).QueuePairingRequest(ctx, req.(*QueuePairingRequestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _APIBridgeService_GetQueueStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetQueueStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIBridgeServiceServer).GetQueueStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: APIBridgeService_GetQueueStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIBridgeServiceServer).GetQueueStatus(ctx, req.(*GetQueueStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _APIBridgeService_ProcessOfflineQueue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProcessOfflineQueueRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIBridgeServiceServer).ProcessOfflineQueue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: APIBridgeService_ProcessOfflineQueue_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIBridgeServiceServer).ProcessOfflineQueue(ctx, req.(*ProcessOfflineQueueRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _APIBridgeService_CancelRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CancelRequestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIBridgeServiceServer).CancelRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: APIBridgeService_CancelRequest_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIBridgeServiceServer).CancelRequest(ctx, req.(*CancelRequestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _APIBridgeService_GetQueuedRequests_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetQueuedRequestsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIBridgeServiceServer).GetQueuedRequests(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: APIBridgeService_GetQueuedRequests_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIBridgeServiceServer).GetQueuedRequests(ctx, req.(*GetQueuedRequestsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _APIBridgeService_ListProxyQueue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListProxyQueueRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIBridgeServiceServer).ListProxyQueue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: APIBridgeService_ListProxyQueue_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIBridgeServiceServer).ListProxyQueue(ctx, req.(*ListProxyQueueRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _APIBridgeService_CreatePairingAuthorization_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePairingAuthorizationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIBridgeServiceServer).CreatePairingAuthorization(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: APIBridgeService_CreatePairingAuthorization_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIBridgeServiceServer).CreatePairingAuthorization(ctx, req.(*CreatePairingAuthorizationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _APIBridgeService_GetComponentAuthorizations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetComponentAuthorizationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIBridgeServiceServer).GetComponentAuthorizations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: APIBridgeService_GetComponentAuthorizations_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIBridgeServiceServer).GetComponentAuthorizations(ctx, req.(*GetComponentAuthorizationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _APIBridgeService_UpdateAuthorization_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAuthorizationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIBridgeServiceServer).UpdateAuthorization(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: APIBridgeService_UpdateAuthorization_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIBridgeServiceServer).UpdateAuthorization(ctx, req.(*UpdateAuthorizationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _APIBridgeService_RevokeAuthorization_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RevokeAuthorizationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIBridgeServiceServer).RevokeAuthorization(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: APIBridgeService_RevokeAuthorization_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIBridgeServiceServer).RevokeAuthorization(ctx, req.(*RevokeAuthorizationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _APIBridgeService_CheckPairingAuthorization_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckPairingAuthorizationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIBridgeServiceServer).CheckPairingAuthorization(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: APIBridgeService_CheckPairingAuthorization_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIBridgeServiceServer).CheckPairingAuthorization(ctx, req.(*CheckPairingAuthorizationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _APIBridgeService_CalculateRelationshipTrust_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CalculateRelationshipTrustRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIBridgeServiceServer).CalculateRelationshipTrust(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: APIBridgeService_CalculateRelationshipTrust_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIBridgeServiceServer).CalculateRelationshipTrust(ctx, req.(*CalculateRelationshipTrustRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _APIBridgeService_GetRelationshipTensor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRelationshipTensorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIBridgeServiceServer).GetRelationshipTensor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: APIBridgeService_GetRelationshipTensor_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIBridgeServiceServer).GetRelationshipTensor(ctx, req.(*GetRelationshipTensorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _APIBridgeService_UpdateTensorScore_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateTensorScoreRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIBridgeServiceServer).UpdateTensorScore(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: APIBridgeService_UpdateTensorScore_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIBridgeServiceServer).UpdateTensorScore(ctx, req.(*UpdateTensorScoreRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _APIBridgeService_StreamBatteryStatus_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(StreamBatteryStatusRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(APIBridgeServiceServer).StreamBatteryStatus(m, &grpc.GenericServerStream[StreamBatteryStatusRequest, BatteryStatusUpdate]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type APIBridgeService_StreamBatteryStatusServer = grpc.ServerStreamingServer[BatteryStatusUpdate]

// APIBridgeService_ServiceDesc is the grpc.ServiceDesc for APIBridgeService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var APIBridgeService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api_bridge.v1.APIBridgeService",
	HandlerType: (*APIBridgeServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetAccounts",
			Handler:    _APIBridgeService_GetAccounts_Handler,
		},
		{
			MethodName: "RegisterComponent",
			Handler:    _APIBridgeService_RegisterComponent_Handler,
		},
		{
			MethodName: "GetComponent",
			Handler:    _APIBridgeService_GetComponent_Handler,
		},
		{
			MethodName: "GetComponentIdentity",
			Handler:    _APIBridgeService_GetComponentIdentity_Handler,
		},
		{
			MethodName: "VerifyComponent",
			Handler:    _APIBridgeService_VerifyComponent_Handler,
		},
		{
			MethodName: "CreateLCT",
			Handler:    _APIBridgeService_CreateLCT_Handler,
		},
		{
			MethodName: "GetLCT",
			Handler:    _APIBridgeService_GetLCT_Handler,
		},
		{
			MethodName: "UpdateLCTStatus",
			Handler:    _APIBridgeService_UpdateLCTStatus_Handler,
		},
		{
			MethodName: "InitiatePairing",
			Handler:    _APIBridgeService_InitiatePairing_Handler,
		},
		{
			MethodName: "CompletePairing",
			Handler:    _APIBridgeService_CompletePairing_Handler,
		},
		{
			MethodName: "RevokePairing",
			Handler:    _APIBridgeService_RevokePairing_Handler,
		},
		{
			MethodName: "GetPairingStatus",
			Handler:    _APIBridgeService_GetPairingStatus_Handler,
		},
		{
			MethodName: "CreateTrustTensor",
			Handler:    _APIBridgeService_CreateTrustTensor_Handler,
		},
		{
			MethodName: "GetTrustTensor",
			Handler:    _APIBridgeService_GetTrustTensor_Handler,
		},
		{
			MethodName: "UpdateTrustScore",
			Handler:    _APIBridgeService_UpdateTrustScore_Handler,
		},
		{
			MethodName: "CreateEnergyOperation",
			Handler:    _APIBridgeService_CreateEnergyOperation_Handler,
		},
		{
			MethodName: "ExecuteEnergyTransfer",
			Handler:    _APIBridgeService_ExecuteEnergyTransfer_Handler,
		},
		{
			MethodName: "GetEnergyBalance",
			Handler:    _APIBridgeService_GetEnergyBalance_Handler,
		},
		{
			MethodName: "QueuePairingRequest",
			Handler:    _APIBridgeService_QueuePairingRequest_Handler,
		},
		{
			MethodName: "GetQueueStatus",
			Handler:    _APIBridgeService_GetQueueStatus_Handler,
		},
		{
			MethodName: "ProcessOfflineQueue",
			Handler:    _APIBridgeService_ProcessOfflineQueue_Handler,
		},
		{
			MethodName: "CancelRequest",
			Handler:    _APIBridgeService_CancelRequest_Handler,
		},
		{
			MethodName: "GetQueuedRequests",
			Handler:    _APIBridgeService_GetQueuedRequests_Handler,
		},
		{
			MethodName: "ListProxyQueue",
			Handler:    _APIBridgeService_ListProxyQueue_Handler,
		},
		{
			MethodName: "CreatePairingAuthorization",
			Handler:    _APIBridgeService_CreatePairingAuthorization_Handler,
		},
		{
			MethodName: "GetComponentAuthorizations",
			Handler:    _APIBridgeService_GetComponentAuthorizations_Handler,
		},
		{
			MethodName: "UpdateAuthorization",
			Handler:    _APIBridgeService_UpdateAuthorization_Handler,
		},
		{
			MethodName: "RevokeAuthorization",
			Handler:    _APIBridgeService_RevokeAuthorization_Handler,
		},
		{
			MethodName: "CheckPairingAuthorization",
			Handler:    _APIBridgeService_CheckPairingAuthorization_Handler,
		},
		{
			MethodName: "CalculateRelationshipTrust",
			Handler:    _APIBridgeService_CalculateRelationshipTrust_Handler,
		},
		{
			MethodName: "GetRelationshipTensor",
			Handler:    _APIBridgeService_GetRelationshipTensor_Handler,
		},
		{
			MethodName: "UpdateTensorScore",
			Handler:    _APIBridgeService_UpdateTensorScore_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamBatteryStatus",
			Handler:       _APIBridgeService_StreamBatteryStatus_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "proto/api_bridge.proto",
}
